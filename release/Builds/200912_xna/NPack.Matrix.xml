<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NPack.Matrix</name>
    </assembly>
    <members>
        <member name="T:NPack.Matrix.Matrix`1">
            <summary>
            A matrix. The fundamental unit of computation in linear algebra.
            </summary>
            <typeparam name="T">Type of element in the matrix.</typeparam>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.#ctor(NPack.MatrixFormat,System.Int32,System.Int32)">
            <summary>
            Creates a zero rectangular Matrix{T} of the given <paramref name="rowCount"/> by <paramref name="columnCount"/>.
            </summary>
            <param name="format">The format of the matrix, either row-major or column-major.</param>
            <param name="rowCount">Number of rows.</param>
            <param name="columnCount">Number of columns.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when rowCount or columnCount is less than 1.</exception>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.#ctor(NPack.MatrixFormat,System.Int32,System.Int32,`0)">
            <summary>
            Creates a rectangular Matrix{T} of the given <paramref name="rowCount"/> 
            by <paramref name="columnCount"/> with 
            <paramref name="value"/> assigned to the diagonal.
            </summary>
            <param name="format">The format of the matrix, either row-major or column-major.</param>
            <param name="rowCount">Number of rows.</param>
            <param name="columnCount">Number of columns.</param>
            <param name="value">The value to assign to the diagonal.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when rowCount or columnCount is less than 1.</exception>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.#ctor(NPack.MatrixFormat,`0[][])">
            <summary>
            Creates a new matrix with the given <paramref name="elements"/>.
            </summary>
            <param name="format">The format of the matrix, either row-major or column-major.</param>
            <param name="elements">The elements to use to fill the matrix.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter 'elements' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when length of 'elements' is 0 
            or when the first element of 'elements' is an array of length 0.</exception>
            <exception cref="T:System.ArgumentException">When the arrays of 'elements' are not all the same length.</exception>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.#ctor(NPack.Matrix.Matrix{`0})">
            <summary>
            Creates a new matrix as a copy of the given matrix.
            </summary>
            <param name="matrixToCopy">The matrix to copy.</param>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.op_Equality(NPack.Matrix.Matrix{`0},NPack.Matrix.Matrix{`0})">
            <summary>
            Compares two <see cref="T:NPack.Matrix.Matrix`1"/> instances for element-by-element
            equality.
            </summary>
            <param name="left">The left hand side of the equality comparison.</param>
            <param name="right">The right hand side of the equality comparison.</param>
            <returns>
            <see langword="true"/> if the matrixes are element-by-element equal, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.op_Inequality(NPack.Matrix.Matrix{`0},NPack.Matrix.Matrix{`0})">
            <summary>
            Compares two <see cref="T:NPack.Matrix.Matrix`1"/> instances element-by-element for 
            inequality.
            </summary>
            <param name="left">The left hand side of the inequality comparison.</param>
            <param name="right">The right hand side of the inequality comparison.</param>
            <returns>
            <see langword="true"/> if the matrixes are not equal in an element-by-element comparison, 
            <see langword="false"/> if they are equal.
            </returns>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.GetMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a submatrix.
            </summary>
            <param name="i0">Initial row index.</param>
            <param name="i1">Final row index.</param>
            <param name="j0">Initial column index.</param>
            <param name="j1">Final column index.</param>
            <returns>
            A submatrix with rows given by the rows <paramref name="i0" />
            through <paramref name="i1"/>
            and columns <paramref name="j0"/> through <paramref name="j1"/>.
            </returns>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.GetMatrix(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Gets a submatrix.
            </summary>
            <param name="rowIndicies">The indexes of the rows to include.</param>
            <param name="j0">The starting column to include.</param>
            <param name="j1">The ending column to include.</param>
            <returns>
            A submatrix with rows given by <paramref name="rowIndicies"/> 
            and columns <paramref name="j0"/> through <paramref name="j1"/>.
            </returns>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.Transpose">
            <summary>
            Returns a transpose of the <see cref="T:NPack.Matrix.Matrix`1"/>.
            </summary>
            <value>The rows-for-columns, columns-for-rows transpose of A.</value>
            <returns>AT, the transpose of matrix A.</returns>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.Scale(`0)">
            <summary>
            Scales the elements in the linear transformation by the given <paramref name="amount"/>.
            </summary>
            <param name="amount">
            Amount of scale to apply uniformly in all dimensions.
            </param>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.Scale(`0,NPack.MatrixOperationOrder)">
            <summary>
            Scales the elements in the linear transformation by the given <paramref name="amount"/>.
            </summary>
            <param name="amount">
            Amount of scale to apply uniformly in all dimensions.
            </param>
            <param name="order">The order to apply the transform in.</param>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.Scale(NPack.Matrix.Vector{`0})">
            <summary>
            Scales the elements in the linear transformation by the given <paramref name="scaleVector"/>.
            </summary>
            <param name="scaleVector">
            Amount of scale to apply on a column-by-column basis.
            </param>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.Scale(NPack.Matrix.Vector{`0},NPack.MatrixOperationOrder)">
            <summary>
            Scales the elements in the linear transformation by the given <paramref name="scaleVector"/>.
            </summary>
            <param name="scaleVector">Amount of scale to apply on a column-by-column basis.</param>
            <param name="order">The order to apply the transform in.</param>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.Shear(NPack.Matrix.Vector{`0})">
            <summary>
            Applies a shear to the transform by appending the shear to the <see cref="T:NPack.Matrix.AffineMatrix`1"/>.
            </summary>
            <param name="shearVector">The vector used to compute the shear.</param>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.Shear(NPack.Matrix.Vector{`0},NPack.MatrixOperationOrder)">
            <summary>
            Applies a shear to the transform, either before or after this <see cref="T:NPack.Matrix.AffineMatrix`1"/>.
            </summary>
            <param name="shearVector">The vector used to compute the shear.</param>
            <param name="order">The order to apply the transform in.</param>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.RotateAlong(NPack.Matrix.Vector{`0},System.Double)">
            <summary>
            Rotates the affine transform around the given <paramref name="axis"/>.
            </summary>
            <param name="axis">The axis to rotate around.</param>
            <param name="radians">Angle to rotate through.</param>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.RotateAlong(NPack.Matrix.Vector{`0},System.Double,NPack.MatrixOperationOrder)">
            <summary>
            Rotates the affine transform around the given <paramref name="axis"/>.
            </summary>
            <param name="axis">The axis to rotate around.</param>
            <param name="radians">Angle to rotate through.</param>
            <param name="order">The order to apply the transform in.</param>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.TransformMatrix(NPack.Matrix.Matrix{`0})">
            <summary>
            Applies this transform to the given <paramref name="input"/> matrix.
            </summary>
            <param name="input">Matrix to transform.</param>
            <returns>The multiplication of this transform matrix with the input matrix, 
            with the transform on the left-hand side of the operation.</returns>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.TransformVector(NPack.Matrix.Vector{`0})">
            <summary>
            Applies this transform to the given <paramref name="input"/> vector.
            </summary>
            <param name="input">Vector to transform.</param>
            <returns>
            The multiplication of this transform matrix with the input vector.
            </returns>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.TransformVectors(System.Collections.Generic.IEnumerable{NPack.Matrix.Vector{`0}})">
            <summary>
            Applies this transform to the given <paramref name="input"/> vectors.
            </summary>
            <param name="input">Set of vectors to transform.</param>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.TransformVector(`0[])">
            <summary>
            Applies this transform to the given <paramref name="input"/> vector.
            </summary>
            <param name="input">Vector to transform.</param>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.TransformVectors(System.Collections.Generic.IEnumerable{`0[]})">
            <summary>
            Applies this transform to the given <paramref name="input"/> vectors.
            </summary>
            <param name="input">Set of vectors to transform.</param>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.Negative">
            <summary>
            Returns a copy of the matrix with all the elements negated.
            </summary>
            <returns>For matrix A, -A.</returns>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.Add(NPack.Matrix.Matrix{`0})">
            <summary>
            Returns a matrix which is the result of the instance plus the <paramref name="value"/>.
            </summary>
            <param name="value">The matrix to add.</param>
            <returns>For matrix A, A + value.</returns>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.Subtract(NPack.Matrix.Matrix{`0})">
            <summary>
            Returns a matrix which is the result of the instance minus the <paramref name="value"/>.
            </summary>
            <param name="value">The matrix to subtract.</param>
            <returns>For matrix A, A - value.</returns>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.Multiply(`0)">
            <summary>
            Scalar multiplication.
            </summary>
            <param name="value">Scalar to multiply.</param>
            <returns>For matrix A, (value)A.</returns>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.Multiply(NPack.Matrix.Matrix{`0})">
            <summary>
            Matrix multiplication.
            </summary>
            <param name="value">Matrix to multiply.</param>
            <returns>For matrix A, (value)A.</returns>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.op_UnaryNegation(NPack.Matrix.Matrix{`0})">
            <summary>
            Negates the values of a matrix.
            </summary>
            <param name="value">The matrix to negate.</param>
            <returns>A negated matrix instance.</returns>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.op_Addition(NPack.Matrix.Matrix{`0},NPack.Matrix.Matrix{`0})">
            <summary>
            Adds two matrixes element-by-element.
            </summary>
            <param name="lhs">The left hand side of the addition operation.</param>
            <param name="rhs">The right hand side of the addition operation.</param>
            <returns>The sum of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the dimensions of <paramref name="lhs"/> and <paramref name="rhs"/>
            are not the same.
            </exception>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.op_Subtraction(NPack.Matrix.Matrix{`0},NPack.Matrix.Matrix{`0})">
            <summary>
            Subtracts two matrixes element-by-element.
            </summary>
            <param name="lhs">The left hand side of the subtraction operation.</param>
            <param name="rhs">The right hand side of the subtraction operation.</param>
            <returns>The difference of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the dimensions of <paramref name="lhs"/> and <paramref name="rhs"/>
            are not the same.
            </exception>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.op_Multiply(NPack.Matrix.Matrix{`0},`0)">
            <summary>
            Scalar multiplication.
            </summary>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.op_Multiply(NPack.Matrix.Matrix{`0},NPack.Matrix.Matrix{`0})">
            <summary>
            <see cref="T:NPack.Matrix.Matrix`1"/> multiplication.
            </summary>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.Clone">
            <summary>
            Creates an element-by-element copy of the matrix.
            </summary>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.Identity(NPack.MatrixFormat,System.Int32)">
            <summary>
            Generates a square matrix of the given <paramref name="rank"/> with
            the number 1 in each element of the diagonal.
            </summary>
            <param name="format">The format of the matrix, either row-major or column-major.</param>
            <param name="rank">Number of rows and columns of the <see cref="T:NPack.Matrix.Matrix`1"/>.</param>
            <returns>An identiy matrix of the given rank.</returns>
        </member>
        <member name="M:NPack.Matrix.Matrix`1.CreateRandom(NPack.MatrixFormat,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:NPack.Matrix.Matrix`1"/> filled with pseudo-random values.
            </summary>
            <remarks>
            The random values are generated by using the Mersenne Twister algorithm.
            </remarks>
            <param name="format">The format of the matrix, either row-major or column-major.</param>
            <param name="columns">Number of columns in the matrix.</param>
            <param name="rows">Number of rows in the matrix.</param>
            <returns>A <paramref name="rows"/> by <paramref name="columns"/> matrix with random values.</returns>
        </member>
        <member name="P:NPack.Matrix.Matrix`1.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for the matrix.
            </summary>
            <param name="row">The row to access.</param>
            <param name="column">The column to access.</param>
            <returns>The value at the given (row, column) of the matrix.</returns>
        </member>
        <member name="P:NPack.Matrix.Matrix`1.RowCount">
            <summary>
            Gets the number of rows in the matrix.
            </summary>
        </member>
        <member name="P:NPack.Matrix.Matrix`1.ColumnCount">
            <summary>
            Gets the number of columns in the matrix.
            </summary>
        </member>
        <member name="P:NPack.Matrix.Matrix`1.IsSquare">
            <summary>
            Gets <see langword="true"/> if the <see cref="T:NPack.Matrix.Matrix`1"/> is square, false if not.
            </summary>
        </member>
        <member name="P:NPack.Matrix.Matrix`1.IsSymmetrical">
            <summary>
            Gets <see langword="true"/> if the <see cref="T:NPack.Matrix.Matrix`1"/> is symmetrical, false if not.
            </summary>
        </member>
        <member name="P:NPack.Matrix.Matrix`1.IsSingular">
            <summary>
            Gets true if the matrix is singular (non-invertible).
            </summary>
        </member>
        <member name="P:NPack.Matrix.Matrix`1.IsInvertible">
            <summary>
            Gets true if the matrix is invertible (non-singular).
            </summary>
        </member>
        <member name="P:NPack.Matrix.Matrix`1.Determinant">
            <summary>
            Gets the determinant if the <see cref="T:NPack.Matrix.Matrix`1"/> instance is square.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if matrix is not sqare.</exception>
        </member>
        <member name="P:NPack.Matrix.Matrix`1.Format">
            <summary>
            Gets a <see cref="T:NPack.MatrixFormat"/> value indicating how the elements are stored.
            </summary>
        </member>
        <member name="P:NPack.Matrix.Matrix`1.Inverse">
            <summary>
            Gets the inverse of the <see cref="T:NPack.Matrix.Matrix`1"/> if it is square and non-singular, 
            the pseudo-inverse if it is non-square, and null if it is singluar (non-invertible).
            </summary>
        </member>
        <member name="P:NPack.Matrix.Matrix`1.Zero">
            <summary>
            Gets a zero matrix of the same row and column rank.
            </summary>
            <remarks>
            Uses <c>default(T)</c> as zero.
            </remarks>
        </member>
        <member name="P:NPack.Matrix.Matrix`1.One">
            <summary>
            Gets an identity matrix with the same row rank.
            </summary>
        </member>
        <member name="T:NPack.Matrix.NumericalMatrix`1">
            <summary>
            A matrix used to model systems numerically.
            </summary>
            <typeparam name="T">Type of element in the matrix.</typeparam>
        </member>
        <member name="M:NPack.Matrix.NumericalMatrix`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:NPack.Matrix.NumericalMatrix`1"/>.
            </summary>
            <param name="rows">Rows in the matrix.</param>
            <param name="cols">Columns in the matrix.</param>
        </member>
        <member name="M:NPack.Matrix.NumericalMatrix`1.#ctor(`0[][])">
            <summary>
            Creates a new <see cref="T:NPack.Matrix.NumericalMatrix`1"/>.
            </summary>
            <param name="elements">Elements to use for the matrix.</param>
        </member>
        <member name="M:NPack.Matrix.NumericalMatrix`1.#ctor(NPack.MatrixFormat,`0[][])">
            <summary>
            Creates a new <see cref="T:NPack.Matrix.NumericalMatrix`1"/> with a specific storage format.
            </summary>
            <param name="format">Storage format for the matrix, either row-major or column-major.</param>
            <param name="elements">Elements to use for the matrix.</param>
        </member>
        <member name="M:NPack.Matrix.NumericalMatrix`1.Solve(NPack.Interfaces.IMatrix{`0})">
            <summary>
            Returns a matrix which is the solution to the 
            <paramref name="b">given matrix</paramref>, if one exists.
            </summary>
            <param name="b">Matrix to solve this linear system for.</param>
            <returns>
            The solution, x, to the equation <c>Ax = B</c>, where the 
            <see cref="T:NPack.Matrix.NumericalMatrix`1"/> is the "A" matrix and the <paramref name="b"/>
            parameter is B.
            </returns>
        </member>
        <member name="P:NPack.Matrix.NumericalMatrix`1.Norm1">
            <summary>
            Gets the 1 norm for the matrix.
            </summary>
            <value>
            The maximum column sum.
            </value>
        </member>
        <member name="P:NPack.Matrix.NumericalMatrix`1.InfinityNorm">
            <summary>
            Gets the infinity (or max) norm for the matrix.
            </summary>
            <value>
            The maximum row sum.
            </value>
        </member>
        <member name="P:NPack.Matrix.NumericalMatrix`1.FrobeniusNorm">
            <summary>
            Gets the Frobenius norm for the matrix.
            </summary>
            <value>
            The square root of sum of squares of all elements.
            </value>
        </member>
        <member name="P:NPack.Matrix.NumericalMatrix`1.Trace">
            <summary>
            Gets the trace of the matrix.
            </summary>
            <returns>
            Sum of the diagonal elements.
            </returns>
        </member>
        <member name="T:NPack.Matrix.MatrixProcessor`1">
            <summary>
            Provides access to <see cref="T:NPack.Matrix.Matrix`1"/> processing operations via a 
            configured operations engine.
            </summary>
            <typeparam name="T">Type of matrix element.</typeparam>
        </member>
        <member name="P:NPack.Matrix.MatrixProcessor`1.Instance">
            <summary>
            Gets the singleton instance of a MatrixProcessor.
            </summary>
        </member>
        <member name="P:NPack.Matrix.MatrixProcessor`1.Operations">
            <summary>
            Gets the configured operations engine.
            </summary>
        </member>
        <member name="T:NPack.Matrix.AffineMatrix`1">
            <summary>
            Represents a column-major convention affine transform matrix.
            </summary>
            <typeparam name="T">Type of matrix element.</typeparam>
        </member>
        <member name="M:NPack.Matrix.AffineMatrix`1.#ctor(NPack.MatrixFormat,System.Int32)">
            <summary>
            Creates a new identiy affine transform matrix (with default(T).One in each element of the diagonal)
            with the given <paramref name="rank"/> for the number of rows and number of columns.
            </summary>
            <param name="format">Storage format of the matrix, either row-major or column-major.</param>
            <param name="rank">Number of rows and columns in the affine matrix.</param>
            <exception cref="T:System.NotSupportedException">If the matrix has a rank other than 3 or 4.</exception>
        </member>
        <member name="M:NPack.Matrix.AffineMatrix`1.#ctor(NPack.MatrixFormat,`0[][])">
            <summary>
            Creates a new affine transform matrix with the given <paramref name="elements"/>.
            </summary>
            <param name="format">Storage format of the matrix, either row-major or column-major.</param>
            <param name="elements">
            The elements for the array, with rows in the outer array for a <see cref="F:NPack.MatrixFormat.RowMajor"/> 
            matrix, and columns in the outer array for a <see cref="F:NPack.MatrixFormat.ColumnMajor"/> matrix.
            </param>
            <exception cref="T:System.ArgumentException">If the matrix is not square.</exception>
            <exception cref="T:System.NotSupportedException">If the matrix has a rank other than 3 or 4.</exception>
        </member>
        <member name="M:NPack.Matrix.AffineMatrix`1.#ctor(NPack.Matrix.Matrix{`0})">
            <summary>
            Creates a new affine transform matrix from the given <paramref name="matrix"/>.
            </summary>
            <param name="matrix">The matrix to copy.</param>
            <exception cref="T:System.ArgumentException">If the matrix is not square.</exception>
            <exception cref="T:System.NotSupportedException">If the matrix has a rank other than 3 or 4.</exception>
        </member>
        <member name="M:NPack.Matrix.AffineMatrix`1.Reset">
            <summary>
            Resets the affine transform to the identity matrix (a diagonal of one).
            </summary>
        </member>
        <member name="M:NPack.Matrix.AffineMatrix`1.RotateAt(NPack.Matrix.Vector{`0},NPack.Matrix.Vector{`0},System.Double)">
            <summary>
            Rotates the affine transform around the given <paramref name="axis"/> at the given <paramref name="point"/>.
            </summary>
            <param name="point">Point at which to compute the rotation.</param>
            <param name="axis">The axis to rotate around. May be an addition of the basis vectors.</param>
            <param name="radians">Angle to rotate through.</param>
        </member>
        <member name="M:NPack.Matrix.AffineMatrix`1.RotateAt(NPack.Matrix.Vector{`0},NPack.Matrix.Vector{`0},System.Double,NPack.MatrixOperationOrder)">
            <summary>
            Rotates the affine transform around the given <paramref name="axis"/> at the given <paramref name="point"/>.
            </summary>
            <param name="point">Point at which to compute the rotation.</param>
            <param name="axis">The axis to rotate around. May be an addition of the basis vectors.</param>
            <param name="radians">Angle to rotate through.</param>
            <param name="order">The order to apply the transform in.</param>
        </member>
        <member name="M:NPack.Matrix.AffineMatrix`1.Translate(`0)">
            <summary>
            Translates the affine transform by the given amount 
            in each dimension.
            </summary>
            <param name="amount">Amount to translate by.</param>
        </member>
        <member name="M:NPack.Matrix.AffineMatrix`1.Translate(`0,NPack.MatrixOperationOrder)">
            <summary>
            Translates the affine transform by the given amount 
            in each dimension.
            </summary>
            <param name="amount">Amount to translate by.</param>
            <param name="order">The order to apply the transform in.</param>
        </member>
        <member name="M:NPack.Matrix.AffineMatrix`1.Translate(NPack.Matrix.Vector{`0})">
            <summary>
            Translates the affine transform by the given translation vector.
            </summary>
            <param name="translateVector">
            A vector whose components will translate the 
            transform in the corresponding dimension.
            </param>
        </member>
        <member name="M:NPack.Matrix.AffineMatrix`1.Translate(NPack.Matrix.Vector{`0},NPack.MatrixOperationOrder)">
            <summary>
            Translates the affine transform by the given translation vector, in the order specified.
            </summary>
            <param name="translateVector">
            A vector whose components will translate the 
            transform in the corresponding dimension.
            </param>
            <param name="order">The order to apply the transform in.</param>
        </member>
        <member name="P:NPack.Matrix.AffineMatrix`1.Inverse">
            <summary>
            Gets the inverse of the <see cref="T:NPack.Matrix.AffineMatrix`1"/>.
            </summary>
        </member>
        <member name="T:NPack.Matrix.Vector`1">
            <summary>
            A vector.
            </summary>
            <typeparam name="T">Type of components in the vector.</typeparam>
        </member>
        <member name="M:NPack.Matrix.Vector`1.#ctor(System.Int32)">
            <summary>
            Creates a new vector with the given number of components.
            </summary>
            <param name="componentCount">The number of components in the vector.</param>
        </member>
        <member name="M:NPack.Matrix.Vector`1.#ctor(`0[])">
            <summary>
            Creates a new vector with the given components.
            </summary>
            <param name="components">The components to initialize the vector to.</param>
        </member>
        <member name="M:NPack.Matrix.Vector`1.ToString">
            <summary>
            Gets a String representation of the vector.
            </summary>
            <returns>A String describing the vector.</returns>
        </member>
        <member name="M:NPack.Matrix.Vector`1.Clone">
            <summary>
            Creates a component-by-component copy of the vector.
            </summary>
            <returns>A copy of the vector.</returns>
        </member>
        <member name="M:NPack.Matrix.Vector`1.Negative">
            <summary>
            Returns the vector multiplied by -1.
            </summary>
            <returns>The vector when multiplied by -1.</returns>
        </member>
        <member name="M:NPack.Matrix.Vector`1.GetEnumerator">
            <summary>
            Gets an enumerator which enumerates over the vector's components.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> which returns the vectors components when iterated.</returns>
        </member>
        <member name="M:NPack.Matrix.Vector`1.NPack#Interfaces#IMatrix{T}#Clone">
            <summary>
            Makes an element-by-element copy of the matrix.
            </summary>
            <returns>An exact copy of the matrix.</returns>
        </member>
        <member name="M:NPack.Matrix.Vector`1.NPack#Interfaces#IMatrix{T}#GetMatrix(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Gets a submatrix. Not supported for Vector{T}.
            </summary>
            <param name="rowIndexes">The indexes of the rows to include.</param>
            <param name="j0">The starting column to include.</param>
            <param name="j1">The ending column to include.</param>
            <returns>A submatrix with rows given by <paramref name="rowIndexes"/> and columns <paramref name="j0"/> 
            through <paramref name="j1"/>.</returns>
        </member>
        <member name="M:NPack.Matrix.Vector`1.NPack#Interfaces#IMatrix{T}#Transpose">
            <summary>
            Returns the transpose of the matrix. Returns a clone for Vector{T}, since vectors are storage agnostic.
            </summary>
            <returns>A <see cref="M:NPack.Matrix.Vector`1.Clone"/> of the called-on vector.</returns>
        </member>
        <member name="M:NPack.Matrix.Vector`1.NPack#Interfaces#IDivisible{NPack#Interfaces#IMatrix{T}}#Divide(NPack.Interfaces.IMatrix{`0})">
            <summary>
            Matrix division is not defined. Throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="P:NPack.Matrix.Vector`1.Item(System.Int32)">
            <summary>
            Gets or sets a component in the vector.
            </summary>
            <param name="index">The index of the component.</param>
            <returns>The value of the component at the given <paramref name="index"/>.</returns>
        </member>
        <member name="P:NPack.Matrix.Vector`1.ComponentCount">
            <summary>
            Gets the number of components in the vector.
            </summary>
        </member>
        <member name="P:NPack.Matrix.Vector`1.Components">
            <summary>
            Gets or sets the vector component array.
            </summary>
        </member>
        <member name="P:NPack.Matrix.Vector`1.NPack#Interfaces#IMatrix{T}#Determinant">
            <summary>
            Gets the determinant for the vector, if it is a single element.
            </summary>
        </member>
        <member name="P:NPack.Matrix.Vector`1.NPack#Interfaces#IMatrix{T}#ColumnCount">
            <summary>
            Gets the number of columns in the matrix. Not supported for Vector{T}.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown when accessed.</exception>
        </member>
        <member name="P:NPack.Matrix.Vector`1.NPack#Interfaces#IMatrix{T}#Format">
            <summary>
            Gets the format of the matrix, either row-major or column-major.
            </summary>
        </member>
        <member name="P:NPack.Matrix.Vector`1.NPack#Interfaces#IMatrix{T}#IsSingular">
            <summary>
            Gets true if the matrix is singular (non-invertible). 
            </summary>
        </member>
        <member name="P:NPack.Matrix.Vector`1.NPack#Interfaces#IMatrix{T}#IsInvertible">
            <summary>
            Gets true if the matrix is invertible (non-singular). Only true for Vector{T} when there is one element.
            </summary>
        </member>
        <member name="P:NPack.Matrix.Vector`1.NPack#Interfaces#IMatrix{T}#Inverse">
            <summary>
            Gets the inverse of the matrix, if one exists. Only true for Vector{T} when there is one element.
            </summary>
        </member>
        <member name="P:NPack.Matrix.Vector`1.NPack#Interfaces#IMatrix{T}#IsSquare">
            <summary>
            Gets true if the matrix is square. Only true for Vector{T} when there is one element.
            </summary>
        </member>
        <member name="P:NPack.Matrix.Vector`1.NPack#Interfaces#IMatrix{T}#IsSymmetrical">
            <summary>
            Gets true if the matrix is symmetrical. Only true for Vector{T} when there is one element.
            </summary>
        </member>
        <member name="P:NPack.Matrix.Vector`1.NPack#Interfaces#IMatrix{T}#RowCount">
            <summary>
            Gets the number of rows in the matrix. Not supported for Vector{T}.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown when accessed.</exception>
        </member>
        <member name="P:NPack.Matrix.Vector`1.NPack#Interfaces#IMatrix{T}#Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets an element in the matrix.
            </summary>
            <param name="row">The index of the row of the element.</param>
            <param name="column">The index of the column of the element.</param>
            <returns>The value of the element at the specified row and column.</returns>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.CompareTo(NPack.Interfaces.IMatrix{`0})">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: 
                                Value 
                                Meaning 
                                Less than zero 
                                This object is less than the <paramref name="other"/> parameter.
                                Zero 
                                This object is equal to <paramref name="other"/>. 
                                Greater than zero 
                                This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.
                            </param>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.Subtract(NPack.Interfaces.IMatrix{`0})">
            <summary>
            Returns the difference of the Object and <paramref name="b"/>.
            It must not modify the value of the Object.
            </summary>
            <param name="b">The second operand.</param>
            <returns>The difference.</returns>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.Add(NPack.Interfaces.IMatrix{`0})">
            <summary>
            Returns the sum of the Object and <paramref name="b"/>.
            It must not modify the value of the Object.
            </summary>
            <param name="b">The second operand.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.Divide(NPack.Interfaces.IMatrix{`0})">
            <summary>
            Returns the quotient of the Object and <paramref name="b"/>.
            It must not modify the value of the Object.
            </summary>
            <param name="b">The second operand.</param>
            <returns>The quotient.</returns>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.Multiply(NPack.Interfaces.IMatrix{`0})">
            <summary>
            Returns the product of the Object and <paramref name="b"/>.
            It must not modify the value of the Object.
            </summary>
            <param name="b">The second operand.</param>
            <returns>The product.</returns>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.GreaterThan(NPack.Interfaces.IMatrix{`0})">
            <summary>
            Returns true if the value called on is strictly greater than the <paramref name="value"/> given.
            </summary>
            <param name="value">The value to compare to.</param>
            <returns>True if the called on instance is greater, false if the <paramref name="value"/> is greater or equal.</returns>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.GreaterThanOrEqualTo(NPack.Interfaces.IMatrix{`0})">
            <summary>
            Returns true if the value called on is greater than or equal to the <paramref name="value"/> given.
            </summary>
            <param name="value">The value to compare to.</param>
            <returns>True if the called on instance is greater or equal, false if the <paramref name="value"/> is greater.</returns>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.LessThan(NPack.Interfaces.IMatrix{`0})">
            <summary>
            Returns true if the value called on is strictly less than the <paramref name="value"/> given.
            </summary>
            <param name="value">The value to compare to.</param>
            <returns>True if the called on instance is less, false if the <paramref name="value"/> is less or equal.</returns>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.LessThanOrEqualTo(NPack.Interfaces.IMatrix{`0})">
            <summary>
            Returns true if the value called on is less than or equal to the <paramref name="value"/> given.
            </summary>
            <param name="value">The value to compare to.</param>
            <returns>True if the called on instance is less or equal, false if the <paramref name="value"/> is less.</returns>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.RotateAt(NPack.Interfaces.IVector{`0},NPack.Interfaces.IVector{`0},System.Double)">
            <summary>
            Rotates the affine transform around the given <paramref name="axis"/> 
            at the given <paramref name="point"/>.
            </summary>
            <param name="point">Point at which to compute the rotation.</param>
            <param name="axis">The axis to rotate around.</param>
            <param name="radians">Angle to rotate through.</param>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.RotateAt(NPack.Interfaces.IVector{`0},NPack.Interfaces.IVector{`0},System.Double,NPack.MatrixOperationOrder)">
            <summary>
            Rotates the affine transform around the given <paramref name="axis"/> 
            at the given <paramref name="point"/>.
            </summary>
            <param name="point">Point at which to compute the rotation.</param>
            <param name="axis">The axis to rotate around.</param>
            <param name="radians">Angle to rotate through.</param>
            <param name="order">Order in which to apply the operation.</param>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.Translate(NPack.Interfaces.IVector{`0})">
            <summary>
            Translates the affine transform by the given translation vector.
            </summary>
            <param name="translateVector">
            A vector whose components will translate the transform 
            in the corresponding dimension.
            </param>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.Translate(NPack.Interfaces.IVector{`0},NPack.MatrixOperationOrder)">
            <summary>
            Translates the affine transform by the given translation vector.
            </summary>
            <param name="translateVector">
            A vector whose components will translate the transform 
            in the corresponding dimension.
            </param>
            <param name="order">Order in which to apply the operation.</param>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.Scale(NPack.Interfaces.IVector{`0})">
            <summary>
            Scales the matrix by the given vector <paramref name="scaleVector"/>.
            </summary>
            <param name="scaleVector">
            A vector with scaling components which 
            correspond to the affine transform dimensions.
            </param>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.Scale(NPack.Interfaces.IVector{`0},NPack.MatrixOperationOrder)">
            <summary>
            Scales the matrix by the given vector <paramref name="scaleVector"/>.
            </summary>
            <param name="scaleVector">
            A vector with scaling components which 
            correspond to the affine transform dimensions.
            </param>
            <param name="order">Order in which to apply the operation.</param>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.Shear(NPack.Interfaces.IVector{`0})">
            <summary>
            Applies a shear to the transform.
            </summary>
            <param name="shearVector">The vector used to compute the shear.</param>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.Shear(NPack.Interfaces.IVector{`0},NPack.MatrixOperationOrder)">
            <summary>
            Applies a shear to the transform.
            </summary>
            <param name="shearVector">The vector used to compute the shear.</param>
            <param name="order">Order in which to apply the operation.</param>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.RotateAlong(NPack.Interfaces.IVector{`0},System.Double)">
            <summary>
            Rotates the affine transform around the given <paramref name="axis"/>.
            </summary>
            <param name="axis">
            The axis to rotate around. May be an addition of the basis vectors.
            </param>
            <param name="radians">Angle to rotate through.</param>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.RotateAlong(NPack.Interfaces.IVector{`0},System.Double,NPack.MatrixOperationOrder)">
            <summary>
            Rotates the affine transform around the given <paramref name="axis"/>.
            </summary>
            <param name="axis">
            The axis to rotate around. May be an addition of the basis vectors.
            </param>
            <param name="radians">Angle to rotate through.</param>
            <param name="order">Order in which to apply the operation.</param>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.TransformMatrix(NPack.Interfaces.IMatrix{`0})">
            <summary>
            Applies this transform to the given <paramref name="input"/> matrix.
            </summary>
            <param name="input">Matrix to transform.</param>
            <returns>
            The multiplication of this transform matrix with the input matrix.
            </returns>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.TransformVector(NPack.Interfaces.IVector{`0})">
            <summary>
            Applies this transform to the given <paramref name="input"/> vector.
            </summary>
            <param name="input">Vector to transform.</param>
            <returns>
            The multiplication of this transform matrix with the input vector.
            </returns>
        </member>
        <member name="M:NPack.Matrix.AffineTransformMatrix`1.TransformVectors(System.Collections.Generic.IEnumerable{NPack.Interfaces.IVector{`0}})">
            <summary>
            Applies this transform to the given <paramref name="input"/> vectors.
            </summary>
            <param name="input">Set of vectors to transform.</param>
            <returns>
            The multiplication of this transform matrix with each of the input vectors.
            </returns>
        </member>
        <member name="P:NPack.Matrix.AffineTransformMatrix`1.One">
            <summary>
            Returns the multiplicative identity.
            </summary>
            <value>e</value>
        </member>
        <member name="P:NPack.Matrix.AffineTransformMatrix`1.NPack#Interfaces#IMatrix{T}#Inverse">
            <summary>
            Gets the inverse of the matrix, if one exists.
            </summary>
        </member>
        <member name="P:NPack.Matrix.AffineTransformMatrix`1.NPack#Interfaces#IAffineTransformMatrix{T}#Inverse">
            <summary>
            Gets the inverse of the affine transform.
            </summary>
        </member>
    </members>
</doc>
