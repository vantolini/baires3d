<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpMap</name>
    </assembly>
    <members>
        <member name="T:SharpMap.Presentation.ViewSelection`3">
            <summary>
            Represents a selection on a map view.
            </summary>
            <typeparam name="TPoint">The type of point in this selection.</typeparam>
            <typeparam name="TSize">The type of size structure in this selection.</typeparam>
            <typeparam name="TViewRegion">The type of region this selection covers.</typeparam>
            <remarks>
            The type parameters allows this class to be customized for to accomodate structures
            which represent points and areas in various dimensions.
            </remarks>
        </member>
        <member name="T:SharpMap.Presentation.IViewSelection`3">
            <summary>
            Represents a selection on a map view.
            </summary>
            <typeparam name="TPoint">The type of point in this selection.</typeparam>
            <typeparam name="TSize">The type of size structure in this selection.</typeparam>
            <typeparam name="TViewRegion">The type of region this selection covers.</typeparam>
        </member>
        <member name="M:SharpMap.Presentation.IViewSelection`3.AddPoint(`0)">
            <summary>
            Adds a point to the selection.
            </summary>
            <param name="point">A point to add.</param>
        </member>
        <member name="M:SharpMap.Presentation.IViewSelection`3.Expand(`1)">
            <summary>
            Expands the selection by given size. If the size is negative, it contracts the selection.
            </summary>
            <param name="size">Amount to expand the selection by.</param>
        </member>
        <member name="M:SharpMap.Presentation.IViewSelection`3.MoveBy(`0)">
            <summary>
            Moves the selection by the given offset.
            </summary>
            <param name="offset">Point vector to move selection by.</param>
        </member>
        <member name="M:SharpMap.Presentation.IViewSelection`3.RemovePoint(`0)">
            <summary>
            Removes a point from the selection.
            </summary>
            <param name="point">Point to remove.</param>
        </member>
        <member name="P:SharpMap.Presentation.IViewSelection`3.Path">
            <summary>
            Path which represents the outline of the selection on the view surface.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.IViewSelection`3.AnchorPoint">
            <summary>
            Point around which selection is transformed.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.IViewSelection`3.BoundingRegion">
            <summary>
            A minimum bounding box for the selection.
            </summary>
        </member>
        <member name="F:SharpMap.Presentation.ViewSelection`3.DefaultOutline">
            <summary>
            The default style of the selection outline.
            </summary>
        </member>
        <member name="F:SharpMap.Presentation.ViewSelection`3.DefaultFill">
            <summary>
            The default fill of the selection.
            </summary>
        </member>
        <member name="M:SharpMap.Presentation.ViewSelection`3.#ctor">
            <summary>
            Creates a new selection using the <see cref="F:SharpMap.Presentation.ViewSelection`3.DefaultOutline"/> and <see cref="F:SharpMap.Presentation.ViewSelection`3.DefaultFill"/>
            for the <see cref="P:SharpMap.Presentation.ViewSelection`3.OutlineStyle"/> and <see cref="P:SharpMap.Presentation.ViewSelection`3.FillBrush"/> respectively.
            </summary>
        </member>
        <member name="M:SharpMap.Presentation.ViewSelection`3.CreatePath">
            <summary>
            Creates a new path for the selection, but doesn't add it to the selection.
            </summary>
            <returns>A Path instance representing a new selection path.</returns>
        </member>
        <member name="M:SharpMap.Presentation.ViewSelection`3.Close">
            <summary>
            Closes the current <see cref="T:SharpMap.Rendering.Figure`2"/> in <see cref="!:Path&lt;TPoint, TViewBounds&gt;"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Presentation.ViewSelection`3.Clear">
            <summary>
            Removes all elements from <see cref="!:Path&lt;TPoint, TViewBounds&gt;"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.ViewSelection`3.OutlineStyle">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Styles.StylePen"/> used to display
            the outline of the selection.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.ViewSelection`3.FillBrush">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Styles.StyleBrush"/> used to display
            the inside of the selection.
            </summary>
        </member>
        <member name="T:SharpMap.Styles.HorizontalAlignment">
            <summary>
            Label text alignment
            </summary>
        </member>
        <member name="F:SharpMap.Styles.HorizontalAlignment.Left">
            <summary>
            Left oriented
            </summary>
        </member>
        <member name="F:SharpMap.Styles.HorizontalAlignment.Right">
            <summary>
            Right oriented
            </summary>
        </member>
        <member name="F:SharpMap.Styles.HorizontalAlignment.Center">
            <summary>
            Centered
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.MatrixProcessor">
            <summary>
            Provides access to <see cref="T:SharpMap.Rendering.Matrix"/> processing operations via a 
            configured operations engine.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.MatrixProcessor.Instance">
            <summary>
            Gets the singleton instance of a MatrixProcessor.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.MatrixProcessor.Operations">
            <summary>
            Gets the configured operations engine.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.AffineMatrix">
            <summary>
            Represents a column-major convention affine transform matrix.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Matrix">
            <summary>
            A matrix. The fundamental unit of computation in linear algebra.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.#ctor(NPack.MatrixFormat,System.Int32,System.Int32)">
            <summary>
            Creates a zero rectangular Matrix of the given <paramref name="rowCount"/> by <paramref name="columnCount"/>.
            </summary>
            <param name="format">The format of the matrix, either row-major or column-major.</param>
            <param name="rowCount">Number of rows.</param>
            <param name="columnCount">Number of columns.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when rowCount or columnCount is less than 1.</exception>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.#ctor(NPack.MatrixFormat,System.Int32,System.Int32,NPack.DoubleComponent)">
            <summary>
            Creates a rectangular Matrix of the given <paramref name="rowCount"/> 
            by <paramref name="columnCount"/> with 
            <paramref name="value"/> assigned to the diagonal.
            </summary>
            <param name="format">The format of the matrix, either row-major or column-major.</param>
            <param name="rowCount">Number of rows.</param>
            <param name="columnCount">Number of columns.</param>
            <param name="value">The value to assign to the diagonal.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when rowCount or columnCount is less than 1.</exception>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.#ctor(NPack.MatrixFormat,NPack.DoubleComponent[][])">
            <summary>
            Creates a new matrix with the given <paramref name="elements"/>.
            </summary>
            <param name="format">The format of the matrix, either row-major or column-major.</param>
            <param name="elements">The elements to use to fill the matrix.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter 'elements' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when length of 'elements' is 0 
            or when the first element of 'elements' is an array of length 0.</exception>
            <exception cref="T:System.ArgumentException">When the arrays of 'elements' are not all the same length.</exception>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.#ctor(NPack.Interfaces.IMatrix{NPack.DoubleComponent})">
            <summary>
            Creates a new matrix as a copy of the given matrix.
            </summary>
            <param name="matrixToCopy">The matrix to copy.</param>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.Clone">
            <summary>
            Creates an element-by-element copy of the matrix.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.op_Equality(SharpMap.Rendering.Matrix,SharpMap.Rendering.Matrix)">
            <summary>
            Compares two <see cref="T:SharpMap.Rendering.Matrix"/> instances for element-by-element
            equality.
            </summary>
            <param name="left">The left hand side of the equality comparison.</param>
            <param name="right">The right hand side of the equality comparison.</param>
            <returns>
            <see langword="true"/> if the matrixes are element-by-element equal, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.op_Inequality(SharpMap.Rendering.Matrix,SharpMap.Rendering.Matrix)">
            <summary>
            Compares two <see cref="T:SharpMap.Rendering.Matrix"/> instances element-by-element for 
            inequality.
            </summary>
            <param name="left">The left hand side of the inequality comparison.</param>
            <param name="right">The right hand side of the inequality comparison.</param>
            <returns>
            <see langword="true"/> if the matrixes are not equal in an element-by-element comparison, 
            <see langword="false"/> if they are equal.
            </returns>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.GetMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a submatrix.
            </summary>
            <param name="i0">Initial row index.</param>
            <param name="i1">Final row index.</param>
            <param name="j0">Initial column index.</param>
            <param name="j1">Final column index.</param>
            <returns>
            A submatrix with rows given by the rows <paramref name="i0" />
            through <paramref name="i1"/>
            and columns <paramref name="j0"/> through <paramref name="j1"/>.
            </returns>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.GetMatrix(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Gets a submatrix.
            </summary>
            <param name="rowIndicies">The indexes of the rows to include.</param>
            <param name="j0">The starting column to include.</param>
            <param name="j1">The ending column to include.</param>
            <returns>
            A submatrix with rows given by <paramref name="rowIndicies"/> 
            and columns <paramref name="j0"/> through <paramref name="j1"/>.
            </returns>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.Transpose">
            <summary>
            Returns a transpose of the <see cref="T:SharpMap.Rendering.Matrix"/>.
            </summary>
            <value>The rows-for-columns, columns-for-rows transpose of A.</value>
            <returns>AT, the transpose of matrix A.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.Scale(NPack.DoubleComponent)">
            <summary>
            Scales the elements in the linear transformation by the given <paramref name="amount"/>.
            </summary>
            <param name="amount">
            Amount of scale to apply uniformly in all dimensions.
            </param>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.Scale(NPack.DoubleComponent,NPack.MatrixOperationOrder)">
            <summary>
            Scales the elements in the linear transformation by the given <paramref name="amount"/>.
            </summary>
            <param name="amount">
            Amount of scale to apply uniformly in all dimensions.
            </param>
            <param name="order">The order to apply the transform in.</param>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.Scale(SharpMap.Rendering.Vector)">
            <summary>
            Scales the elements in the linear transformation by the given <paramref name="scaleVector"/>.
            </summary>
            <param name="scaleVector">
            Amount of scale to apply on a column-by-column basis.
            </param>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.Scale(SharpMap.Rendering.Vector,NPack.MatrixOperationOrder)">
            <summary>
            Scales the elements in the linear transformation by the given <paramref name="scaleVector"/>.
            </summary>
            <param name="scaleVector">Amount of scale to apply on a column-by-column basis.</param>
            <param name="order">The order to apply the transform in.</param>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.Shear(SharpMap.Rendering.Vector)">
            <summary>
            Applies a shear to the transform by appending the shear to the <see cref="!:AffineMatrix&lt;T&gt;"/>.
            </summary>
            <param name="shearVector">The vector used to compute the shear.</param>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.Shear(SharpMap.Rendering.Vector,NPack.MatrixOperationOrder)">
            <summary>
            Applies a shear to the transform, either before or after this <see cref="!:AffineMatrix&lt;T&gt;"/>.
            </summary>
            <param name="shearVector">The vector used to compute the shear.</param>
            <param name="order">The order to apply the transform in.</param>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.RotateAlong(SharpMap.Rendering.Vector,System.Double)">
            <summary>
            Rotates the affine transform around the given <paramref name="axis"/>.
            </summary>
            <param name="axis">The axis to rotate around.</param>
            <param name="radians">Angle to rotate through.</param>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.RotateAlong(SharpMap.Rendering.Vector,System.Double,NPack.MatrixOperationOrder)">
            <summary>
            Rotates the affine transform around the given <paramref name="axis"/>.
            </summary>
            <param name="axis">The axis to rotate around.</param>
            <param name="radians">Angle to rotate through.</param>
            <param name="order">The order to apply the transform in.</param>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.TransformMatrix(SharpMap.Rendering.Matrix)">
            <summary>
            Applies this transform to the given <paramref name="input"/> matrix.
            </summary>
            <param name="input">Matrix to transform.</param>
            <returns>The multiplication of this transform matrix with the input matrix, 
            with the transform on the left-hand side of the operation.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.TransformVector(SharpMap.Rendering.Vector)">
            <summary>
            Applies this transform to the given <paramref name="input"/> vector.
            </summary>
            <param name="input">Vector to transform.</param>
            <returns>
            The multiplication of this transform matrix with the input vector.
            </returns>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.TransformVectors(System.Collections.Generic.IEnumerable{SharpMap.Rendering.Vector})">
            <summary>
            Applies this transform to the given <paramref name="input"/> vectors.
            </summary>
            <param name="input">Set of vectors to transform.</param>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.TransformVector(NPack.DoubleComponent[])">
            <summary>
            Applies this transform to the given <paramref name="input"/> vector.
            </summary>
            <param name="input">Vector to transform.</param>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.TransformVectors(System.Collections.Generic.IEnumerable{NPack.DoubleComponent[]})">
            <summary>
            Applies this transform to the given <paramref name="input"/> vectors.
            </summary>
            <param name="input">Set of vectors to transform.</param>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.Negative">
            <summary>
            Returns a copy of the matrix with all the elements negated.
            </summary>
            <returns>For matrix A, -A.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.Add(SharpMap.Rendering.Matrix)">
            <summary>
            Returns a matrix which is the result of the instance plus the <paramref name="value"/>.
            </summary>
            <param name="value">The matrix to add.</param>
            <returns>For matrix A, A + value.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.Subtract(SharpMap.Rendering.Matrix)">
            <summary>
            Returns a matrix which is the result of the instance minus the <paramref name="value"/>.
            </summary>
            <param name="value">The matrix to subtract.</param>
            <returns>For matrix A, A - value.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.Multiply(NPack.DoubleComponent)">
            <summary>
            Scalar multiplication.
            </summary>
            <param name="value">Scalar to multiply.</param>
            <returns>For matrix A, (value)A.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.Multiply(SharpMap.Rendering.Matrix)">
            <summary>
            Matrix multiplication.
            </summary>
            <param name="value">Matrix to multiply.</param>
            <returns>For matrix A, (value)A.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.op_UnaryNegation(SharpMap.Rendering.Matrix)">
            <summary>
            Negates the values of a matrix.
            </summary>
            <param name="value">The matrix to negate.</param>
            <returns>A negated matrix instance.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.op_Addition(SharpMap.Rendering.Matrix,SharpMap.Rendering.Matrix)">
            <summary>
            Adds two matrixes element-by-element.
            </summary>
            <param name="lhs">The left hand side of the addition operation.</param>
            <param name="rhs">The right hand side of the addition operation.</param>
            <returns>The sum of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the dimensions of <paramref name="lhs"/> and <paramref name="rhs"/>
            are not the same.
            </exception>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.op_Subtraction(SharpMap.Rendering.Matrix,SharpMap.Rendering.Matrix)">
            <summary>
            Subtracts two matrixes element-by-element.
            </summary>
            <param name="lhs">The left hand side of the subtraction operation.</param>
            <param name="rhs">The right hand side of the subtraction operation.</param>
            <returns>The difference of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the dimensions of <paramref name="lhs"/> and <paramref name="rhs"/>
            are not the same.
            </exception>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.op_Multiply(SharpMap.Rendering.Matrix,NPack.DoubleComponent)">
            <summary>
            Scalar multiplication.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.op_Multiply(SharpMap.Rendering.Matrix,SharpMap.Rendering.Matrix)">
            <summary>
            <see cref="T:SharpMap.Rendering.Matrix"/> multiplication.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.NPack#Interfaces#IDivisible{SharpMap#Rendering#Matrix}#Divide(SharpMap.Rendering.Matrix)">
            <summary>
            Matrix division is not defined. Throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:SharpMap.Rendering.Matrix.Identity(NPack.MatrixFormat,System.Int32)">
            <summary>
            Generates a square matrix of the given <paramref name="rank"/> with
            the number 1 in each element of the diagonal.
            </summary>
            <param name="format">The format of the matrix, either row-major or column-major.</param>
            <param name="rank">Number of rows and columns of the <see cref="T:SharpMap.Rendering.Matrix"/>.</param>
            <returns>An identiy matrix of the given rank.</returns>
        </member>
        <member name="P:SharpMap.Rendering.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for the matrix.
            </summary>
            <param name="row">The row to access.</param>
            <param name="column">The column to access.</param>
            <returns>The value at the given (row, column) of the matrix.</returns>
        </member>
        <member name="P:SharpMap.Rendering.Matrix.RowCount">
            <summary>
            Gets the number of rows in the matrix.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Matrix.ColumnCount">
            <summary>
            Gets the number of columns in the matrix.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Matrix.IsSquare">
            <summary>
            Gets <see langword="true"/> if the <see cref="T:SharpMap.Rendering.Matrix"/> is square, false if not.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Matrix.IsSymmetrical">
            <summary>
            Gets <see langword="true"/> if the <see cref="T:SharpMap.Rendering.Matrix"/> is symmetrical, false if not.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Matrix.IsSingular">
            <summary>
            Gets true if the matrix is singular (non-invertible).
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Matrix.IsInvertible">
            <summary>
            Gets true if the matrix is invertible (non-singular).
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Matrix.Determinant">
            <summary>
            Gets the determinant if the <see cref="T:SharpMap.Rendering.Matrix"/> instance is square.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if matrix is not sqare.</exception>
        </member>
        <member name="P:SharpMap.Rendering.Matrix.Format">
            <summary>
            Gets a <see cref="T:NPack.MatrixFormat"/> value indicating how the elements are stored.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Matrix.Inverse">
            <summary>
            Gets the inverse of the <see cref="T:SharpMap.Rendering.Matrix"/> if it is square and non-singular, 
            the pseudo-inverse if it is non-square, and null if it is singluar (non-invertible).
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Matrix.Zero">
            <summary>
            Gets a zero matrix of the same row and column rank.
            </summary>
            <remarks>
            Uses <c>default(T)</c> as zero.
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Matrix.One">
            <summary>
            Gets an identity matrix with the same row rank.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.AffineMatrix.#ctor(NPack.MatrixFormat,System.Int32)">
            <summary>
            Creates a new identiy affine transform matrix (with default(T).One in each element of the diagonal)
            with the given <paramref name="rank"/> for the number of rows and number of columns.
            </summary>
            <param name="format">Storage format of the matrix, either row-major or column-major.</param>
            <param name="rank">Number of rows and columns in the affine matrix.</param>
            <exception cref="T:System.NotSupportedException">If the matrix has a rank other than 3 or 4.</exception>
        </member>
        <member name="M:SharpMap.Rendering.AffineMatrix.#ctor(NPack.MatrixFormat,NPack.DoubleComponent[][])">
            <summary>
            Creates a new affine transform matrix with the given <paramref name="elements"/>.
            </summary>
            <param name="format">Storage format of the matrix, either row-major or column-major.</param>
            <param name="elements">
            The elements for the array, with rows in the outer array for a <see cref="F:NPack.MatrixFormat.RowMajor"/> 
            matrix, and columns in the outer array for a <see cref="F:NPack.MatrixFormat.ColumnMajor"/> matrix.
            </param>
            <exception cref="T:System.ArgumentException">If the matrix is not square.</exception>
            <exception cref="T:System.NotSupportedException">If the matrix has a rank other than 3 or 4.</exception>
        </member>
        <member name="M:SharpMap.Rendering.AffineMatrix.#ctor(NPack.Interfaces.IMatrix{NPack.DoubleComponent})">
            <summary>
            Creates a new affine transform matrix from the given <paramref name="matrix"/>.
            </summary>
            <param name="matrix">The matrix to copy.</param>
            <exception cref="T:System.ArgumentException">If the matrix is not square.</exception>
            <exception cref="T:System.NotSupportedException">If the matrix has a rank other than 3 or 4.</exception>
        </member>
        <member name="M:SharpMap.Rendering.AffineMatrix.Reset">
            <summary>
            Resets the affine transform to the identity matrix (a diagonal of one).
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.AffineMatrix.RotateAt(SharpMap.Rendering.Vector,SharpMap.Rendering.Vector,System.Double)">
            <summary>
            Rotates the affine transform around the given <paramref name="axis"/> at the given <paramref name="point"/>.
            </summary>
            <param name="point">Point at which to compute the rotation.</param>
            <param name="axis">The axis to rotate around. May be an addition of the basis vectors.</param>
            <param name="radians">Angle to rotate through.</param>
        </member>
        <member name="M:SharpMap.Rendering.AffineMatrix.RotateAt(SharpMap.Rendering.Vector,SharpMap.Rendering.Vector,System.Double,NPack.MatrixOperationOrder)">
            <summary>
            Rotates the affine transform around the given <paramref name="axis"/> at the given <paramref name="point"/>.
            </summary>
            <param name="point">Point at which to compute the rotation.</param>
            <param name="axis">The axis to rotate around. May be an addition of the basis vectors.</param>
            <param name="radians">Angle to rotate through.</param>
            <param name="order">The order to apply the transform in.</param>
        </member>
        <member name="M:SharpMap.Rendering.AffineMatrix.Translate(NPack.DoubleComponent)">
            <summary>
            Translates the affine transform by the given amount 
            in each dimension.
            </summary>
            <param name="amount">Amount to translate by.</param>
        </member>
        <member name="M:SharpMap.Rendering.AffineMatrix.Translate(NPack.DoubleComponent,NPack.MatrixOperationOrder)">
            <summary>
            Translates the affine transform by the given amount 
            in each dimension.
            </summary>
            <param name="amount">Amount to translate by.</param>
            <param name="order">The order to apply the transform in.</param>
        </member>
        <member name="M:SharpMap.Rendering.AffineMatrix.Translate(SharpMap.Rendering.Vector)">
            <summary>
            Translates the affine transform by the given translation vector.
            </summary>
            <param name="translateVector">
            A vector whose components will translate the 
            transform in the corresponding dimension.
            </param>
        </member>
        <member name="M:SharpMap.Rendering.AffineMatrix.Translate(SharpMap.Rendering.Vector,NPack.MatrixOperationOrder)">
            <summary>
            Translates the affine transform by the given translation vector, in the order specified.
            </summary>
            <param name="translateVector">
            A vector whose components will translate the 
            transform in the corresponding dimension.
            </param>
            <param name="order">The order to apply the transform in.</param>
        </member>
        <member name="P:SharpMap.Rendering.AffineMatrix.Inverse">
            <summary>
            Gets the inverse of the <see cref="T:SharpMap.Rendering.AffineMatrix"/>.
            </summary>
        </member>
        <member name="T:SharpMap.Layers.RasterLayer">
            <summary>
            A map layer of raster data.
            </summary>
            <example>
            Adding a <see cref="T:SharpMap.Layers.RasterLayer"/> to a map:
            </example>
        </member>
        <member name="T:SharpMap.Layers.Layer">
            <summary>
            Abstract class for common layer properties and behavior.
            </summary>
            <remarks>
            Implement this class instead of the ILayer interface to 
            obtain basic layer functionality.
            </remarks>
        </member>
        <member name="T:SharpMap.Layers.ILayer">
            <summary>
            Interface for map layers.
            </summary>
        </member>
        <member name="M:SharpMap.Expressions.IHasDynamicProperties.AddProperty(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Adds a dynamic property.
            </summary>
            <param name="property">The property to add.</param>
            <returns>The index of the added property.</returns>
        </member>
        <member name="M:SharpMap.Expressions.IHasDynamicProperties.AddProperty``1(System.ComponentModel.PropertyDescriptor,``0)">
            <summary>
            Adds a dynamic property and sets its value.
            </summary>
            <param name="property">The property to add.</param>
            <param name="value">The value of the property.</param>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <returns>The index of the added property.</returns>
        </member>
        <member name="M:SharpMap.Expressions.IHasDynamicProperties.GetPropertyValue(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the value of the property indicated by the given <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </summary>
            <param name="property">
            The property to get the value of, or <see langword="null"/> if the layer doesn't
            have <paramref name="property"/>.
            </param>
            <returns>
            The value of <paramref name="property"/> or <see langword="null"/> if the layer doesn't
            have the property.
            </returns>
        </member>
        <member name="M:SharpMap.Expressions.IHasDynamicProperties.GetPropertyValue``1(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the value of a property.
            </summary>
            <param name="property">The property to get the value of.</param>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <returns>The index of the added property.</returns>
        </member>
        <member name="M:SharpMap.Expressions.IHasDynamicProperties.HasProperty(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns a value indicating whether the instance has the given <paramref name="property"/>.
            </summary>
            <param name="property">The property to test for.</param>
            <returns>
            <see langword="true"/> if the object has the property has the property, 
            <see langword="false"/> if otherwise.
            </returns>
        </member>
        <member name="M:SharpMap.Expressions.IHasDynamicProperties.SetPropertyValue(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Sets the value of the property indicated by the given <see cref="T:System.ComponentModel.PropertyDescriptor"/>,
            adding it if it doesn't exist.
            </summary>
            <param name="property">
            The property to set the value of.
            </param>
            <param name="value">
            The value to set <paramref name="property"/> to.
            </param>
        </member>
        <member name="M:SharpMap.Expressions.IHasDynamicProperties.SetPropertyValue``1(System.ComponentModel.PropertyDescriptor,``0)">
            <summary>
            Sets the value of a property.
            </summary>
            <typeparam name="TValue">The type of the property value.</typeparam>
            <param name="property">The property to set the value of.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:SharpMap.Layers.ILayer.IsVisibleWhen(System.Predicate{SharpMap.Layers.ILayer})">
            <summary>
            Computes the visibility of the layer based on a given <paramref name="condition"/>.
            </summary>
            <param name="condition">The predicate to use to compute layer visibility.</param>
            <returns>
            <see langword="true"/> if the layer is visible given <paramref name="condition"/>.
            </returns>
        </member>
        <member name="M:SharpMap.Layers.ILayer.LoadIntersectingLayerData(GeoAPI.Geometries.IExtents)">
            <summary>
            Loads the data contained in the layer where it intersects <paramref name="region"/>.
            </summary>
            <param name="region">The region to load the data in.</param>
        </member>
        <member name="M:SharpMap.Layers.ILayer.LoadIntersectingLayerData(GeoAPI.Geometries.IGeometry)">
            <summary>
            Loads the data contained in the layer where it intersects <paramref name="region"/>.
            </summary>
            <param name="region">The region to load the data in.</param>
        </member>
        <member name="M:SharpMap.Layers.ILayer.LoadLayerData(SharpMap.Expressions.QueryExpression)">
            <summary>
            Loads the data contained in the layer where satisfies
            the <paramref name="query"/>.
            </summary>
            <param name="query">
            The expression to match layer data to.
            </param>
            <remarks>
            Loads the data either synchronously or asynchronously depending
            on <see cref="P:SharpMap.Layers.ILayer.AsyncQuery"/>.
            </remarks>
        </member>
        <member name="M:SharpMap.Layers.ILayer.LoadLayerDataAsync(SharpMap.Expressions.QueryExpression)">
            <summary>
            Loads the data contained in the layer where satisfies
            the <paramref name="query"/>.
            </summary>
            <param name="query">
            The expression to match layer data to.
            </param>
            <remarks>
            Loads the data asynchronously.
            </remarks>
        </member>
        <member name="M:SharpMap.Layers.ILayer.Select(SharpMap.Expressions.Expression)">
            <summary>
            Evaluates the given <paramref name="query"/> and retrieves data in the 
            layer which satisfies it.
            </summary>
            <param name="query">The query to evaluate against the layer.</param>
            <returns>
            Any data which the layer contains which satisfies the <paramref name="query"/>.
            </returns>
        </member>
        <member name="P:SharpMap.Layers.ILayer.AsyncQuery">
            <summary>
            Gets or sets a value indicating that data is obtained asynchronously.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.CoordinateTransformation">
            <summary>
            Applies a coordinate transformation to the geometries in this layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.DataSource">
            <summary>
            Gets the data source used to create this layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.Enabled">
            <summary>
            Gets or sets a value representing the visibility of the layer.
            </summary>
            <remarks>
            Should be the same value as <see cref="P:SharpMap.Layers.ILayer.Style"/>'s 
            <see cref="P:SharpMap.Styles.IStyle.Enabled"/> value.
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.ILayer.Extents">
            <summary>
            Gets the boundingbox of the entire layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.LayerName">
            <summary>
            Name of layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.SpatialReference">
            <summary>
            The dataum, projection and coordinate system used for this layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.Srid">
            <summary>
            The spatial reference ID of the layer data source.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.Style">
            <summary>
            The style for the layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.LoadedRegion">
            <summary>
            Gets an <see cref="T:GeoAPI.Geometries.IGeometry"/> instance describing the region which has been
            loaded from the layer <see cref="P:SharpMap.Layers.ILayer.DataSource"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.IsLoadingData">
            <summary>
            Gets a value indicating if the layer is loading data from its <see cref="P:SharpMap.Layers.ILayer.DataSource"/>.
            </summary>
        </member>
        <member name="E:SharpMap.Layers.ILayer.DataLoaded">
            <summary>
            Event fired when layer data is loaded.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.ILayer.QueryCache">
            <summary>
            Gets or sets an <see cref="T:SharpMap.Data.Caching.IQueryCache"/> instance for the layer.
            </summary>
            <remarks>
            The <see cref="T:SharpMap.Data.Caching.IQueryCache"/> is used to cache data on a layer-by-layer basis.
            </remarks>
        </member>
        <member name="M:SharpMap.Layers.Layer.#ctor(SharpMap.Data.IProvider)">
            <summary>
            Creates a new Layer instance with the given data source.
            </summary>
            <param name="dataSource">
            The <see cref="T:SharpMap.Data.IProvider"/> which provides the data 
            for the layer.
            </param>
        </member>
        <member name="M:SharpMap.Layers.Layer.#ctor(System.String,SharpMap.Data.IProvider)">
            <summary>
            Creates a new Layer instance identified by the given name and
            with the given data source.
            </summary>
            <param name="layerName">
            The name to uniquely identify the layer by.
            </param>
            <param name="dataSource">
            The <see cref="T:SharpMap.Data.IProvider"/> which provides the data 
            for the layer.
            </param>
        </member>
        <member name="M:SharpMap.Layers.Layer.#ctor(System.String,SharpMap.Styles.IStyle,SharpMap.Data.IProvider)">
            <summary>
            Creates a new Layer instance identified by the given name, with
            symbology described by <paramref name="style"/> and
            with the given data source.
            </summary>
            <param name="layerName">
            The name to uniquely identify the layer by.
            </param>
            <param name="style">
            The symbology used to style the layer.
            </param>
            <param name="dataSource">
            The <see cref="T:SharpMap.Data.IProvider"/> which provides the data 
            for the layer.
            </param>
        </member>
        <member name="M:SharpMap.Layers.Layer.Finalize">
            <summary>
            Releases resources if <see cref="M:SharpMap.Layers.Layer.Dispose"/> isn't called.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Layer.Dispose">
            <summary>
            Releases all resources deterministically.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.Layer.Dispose(System.Boolean)">
            <summary>
            Releases all resources, and removes from finalization 
            queue if <paramref name="disposing"/> is true.
            </summary>
            <param name="disposing">
            True if being called deterministically, false if being called from finalizer.
            </param>
        </member>
        <member name="M:SharpMap.Layers.Layer.ToString">
            <summary>
            Returns the name of the layer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Layers.Layer.ProcessLoadResults(System.Object)">
            <summary>
            Processes data from the <see cref="P:SharpMap.Layers.Layer.DataSource"/> which satisfies
            the <see cref="T:SharpMap.Expressions.Expression"/> sent to <see cref="M:SharpMap.Layers.Layer.LoadLayerData(SharpMap.Expressions.QueryExpression)"/>
            or <see cref="M:SharpMap.Layers.Layer.LoadLayerDataAsync(SharpMap.Expressions.QueryExpression)"/>.
            </summary>
            <param name="results">
            The results from loading the layer data from the DataSoruce.
            </param>
        </member>
        <member name="M:SharpMap.Layers.Layer.Clone">
            <summary>
            Clones the layer.
            </summary>
            <returns>A memberwise-duplicated layer instance.</returns>
        </member>
        <member name="M:SharpMap.Layers.Layer.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:SharpMap.Layers.Layer.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">Name of the property changed.</param>
        </member>
        <member name="P:SharpMap.Layers.Layer.AsyncQueryProperty">
            <summary>
            Gets a <see cref="T:System.ComponentModel.PropertyDescriptor"/> for 
            <see cref="T:SharpMap.Layers.Layer"/>'s <see cref="P:SharpMap.Layers.Layer.AsyncQuery"/> property.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.CoordinateTransformationProperty">
            <summary>
            Gets a  <see cref="T:System.ComponentModel.PropertyDescriptor"/> for 
            <see cref="T:SharpMap.Layers.Layer"/>'s <see cref="P:SharpMap.Layers.Layer.CoordinateTransformation"/> property.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.EnabledProperty">
            <summary>
            Gets a  <see cref="T:System.ComponentModel.PropertyDescriptor"/> for 
            <see cref="T:SharpMap.Layers.Layer"/>'s <see cref="P:SharpMap.Layers.Layer.Enabled"/> property.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.ExtentsProperty">
            <summary>
            Gets a  <see cref="T:System.ComponentModel.PropertyDescriptor"/> for 
            <see cref="T:SharpMap.Layers.Layer"/>'s <see cref="P:SharpMap.Layers.Layer.Extents"/> property.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.LayerNameProperty">
            <summary>
            Gets a  <see cref="T:System.ComponentModel.PropertyDescriptor"/> for 
            <see cref="T:SharpMap.Layers.Layer"/>'s <see cref="P:SharpMap.Layers.Layer.LayerName"/> property.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.StyleProperty">
            <summary>
            Gets a  <see cref="T:System.ComponentModel.PropertyDescriptor"/> for 
            <see cref="T:SharpMap.Layers.Layer"/>'s <see cref="P:SharpMap.Layers.Layer.Style"/> property.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.IsDisposed">
            <summary>
            Gets whether this layer is disposed, and no longer accessible.
            </summary>
        </member>
        <member name="E:SharpMap.Layers.Layer.Disposed">
            <summary>
            Event fired when the layer is disposed.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.AsyncQuery">
            <summary>
            Gets or sets a value indicating that data is obtained asynchronously.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.SpatialReference">
            <summary>
            Gets the coordinate system of the layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.CoordinateTransformation">
            <summary>
            Gets or sets the <see cref="T:GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformation"/> 
            applied to this layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.DataSource">
            <summary>
            Gets the data source used to create this layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.Enabled">
            <summary>
            Gets or sets a value which indicates if the layer 
            is enabled (visible or able to participate in queries) or not.
            </summary>
            <remarks>
            This property is a convenience property which exposes 
            the value of <see cref="P:SharpMap.Styles.Style.Enabled"/>. 
            If setting this property and the Style property 
            value is null, a new <see cref="P:SharpMap.Layers.Layer.Style"/> 
            object is created and assigned to the Style property, 
            and then the Style.Enabled property is set.
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.Layer.Extents">
            <summary>
            Gets the full extent of the data available to the layer.
            </summary>
            <returns>
            A <see cref="T:GeoAPI.Geometries.IExtents"/> defining the extent of 
            all data available to the layer.
            </returns>
        </member>
        <member name="P:SharpMap.Layers.Layer.LayerName">
            <summary>
            Gets or sets the name of the layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.Srid">
            <summary>
            Gets the spatial reference ID of the layer data source, if one is set.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.Layer.Style">
            <summary>
            Gets or sets the style for the layer.
            </summary>
        </member>
        <member name="T:SharpMap.Layers.MultipartGeometryLabelingBehavior">
            <summary>
            Labeling behaviour for multipart geometry collections.
            </summary>
        </member>
        <member name="F:SharpMap.Layers.MultipartGeometryLabelingBehavior.Default">
            <summary>
            Default labeling behavior: <see cref="F:SharpMap.Layers.MultipartGeometryLabelingBehavior.All"/>.
            </summary>
        </member>
        <member name="F:SharpMap.Layers.MultipartGeometryLabelingBehavior.All">
            <summary>
            Place label on all parts (default).
            </summary>
        </member>
        <member name="F:SharpMap.Layers.MultipartGeometryLabelingBehavior.Largest">
            <summary>
            Place label on object which the greatest length or area.
            </summary>
            <remarks>
            <see cref="T:GeoAPI.Geometries.IMultiPoint"/> geometries, since they are zero-dimensional,
            will default to <see cref="F:SharpMap.Layers.MultipartGeometryLabelingBehavior.First"/>.
            </remarks>
        </member>
        <member name="F:SharpMap.Layers.MultipartGeometryLabelingBehavior.CommonCenter">
            <summary>
            The center of the combined geometries.
            </summary>
        </member>
        <member name="F:SharpMap.Layers.MultipartGeometryLabelingBehavior.First">
            <summary>
            Center of the first geometry in the collection (fastest method).
            </summary>
        </member>
        <member name="T:SharpMap.Data.FeatureDataRow">
            <summary>
            Represents a geographic feature, stored as 
            a row of data in a <see cref="T:SharpMap.Data.FeatureDataTable"/>.
            </summary>
        </member>
        <member name="T:SharpMap.Data.IFeatureDataRecord">
            <summary>
            Encapsulates both the <see cref="P:SharpMap.Data.IFeatureDataRecord.Geometry"/> and
            attribute values for a feature.
            </summary>
        </member>
        <member name="M:SharpMap.Data.IFeatureDataRecord.GetOid">
            <summary>
            Gets the object ID for the record.
            </summary>
            <returns>
            The object ID for the record, or <see langword="null"/> 
            if <see cref="P:SharpMap.Data.IFeatureDataRecord.HasOid"/> is <see langword="false"/>.
            </returns>
        </member>
        <member name="P:SharpMap.Data.IFeatureDataRecord.Geometry">
            <summary>
            Gets the geometry for the current position in the reader.
            </summary>
        </member>
        <member name="P:SharpMap.Data.IFeatureDataRecord.Extents">
            <summary>
            Gets the extents for the current position in the reader.
            </summary>
        </member>
        <member name="P:SharpMap.Data.IFeatureDataRecord.HasOid">
            <summary>
            Gets a value indicating if the feature record
            has an object Identifier (OID).
            </summary>
        </member>
        <member name="P:SharpMap.Data.IFeatureDataRecord.IsFullyLoaded">
            <summary>
            Gets a value indicating whether this feature record
            has been fully loaded from the data source.
            </summary>
        </member>
        <member name="P:SharpMap.Data.IFeatureDataRecord.OidType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the object ID.
            </summary>
            <remarks>
            OidType gets a <see cref="T:System.Type"/> which can be used
            to call GetOid with generic type parameters in order to avoid 
            boxing. If <see cref="P:SharpMap.Data.IFeatureDataRecord.HasOid"/> returns false, <see cref="P:SharpMap.Data.IFeatureDataRecord.OidType"/>
            returns <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:SharpMap.Data.FeatureDataRow.AcceptChanges">
            <summary>
            Accepts all pending values in the feature and makes them
            the current state.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataRow.IsGeometryNull">
            <summary>
            Returns true of the geometry is null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataRow.SetGeometryNull">
            <summary>
            Sets the geometry column to null.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataRow.System#Data#IDataRecord#get_Item(System.Int32)">
            <summary>
            Represents a geographic feature, stored as 
            a row of data in a <see cref="T:SharpMap.Data.FeatureDataTable"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataRow.System#Data#IDataRecord#get_Item(System.String)">
            <summary>
            Represents a geographic feature, stored as 
            a row of data in a <see cref="T:SharpMap.Data.FeatureDataTable"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataRow.Extents">
            <summary>
            Gets or sets geographic extents for the feature.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if <see cref="P:SharpMap.Data.FeatureDataRow.Geometry"/> is not null, since Extents
            just reflects the Geometry's extents, if set.
            </exception>
        </member>
        <member name="P:SharpMap.Data.FeatureDataRow.Geometry">
            <summary>
            The geometry of the feature.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataRow.IsFullyLoaded">
            <summary>
            Gets a value indicating whether this feature record
            has been fully loaded from the data source.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataRow.IsGeometryModified">
            <summary>
            Gets true if the <see cref="P:SharpMap.Data.FeatureDataRow.Geometry"/> value for the
            feature has been modified.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataRow.Table">
            <summary>
            Gets the <see cref="T:SharpMap.Data.FeatureDataTable"/> for which this
            row has schema.
            </summary>
        </member>
        <member name="T:SharpMap.Expressions.GeometryExpression">
            <summary>
            An expression which represents an <see cref="T:GeoAPI.Geometries.IGeometry"/> in a
            compound expression or an expression tree.
            </summary>
        </member>
        <member name="T:SharpMap.Expressions.Expression">
            <summary>
            Represents an expression used to select or project data.
            </summary>
        </member>
        <member name="M:SharpMap.Expressions.Expression.Contains(SharpMap.Expressions.Expression,SharpMap.Expressions.Expression)">
            <summary>
            Determines if <see cref="T:SharpMap.Expressions.Expression"/> <paramref name="a"/> contains
            <see cref="T:SharpMap.Expressions.Expression"/> <paramref name="b"/>. "Contains" means that
            the two expressions produce the same result given a set of input. Containment
            in general is not transitive, so <c>a.Contains(b)</c> is not the same
            as <c>b.Contains(a)</c>.
            </summary>
            <param name="a">
            The <see cref="T:SharpMap.Expressions.Expression"/> to determine containment of <paramref name="b"/>.
            </param>
            <param name="b">
            The <see cref="T:SharpMap.Expressions.Expression"/> to test containment of by <paramref name="a"/>.
            </param>
            <returns>
            <see langword="true"/> if <c>a.Contains(b)</c>; <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:SharpMap.Expressions.Expression.Contains(SharpMap.Expressions.Expression)">
            <summary>
            Determines if the given <see cref="T:SharpMap.Expressions.Expression"/> contains
            this expression. "Contains" means that
            the expression will provide at least the same result set when applied to a given 
            input set, and perhaps more. Containment in general is not transitive, 
            so <c>this.Contains(other)</c> is not the same as <c>other.Contains(this)</c>, 
            unless the expressions are equivalant.
            </summary>
        </member>
        <member name="M:SharpMap.Expressions.Expression.Clone">
            <summary>
            Makes a duplicate of the expression.
            </summary>
            <returns>An expression with the same structure and type as this one.</returns>
        </member>
        <member name="T:SharpMap.Expressions.ProjectionExpression">
            <summary>
            Represents an expression which transforms one set to another set.
            </summary>
        </member>
        <member name="T:SharpMap.Indexing.SpatialIndexNode`1">
            <summary>
            Abstract representation of a node in an 
            <see cref="T:GeoAPI.Indexing.ISpatialIndex`2"/> or a 
            <see cref="T:GeoAPI.Indexing.IUpdatableSpatialIndex`2"/>.
            </summary>
            <typeparam name="TItem">Type of the index entry.</typeparam>
        </member>
        <member name="M:SharpMap.Indexing.SpatialIndexNode`1.addItem(`0)">
            <summary>
            Adds item to <see cref="P:SharpMap.Indexing.SpatialIndexNode`1.Items"/> list and expands node's
            <see cref="!:ISpatialIndexNode&lt;TBounds, TItem&gt;.Bounds">bounds</see> 
            to contain the <paramref name="item"/>'s bounds.
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:SharpMap.Indexing.SpatialIndexNode`1.addItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds <paramref name="items">items</paramref> to 
            <see cref="P:SharpMap.Indexing.SpatialIndexNode`1.Items"/> list and expands node's
            <see cref="T:GeoAPI.Geometries.IExtents">extents</see> to contain all 
            <paramref name="items">items'</paramref>
            bounding boxes.
            </summary>
            <param name="items">Items to add.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="items"/> is null.
            </exception>
        </member>
        <member name="M:SharpMap.Indexing.SpatialIndexNode`1.removeItem(`0)">
            <summary>
            Removes an item and adjusts 
            <see cref="!:ISpatialIndexNode&lt;TBounds, TItem&gt;.Bounds">bounds</see> 
            to accomodate new set of items.
            </summary>
            <param name="item">Item to remove.</param>
            <returns>
            <see langword="true"/> if the item was found and removed, 
            <see langword="false"/> if not found or not removed.
            </returns>
        </member>
        <member name="M:SharpMap.Indexing.SpatialIndexNode`1.Clear">
            <summary>
            Removes all contained items and sets the 
            <see cref="!:ISpatialIndexNode&lt;TBounds, TItem&gt;.Bounds">bounds</see> 
            to <see langword="null"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Indexing.SpatialIndexNode`1.Bounds">
            <summary>
            Gets the extents for this node, which minimally bounds all items.
            </summary>
        </member>
        <member name="P:SharpMap.Indexing.SpatialIndexNode`1.Index">
            <summary>
            Gets a reference to the containing spatial index.
            </summary>
        </member>
        <member name="P:SharpMap.Indexing.SpatialIndexNode`1.Items">
            <summary>
            Gets the list of items in the index node.
            </summary>
        </member>
        <member name="M:SharpMap.Indexing.QuadTree.QuadTree`1.Insert(GeoAPI.Geometries.IExtents,`0)">
            <summary>
            Adds a spatial item with an extent specified by the given
            <paramref name="bounds"/> to the index.
            </summary>
        </member>
        <member name="M:SharpMap.Indexing.QuadTree.QuadTree`1.Query(GeoAPI.Geometries.IExtents)">
            <summary> 
            Queries the index for all items whose extents intersect the given search <c>Envelope</c> 
            Note that some kinds of indexes may also return objects which do not in fact
            intersect the query envelope.
            </summary>
            <param name="bounds">The envelope to query for.</param>
            <returns>A list of the items found by the query.</returns>
        </member>
        <member name="M:SharpMap.Indexing.QuadTree.QuadTree`1.Query(GeoAPI.Geometries.IExtents,System.Predicate{`0})">
            <summary>
            Queries the index for all items whose extents intersect the given search 
            <see cref="T:GeoAPI.Geometries.IExtents`1"/>, and applies an <see cref="T:System.Action`1"/> to them.
            Note that some kinds of indexes may also return objects which do not in fact
            intersect the query envelope.
            </summary>
            <param name="bounds">The envelope to query for.</param>
            <param name="predicate">A predicate delegate to apply to the items found.</param>
        </member>
        <member name="M:SharpMap.Indexing.QuadTree.QuadTree`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:SharpMap.Indexing.QuadTree.DynamicQuadTree`1.#ctor(GeoAPI.Geometries.IGeometryFactory,GeoAPI.Indexing.IItemInsertStrategy{GeoAPI.Geometries.IExtents,`0},GeoAPI.Indexing.INodeSplitStrategy{GeoAPI.Geometries.IExtents,`0},SharpMap.Indexing.QuadTree.DynamicQuadTreeBalanceHeuristic)">
            <summary>
            Creates a new updatable QuadTree instance
            </summary>
            <param name="insertStrategy">Strategy used to insert new entries into the index.</param>
            <param name="nodeSplitStrategy">Strategy used to split nodes when they are full.</param>
            <param name="heuristic">Heuristics used to build the index and keep it balanced.</param>
        </member>
        <member name="P:SharpMap.Indexing.QuadTree.DynamicQuadTree`1.Heuristic">
            <summary>
            Huristic used to create and balance the tree.
            </summary>
        </member>
        <member name="T:SharpMap.Expressions.SpatialAnalysisConvexHullExpression">
            <summary>
            A SpatialAnalysisExpression which returns a GeometryExpression corresponding to the ConvexHull of the input GeometryExpression
            </summary>
        </member>
        <member name="T:SharpMap.Data.SharpMapDataException">
            <summary>
            The base class for data exceptions in SharpMap.
            </summary>
        </member>
        <member name="M:SharpMap.Data.SharpMapDataException.#ctor">
            <summary>
            Creates a new instance of a SharpMapDataException.
            </summary>
        </member>
        <member name="M:SharpMap.Data.SharpMapDataException.#ctor(System.String)">
            <summary>
            Creates a new instance of a SharpMapDataException with the given 
            <paramref name="message"/>.
            </summary>
            <param name="message">Text message to include in the exception.</param>
        </member>
        <member name="M:SharpMap.Data.SharpMapDataException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of a SharpMapDataException with the given 
            <paramref name="message"/> and causing exception, <paramref name="inner"/>.
            </summary>
            <param name="message">Text message to include in the exception.</param>
            <param name="inner">Exception which caused this exception.</param>
        </member>
        <member name="M:SharpMap.Data.SharpMapDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of a SharpMapDataException with the given
            <see cref="!:info">serialization data</see>.
            </summary>
            <param name="info">Exception values which were serialized.</param>
            <param name="context">Serialization context information.</param>
        </member>
        <member name="T:SharpMap.Data.FeatureUniqueConstraint">
            <summary>
            This class is experimental and not used.
            </summary>
        </member>
        <member name="T:SharpMap.Indexing.RTree.SelfOptimizingDynamicSpatialIndex`1">
            <summary>
            A dynamic R-Tree which periodically restructures in order to provide more optimal indexing.
            </summary>
            <typeparam name="TItem">The type of the value used in the entries.</typeparam>
        </member>
        <member name="T:SharpMap.Indexing.RTree.DynamicRTree`1">
            <summary>
            An implementation of an updatable R-Tree spatial index.
            </summary>
            <typeparam name="TItem">
            The type of the value used in the entries.
            </typeparam>
            <remarks>
            Depending on the strategy implemented and used in the 
            construction of an instance of <see cref="T:SharpMap.Indexing.RTree.DynamicRTree`1"/>,
            the instance could be one of a number of various R-Tree 
            variants, such as R*Tree or R+Tree.
            </remarks>
        </member>
        <member name="T:SharpMap.Indexing.RTree.RTree`1">
            <summary>
            Implements an R-Tree spatial index.
            </summary>
            <typeparam name="TItem">The type of the value used in the entries.</typeparam>
        </member>
        <member name="M:SharpMap.Indexing.RTree.RTree`1.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a new instance of an RTree index.
            </summary>
        </member>
        <member name="M:SharpMap.Indexing.RTree.RTree`1.Dispose">
            <summary>
            Disposes the index.
            </summary>
        </member>
        <member name="M:SharpMap.Indexing.RTree.RTree`1.Clear">
            <summary>
            Clears the index of all entries.
            </summary>
        </member>
        <member name="M:SharpMap.Indexing.RTree.RTree`1.Query(GeoAPI.Geometries.IExtents)">
            <summary>
            Searches the tree and looks for intersections with the given
            <see cref="T:GeoAPI.Geometries.IExtents"/>.
            </summary>
            <param name="bounds">
            An <see cref="T:GeoAPI.Geometries.IExtents"/> to intersect the index with.
            </param>
        </member>
        <member name="M:SharpMap.Indexing.RTree.RTree`1.Query(GeoAPI.Geometries.IGeometry)">
            <summary>
            Searches the tree and looks for intersections with the
            given <paramref name="geometry"/>.
            </summary>
            <param name="geometry">Geometry to intersect the index with.</param>
        </member>
        <member name="M:SharpMap.Indexing.RTree.RTree`1.CreateNode">
            <summary>
            Creates a new index node with an empty extents.
            </summary>
            <returns>A new node for the R-Tree.</returns>
        </member>
        <member name="M:SharpMap.Indexing.RTree.RTree`1.CreateNode(GeoAPI.Geometries.IExtents)">
            <summary>
            Creates a new index branch node with the given extents.
            </summary>
            <returns>A new branch node for the R-Tree.</returns>
        </member>
        <member name="M:SharpMap.Indexing.RTree.RTree`1.IntersectTreeRecursive(GeoAPI.Geometries.IExtents,SharpMap.Indexing.RTree.RTreeNode{`0})">
            <summary>
            Recursive function that traverses the tree and looks for intersections 
            with a given <see cref="T:GeoAPI.Geometries.IExtents">region</see>.
            </summary>
            <remarks>
            Nothing is added to the list if <paramref name="bounds"/> is 
            <see langword="null"/>
            </remarks>
            <param name="bounds">An IExtents to intersect with.</param>
            <param name="node">Node to search from.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="node"/>  is null.
            </exception>
        </member>
        <member name="P:SharpMap.Indexing.RTree.RTree`1.Root">
            <summary>
            Root node in the R-Tree
            </summary>
        </member>
        <member name="M:SharpMap.Indexing.RTree.DynamicRTree`1.#ctor(GeoAPI.Geometries.IGeometryFactory,GeoAPI.Indexing.IItemInsertStrategy{GeoAPI.Geometries.IExtents,`0},GeoAPI.Indexing.INodeSplitStrategy{GeoAPI.Geometries.IExtents,`0},SharpMap.Indexing.RTree.DynamicRTreeBalanceHeuristic)">
            <summary>
            Creates a new updatable R-Tree instance.
            </summary>
            <param name="geoFactory">
            An <see cref="T:GeoAPI.Geometries.IGeometryFactory"/> for creating extent instances.
            </param>
            <param name="insertStrategy">
            Strategy used to insert new entries into the index.
            </param>
            <param name="nodeSplitStrategy">
            Strategy used to split nodes when they are full.
            </param>
            <param name="heuristic">
            Heuristics used to build the index and keep it balanced.
            </param>
        </member>
        <member name="M:SharpMap.Indexing.RTree.DynamicRTree`1.#ctor">
            <summary>
            This constructor is used internally 
            for loading a tree from a stream.
            </summary>
        </member>
        <member name="M:SharpMap.Indexing.RTree.DynamicRTree`1.Insert(`0)">
            <summary>
            Inserts a node into the tree using <see cref="P:SharpMap.Indexing.RTree.DynamicRTree`1.ItemInsertStrategy"/>.
            </summary>
            <param name="item">The item to insert into the index.</param>
        </member>
        <member name="M:SharpMap.Indexing.RTree.DynamicRTree`1.Remove(`0)">
            <summary>
            Removes an item from the index.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:SharpMap.Indexing.RTree.DynamicRTree`1.FromStream(System.IO.Stream,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Loads an R-Tree structure from a stream.
            </summary>
            <param name="data">Stream which holds the R-Tree spatial index.</param>
            <returns>
            A <see cref="T:SharpMap.Indexing.RTree.DynamicRTree`1"/> instance which had been 
            persisted to the <see cref="T:System.IO.Stream">stream</see>.
            </returns>
        </member>
        <member name="M:SharpMap.Indexing.RTree.DynamicRTree`1.SaveIndex(System.IO.Stream)">
            <summary>
            Saves the spatial index to a stream.
            </summary>
            <param name="stream">Stream to save index to.</param>
        </member>
        <member name="P:SharpMap.Indexing.RTree.DynamicRTree`1.ItemInsertStrategy">
            <summary>
            The strategy used to insert new entries into the index.
            </summary>
        </member>
        <member name="P:SharpMap.Indexing.RTree.DynamicRTree`1.Heuristic">
            <summary>
            Huristic used to create and balance the tree.
            </summary>
        </member>
        <member name="M:SharpMap.Indexing.RTree.SelfOptimizingDynamicSpatialIndex`1.#ctor(GeoAPI.Geometries.IGeometryFactory,GeoAPI.Indexing.IIndexRestructureStrategy{GeoAPI.Geometries.IExtents,`0},SharpMap.Indexing.RTree.RestructuringHuristic,GeoAPI.Indexing.IItemInsertStrategy{GeoAPI.Geometries.IExtents,`0},GeoAPI.Indexing.INodeSplitStrategy{GeoAPI.Geometries.IExtents,`0},SharpMap.Indexing.RTree.DynamicRTreeBalanceHeuristic,SharpMap.Utilities.IdleMonitor)">
            <summary>
            Creates a new SelfOptimizingDynamicSpatialIndex.
            </summary>
            <param name="geoFactory">An <see cref="T:GeoAPI.Geometries.IGeometryFactory"/> instance.</param>
            <param name="restructureStrategy">The strategy used to restructure the index.</param>
            <param name="restructureHeuristic">The heuristic to control when the index is restructured.</param>
            <param name="insertStrategy">The strategy used to insert entries into the index.</param>
            <param name="nodeSplitStrategy">The strategy used to split index nodes.</param>
            <param name="indexHeuristic">A heuristic used to balance the index for optimum efficiency.</param>
            <param name="idleMonitor">A monitor to determine idle conditions on the executing machine.</param>
        </member>
        <member name="P:SharpMap.Indexing.RTree.SelfOptimizingDynamicSpatialIndex`1.RestructuringHeuristic">
            <summary>
            Gets the heuristic used to specify when the index is restructured.
            </summary>
        </member>
        <member name="T:SharpMap.Tools.StandardMapView2DMapTools">
            <summary>
            Provides a set of standard tools to use on an <see cref="T:SharpMap.Presentation.Views.IMapView2D"/>.
            </summary>
        </member>
        <member name="F:SharpMap.Tools.StandardMapView2DMapTools.None">
            <summary>
            No active tool
            </summary>
        </member>
        <member name="F:SharpMap.Tools.StandardMapView2DMapTools.Pan">
            <summary>
            Pan
            </summary>
        </member>
        <member name="F:SharpMap.Tools.StandardMapView2DMapTools.ZoomIn">
            <summary>
            Zoom in
            </summary>
        </member>
        <member name="F:SharpMap.Tools.StandardMapView2DMapTools.ZoomOut">
            <summary>
            Zoom out
            </summary>
        </member>
        <member name="F:SharpMap.Tools.StandardMapView2DMapTools.Query">
            <summary>
            Query tool
            </summary>
        </member>
        <member name="F:SharpMap.Tools.StandardMapView2DMapTools.QueryAdd">
            <summary>
            QueryAdd tool
            </summary>
        </member>
        <member name="F:SharpMap.Tools.StandardMapView2DMapTools.QueryRemove">
            <summary>
            QueryRemove tool
            </summary>
        </member>
        <member name="F:SharpMap.Tools.StandardMapView2DMapTools.FeatureAdd">
            <summary>
            Add feature tool
            </summary>
        </member>
        <member name="F:SharpMap.Tools.StandardMapView2DMapTools.FeatureRemove">
            <summary>
            Remove feature tool
            </summary>
        </member>
        <member name="M:SharpMap.Tools.StandardMapView2DMapTools.BeginQuery(SharpMap.Tools.ActionContext{SharpMap.Presentation.Views.IMapView2D,SharpMap.Rendering.Rendering2D.Point2D})">
            <summary>
            Clear the view's current selection before starting a new one.
            </summary>
            <param name="context">
            An <see cref="T:SharpMap.Tools.ActionContext`2"/> which provides 
            information about where, and on which view, the action occurred.
            </param>
        </member>
        <member name="M:SharpMap.Tools.StandardMapView2DMapTools.ContinueQuery(SharpMap.Tools.ActionContext{SharpMap.Presentation.Views.IMapView2D,SharpMap.Rendering.Rendering2D.Point2D})">
            <summary>
            Add the current point to the view's selection.
            </summary>
            <param name="context">
            An <see cref="T:SharpMap.Tools.ActionContext`2"/> which provides 
            information about where, and on which view, the action occurred.
            </param>
        </member>
        <member name="M:SharpMap.Tools.StandardMapView2DMapTools.EndQuery(SharpMap.Tools.ActionContext{SharpMap.Presentation.Views.IMapView2D,SharpMap.Rendering.Rendering2D.Point2D})">
            <summary>
            Close the view's selection and set the map's GeometryFilter.
            </summary>
            <param name="context">
            An <see cref="T:SharpMap.Tools.ActionContext`2"/> which provides 
            information about where, and on which view, the action occurred.
            </param>
        </member>
        <member name="T:SharpMap.Rendering.Rendering2D.BasicGeometryRenderer2D`1">
            <summary>
            A basic renderer which renders the geometric paths from feature geometry, 
            taking into account <see cref="T:SharpMap.Styles.Style">styles</see> and 
            <see cref="T:SharpMap.Rendering.Thematics.ITheme">themes</see>.
            </summary>
            <typeparam name="TRenderObject">Type of render object to generate.</typeparam>
        </member>
        <member name="T:SharpMap.Rendering.Rendering2D.FeatureRenderer2D`2">
            <summary>
            The base class for 2D feature renderers.
            </summary>
            <typeparam name="TStyle">The type of style to use.</typeparam>
            <typeparam name="TRenderObject">The type of render object produced.</typeparam>
        </member>
        <member name="T:SharpMap.Rendering.IRenderer">
            <summary>
            Interface to a graphical renderer.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.IRenderer.RenderTransform">
            <summary>
            Gets or sets a matrix used to transform 
            coordinate values during rendering.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.IRenderer.StyleRenderingMode">
            <summary>
            Gets or sets a <see cref="P:SharpMap.Rendering.IRenderer.StyleRenderingMode"/> 
            value used to render objects.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Renderer2D.RenderTransform">
            <summary>
            Gets or sets a matrix used to transform 
            coordinate values during rendering.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Renderer2D.StyleRenderingMode">
            <summary>
            Gets or sets a <see cref="P:SharpMap.Rendering.Rendering2D.Renderer2D.StyleRenderingMode"/> 
            value used to render objects.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.IFeatureRenderer`1">
            <summary>
            Interface to a graphical renderer of feature data yielding 
            strongly-typed render objects.
            </summary>
            <typeparam name="TRenderObject">
            Type of object used by the graphics library to perform drawing.
            </typeparam>
        </member>
        <member name="T:SharpMap.Rendering.IFeatureRenderer">
            <summary>
            Interface to a graphical renderer of feature data.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.IFeatureRenderer.RenderFeature(SharpMap.Data.IFeatureDataRecord)">
            <summary>
            Renders the attributes and/or spatial data in the <paramref name="feature"/>.
            </summary>
            <param name="feature">
            A <see cref="T:SharpMap.Data.IFeatureDataRecord"/> instance with spatial data.
            </param>
            <returns>
            An enumeration of rendered objects used to draw the spatial data.
            </returns>
        </member>
        <member name="M:SharpMap.Rendering.IFeatureRenderer.RenderFeature(SharpMap.Data.IFeatureDataRecord,SharpMap.Styles.IStyle,SharpMap.Rendering.RenderState,SharpMap.Layers.ILayer)">
            <summary>
            Renders the attributes and/or spatial data in the <paramref name="feature"/>.
            </summary>
            <param name="feature">
            A <see cref="T:SharpMap.Data.IFeatureDataRecord"/> instance with spatial data.
            </param>
            <param name="style">
            Style used to render the feature.
            </param>
            <returns>
            An enumeration of rendered objects used to draw the spatial data.
            </returns>
        </member>
        <member name="P:SharpMap.Rendering.IFeatureRenderer.DefaultStyle">
            <summary>
            Gets or sets the default style if no style or theme information is provided.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.IFeatureRenderer`1.RenderFeature(SharpMap.Data.IFeatureDataRecord)">
            <summary>
            Renders the attributes and/or spatial data in the <paramref name="feature"/>.
            </summary>
            <param name="feature">
            A <see cref="T:SharpMap.Data.IFeatureDataRecord"/> instance with spatial data.
            </param>
            <returns>
            An enumeration of <typeparamref name="TRenderObject"/> instances 
            used to draw the spatial data.
            </returns>
        </member>
        <member name="M:SharpMap.Rendering.IFeatureRenderer`1.RenderFeature(SharpMap.Data.IFeatureDataRecord,SharpMap.Styles.IStyle,SharpMap.Rendering.RenderState,SharpMap.Layers.ILayer)">
            <summary>
            Renders the attributes and/or spatial data in the <paramref name="feature"/>.
            </summary>
            <param name="feature">
            A <see cref="T:SharpMap.Data.IFeatureDataRecord"/> instance with spatial data.
            </param>
            <param name="style">
            Style used to render the feature, overriding theme. 
            Use null if no style is desired or to use <see cref="!:IFeatureRenderer.Theme"/>.
            </param>
            <returns>
            An enumeration of <typeparamref name="TRenderObject"/> instances 
            used to draw the spatial data.
            </returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.FeatureRenderer2D`2.RenderFeature(SharpMap.Data.IFeatureDataRecord)">
            <summary>
            Renders a feature into displayable render objects.
            </summary>
            <param name="feature">The feature to render.</param>
            <returns>An enumeration of positioned render objects for display.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.FeatureRenderer2D`2.RenderFeature(SharpMap.Data.IFeatureDataRecord,`0,SharpMap.Rendering.RenderState,SharpMap.Layers.ILayer)">
            <summary>
            Renders a feature into displayable render objects.
            </summary>
            <param name="feature">The feature to render.</param>
            <param name="style">The style to use to render the feature.</param>
            <returns>An enumeration of positioned render objects for display.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.FeatureRenderer2D`2.DoRenderFeature(SharpMap.Data.IFeatureDataRecord,`0,SharpMap.Rendering.RenderState,SharpMap.Layers.ILayer)">
            <summary>
            Template method to perform the actual geometry rendering.
            </summary>
            <param name="feature">Feature to render.</param>
            <param name="style">Style to use in rendering geometry.</param>
            <param name="state">
            A <see cref="T:SharpMap.Rendering.RenderState"/> value to indicate how to render the feature.
            </param>
            <returns></returns>
            <param name="layer"></param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.FeatureRenderer2D`2.OnFeatureRendered">
            <summary>
            Called when a feature is rendered.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.FeatureRenderer2D`2.OnFeatureRendering(System.Boolean@)">
            <summary>
            Called when a feature is being rendered.
            </summary>
            <param name="cancel">
            Value which can be set to indicate that the feature shouldn't be rendered.
            </param>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.FeatureRenderer2D`2.VectorRenderer">
            <summary>
            Gets the Renderer2D which the featurer renderer 
            uses to render graphics primitives.
            </summary>
        </member>
        <member name="E:SharpMap.Rendering.Rendering2D.FeatureRenderer2D`2.FeatureRendering">
            <summary>
            Event fired when a feature is about to render to the render stream.
            </summary>
        </member>
        <member name="E:SharpMap.Rendering.Rendering2D.FeatureRenderer2D`2.FeatureRendered">
            <summary>
            Event fired when a feature has been rendered.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.FeatureRenderer2D`2.DefaultStyle">
            <summary>
            Gets or sets the default style if no style or theme information is provided.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.BasicGeometryRenderer2D`1.#ctor(SharpMap.Rendering.Rendering2D.VectorRenderer2D{`0})">
            <summary>
            Creates a new BasicGeometryRenderer2D with the given VectorRenderer2D instance.
            </summary>
            <param name="vectorRenderer">
            A vector renderer.
            </param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.BasicGeometryRenderer2D`1.#ctor(SharpMap.Rendering.Rendering2D.VectorRenderer2D{`0},SharpMap.Styles.GeometryStyle)">
            <summary>
            Creates a new BasicGeometryRenderer2D with the given VectorRenderer2D instance.
            </summary>
            <param name="vectorRenderer">
            A vector renderer.
            </param>
            <param name="defaultStyle"> 
            The default style to apply to a feature's geometry.
            </param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.BasicGeometryRenderer2D`1.Finalize">
            <summary>
            Finalizer for BasicGeometryRenderer2D.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.BasicGeometryRenderer2D`1.DoRenderFeature(SharpMap.Data.IFeatureDataRecord,SharpMap.Styles.GeometryStyle,SharpMap.Rendering.RenderState,SharpMap.Layers.ILayer)">
            <summary>
            Renders the geometry of the <paramref name="feature"/>.
            </summary>
            <param name="feature">The feature to render.</param>
            <param name="style">The style to use to render the feature.</param>
            <returns>An enumeration of positioned render objects suitable for display.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.BasicGeometryRenderer2D`1.DrawMultiLineString(GeoAPI.Geometries.IMultiLineString,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Rendering.RenderState)">
            <summary>
            Renders a <see cref="T:GeoAPI.Geometries.IMultiLineString"/>.
            </summary>
            <param name="lines">IMultiLineString to be rendered.</param>
            <param name="fill">Pen used for filling (null or transparent for no filling).</param>
            <param name="highlightFill">Pen used for filling when highlighted.</param>
            <param name="selectFill">Pen used for filling when selected.</param>
            <param name="outline">Outline pen style (null if no outline).</param>
            <param name="highlightOutline">Outline pen style used when highlighted.</param>
            <param name="selectOutline">Outline pen style used when selected.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.BasicGeometryRenderer2D`1.DrawLineString(GeoAPI.Geometries.ILineString,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Rendering.RenderState)">
            <summary>
            Renders a <see cref="T:GeoAPI.Geometries.ILineString"/>.
            </summary>
            <param name="line">ILineString to render.</param>
            <param name="fill">
            Pen used for filling (null or transparent for no filling).
            </param>
            <param name="highlightFill">
            Pen used for filling when highlighted.
            </param>
            <param name="selectFill">
            Pen used for filling when selected.
            </param>
            <param name="outline">
            Outline pen style (null if no outline).
            </param>
            <param name="highlightOutline">
            Outline pen style used when highlighted.
            </param>
            <param name="selectOutline">
            Outline pen style used when selected.
            </param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.BasicGeometryRenderer2D`1.DrawMultiPolygon(GeoAPI.Geometries.IMultiPolygon,SharpMap.Styles.StyleBrush,SharpMap.Styles.StyleBrush,SharpMap.Styles.StyleBrush,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Rendering.RenderState)">
            <summary>
            Renders a <see cref="T:GeoAPI.Geometries.IMultiPolygon"/>.
            </summary>
            <param name="multipolygon">IMultiPolygon to render.</param>
            <param name="fill">
            Brush used for filling (null or transparent for no filling).
            </param>
            <param name="highlightFill">
            Brush used for filling when highlighted.
            </param>
            <param name="selectFill">
            Brush used for filling when selected.
            </param>
            <param name="outline">
            Outline pen style (null if no outline).
            </param>
            <param name="highlightOutline">
            Outline pen style used when highlighted.
            </param>
            <param name="selectOutline">
            Outline pen style used when selected.
            </param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.BasicGeometryRenderer2D`1.DrawPolygon(GeoAPI.Geometries.IPolygon,SharpMap.Styles.StyleBrush,SharpMap.Styles.StyleBrush,SharpMap.Styles.StyleBrush,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Rendering.RenderState)">
            <summary>
            Renders a <see cref="T:GeoAPI.Geometries.IPolygon"/>.
            </summary>
            <param name="polygon">IPolygon to render</param>
            <param name="fill">Brush used for filling (null or transparent for no filling).</param>
            <param name="highlightFill">Brush used for filling when highlighted.</param>
            <param name="selectFill">Brush used for filling when selected.</param>
            <param name="outline">Outline pen style (null if no outline).</param>
            <param name="highlightOutline">Outline pen style used when highlighted.</param>
            <param name="selectOutline">Outline pen style used when selected.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.BasicGeometryRenderer2D`1.DrawPoint(GeoAPI.Geometries.IPoint,SharpMap.Rendering.Rendering2D.Symbol2D,SharpMap.Rendering.Rendering2D.Symbol2D,SharpMap.Rendering.Rendering2D.Symbol2D,SharpMap.Rendering.RenderState)">
            <summary>
            Renders a <see cref="T:GeoAPI.Geometries.IPoint"/>.
            </summary>
            <param name="point">IPoint to render.</param>
            <param name="symbol">Symbol to place over point.</param>
            <param name="highlightSymbol">
            Symbol to use for point when point is highlighted.
            </param>
            <param name="selectSymbol">
            Symbol to use for point when point is selected.
            </param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.BasicGeometryRenderer2D`1.DrawMultiPoint(GeoAPI.Geometries.IMultiPoint,SharpMap.Rendering.Rendering2D.Symbol2D,SharpMap.Rendering.Rendering2D.Symbol2D,SharpMap.Rendering.Rendering2D.Symbol2D,SharpMap.Rendering.RenderState)">
            <summary>
            Renders a <see cref="T:GeoAPI.Geometries.IMultiPoint"/>.
            </summary>
            <param name="points">IMultiPoint to render.</param>
            <param name="symbol">Symbol to place over point.</param>
            <param name="highlightSymbol">
            Symbol to use for point when point is highlighted.
            </param>
            <param name="selectSymbol">
            Symbol to use for point when point is selected.
            </param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.BasicGeometryRenderer2D`1.convertCoordinates(System.Collections.IEnumerable)">
            <summary>
            kbd4hire 20090318
            Move transformation to view coordindates here.
            </summary>
            <param name="coordinates"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.BasicGeometryRenderer2D`1.convertPoints(System.Collections.Generic.IEnumerable{GeoAPI.Geometries.IPoint})">
            <summary>
            kbd4hire 20090318
            Move transformation to view coordindates here.
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.BasicGeometryRenderer2D`1.DefaultSymbol">
            <summary>
            The default basic symbol for rendering point data.
            </summary>
        </member>
        <member name="T:SharpMap.Data.IFeatureProvider`1">
            <summary>
            Interface for data providers with features having ID values.
            </summary>
        </member>
        <member name="T:SharpMap.Data.IFeatureProvider">
            <summary>
            Interface for feature data providers.
            </summary>
        </member>
        <member name="T:SharpMap.Data.IProvider">
            <summary>
            Interface for layer data providers.
            </summary>
        </member>
        <member name="M:SharpMap.Data.IProvider.GetExtents">
            <summary>
            Geometric extent of the entire dataset.
            </summary>
            <returns>The extents of the dataset as a BoundingBox.</returns>
        </member>
        <member name="M:SharpMap.Data.IProvider.Open">
            <summary>
            Opens the datasource.
            </summary>
        </member>
        <member name="M:SharpMap.Data.IProvider.Close">
            <summary>
            Closes the datasource.
            </summary>
        </member>
        <member name="P:SharpMap.Data.IProvider.CoordinateTransformation">
            <summary>
            Applies a coordinate transformation to the geometries in 
            this provider.
            </summary>
        </member>
        <member name="P:SharpMap.Data.IProvider.SpatialReference">
            <summary>
            The dataum, projection and coordinate system which the data appears in
            when queried.
            </summary>
        </member>
        <member name="P:SharpMap.Data.IProvider.OriginalSpatialReference">
            <summary>
            The dataum, projection and coordinate system which the underlying data 
            is stored as. This may be different from <see cref="P:SharpMap.Data.IProvider.SpatialReference"/> 
            if <see cref="P:SharpMap.Data.IProvider.CoordinateTransformation"/> is set.
            </summary>
        </member>
        <member name="P:SharpMap.Data.IProvider.IsOpen">
            <summary>
            Returns true if the datasource is currently open.
            </summary>
        </member>
        <member name="P:SharpMap.Data.IProvider.Srid">
            <summary>
            Gets the spatial reference ID for the provider's <see cref="P:SharpMap.Data.IProvider.SpatialReference"/>,
            if one exists; <see langword="null"/> otherwise.
            </summary>
        </member>
        <member name="P:SharpMap.Data.IProvider.OriginalSrid">
            <summary>
            Gets the spatial reference ID for the underlying data's 
            <see cref="P:SharpMap.Data.IProvider.OriginalSpatialReference"/>, if one exists; 
            <see langword="null"/> otherwise.
            </summary>
        </member>
        <member name="P:SharpMap.Data.IProvider.ConnectionId">
            <summary>
            Gets the connection ID of the datasource.
            </summary>
            <remarks>
            <para>
            The ConnectionId should be unique to the datasource 
            (for instance the filename or the connectionstring), and is meant 
            to be used for connection pooling.
            </para>
            <para>
            If connection pooling doesn't apply to this datasource, 
            the ConnectionId should return String.Empty.
            </para>
            </remarks>
        </member>
        <member name="M:SharpMap.Data.IFeatureProvider.CreateNewTable">
            <summary>
            Creates a new <see cref="T:SharpMap.Data.FeatureDataTable"/> from the data source's 
            schema.
            </summary>
            <returns>
            A <see cref="T:SharpMap.Data.FeatureDataTable"/> which is configured for the 
            data source's schema.
            </returns>
        </member>
        <member name="M:SharpMap.Data.IFeatureProvider.ExecuteFeatureQuery(SharpMap.Expressions.FeatureQueryExpression)">
            <summary>
            Retrieves a <see cref="T:SharpMap.Data.IFeatureDataReader"/> for the features that 
            match the given <paramref name="query"/>.
            </summary>
            <param name="query">Spatial query to execute.</param>
            <returns>An IFeatureDataReader to iterate over the results.</returns>
        </member>
        <member name="M:SharpMap.Data.IFeatureProvider.ExecuteFeatureQuery(SharpMap.Expressions.FeatureQueryExpression,SharpMap.Data.FeatureQueryExecutionOptions)">
            <summary>
            Retrieves a <see cref="T:SharpMap.Data.IFeatureDataReader"/> for the features that 
            match the given <paramref name="query"/>.
            </summary>
            <param name="query">Query used to retrieve features.</param>
            <param name="options">Options indicating which data to retrieve.</param>
        </member>
        <member name="M:SharpMap.Data.IFeatureProvider.GetFeatureCount">
            <summary>
            Returns the number of features in the entire data source.
            </summary>
            <returns>Count of the features in the entire data source.</returns>
        </member>
        <member name="M:SharpMap.Data.IFeatureProvider.GetSchemaTable">
            <summary>
            Returns a <see cref="T:System.Data.DataTable"/> with rows describing the columns in the schema
            for the configured provider. Provides the same result as 
            <see cref="M:System.Data.IDataReader.GetSchemaTable"/>.
            </summary>
            <seealso cref="M:System.Data.IDataReader.GetSchemaTable"/>
            <returns>A DataTable that describes the column metadata.</returns>
        </member>
        <member name="M:SharpMap.Data.IFeatureProvider.SetTableSchema(SharpMap.Data.FeatureDataTable)">
            <summary>
            Configures a <see cref="T:SharpMap.Data.FeatureDataTable`1"/> with the schema 
            present in the IProvider with the given connection.
            </summary>
            <param name="table">The FeatureDataTable to configure the schema of.</param>
        </member>
        <member name="P:SharpMap.Data.IFeatureProvider.GeometryFactory">
            <summary>
            Gets or sets the <see cref="T:GeoAPI.Geometries.IGeometryFactory"/> used
            to construct <see cref="T:GeoAPI.Geometries.IGeometry"/> instances.
            </summary>
        </member>
        <member name="P:SharpMap.Data.IFeatureProvider.Locale">
            <summary>
            Gets the locale of the data as a CultureInfo.
            </summary>
        </member>
        <member name="M:SharpMap.Data.IFeatureProvider`1.ExecuteOidQuery(SharpMap.Expressions.SpatialBinaryExpression)">
            <summary>
            Returns all object ids which match the given query.
            </summary>
            <param name="query">An expression which will match features in the data source.</param>
            <returns>An enumeration of all matching features' object ids.</returns>
        </member>
        <member name="M:SharpMap.Data.IFeatureProvider`1.GetGeometryByOid(`0)">
            <summary>
            Returns the geometry corresponding to the object ID.
            </summary>
            <param name="oid">Object ID.</param>
            <returns>The geometry corresponding to the <paramref name="oid"/>.</returns>
        </member>
        <member name="M:SharpMap.Data.IFeatureProvider`1.GetFeatureByOid(`0)">
            <summary>
            Gets a feature row from the data source with the specified id.
            </summary>
            <param name="oid">Id of the feautre to return.</param>
            <returns>
            The feature corresponding to <paramref name="oid" />, or null if no feature is found.
            </returns>
        </member>
        <member name="M:SharpMap.Data.IFeatureProvider`1.SetTableSchema(SharpMap.Data.FeatureDataTable{`0})">
            <summary>
            Configures a <see cref="T:SharpMap.Data.FeatureDataTable`1"/> with the schema 
            present in the IProvider with the given connection.
            </summary>
            <param name="table">The FeatureDataTable to configure the schema of.</param>
        </member>
        <member name="M:SharpMap.Data.IFeatureProvider`1.SetTableSchema(SharpMap.Data.FeatureDataTable{`0},SharpMap.Data.SchemaMergeAction)">
            <summary>
            Configures a <see cref="T:SharpMap.Data.FeatureDataTable`1"/> with the schema 
            present in the IProvider with the given connection.
            </summary>
            <param name="table">The FeatureDataTable to configure the schema of.</param>
            <param name="schemaAction">Indicates how to merge schema information.</param>
        </member>
        <member name="T:SharpMap.Data.FeatureDataTableReader">
            <summary>
            Provides a fast-forward, read-only data stream to feature data
            from a <see cref="T:SharpMap.Data.FeatureDataTable"/>.
            </summary>
        </member>
        <member name="T:SharpMap.Data.IFeatureDataReader">
            <summary>
            Provides a fast-forward, read-only data stream to feature data.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataTableReader.IsDisposed">
            <summary>
            Gets a value indicating whether the ShapeFileDataReader has been disposed or not.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.ProviderBase.ConnectionIdProperty">
            <summary>
            Gets a <see cref="T:System.ComponentModel.PropertyDescriptor"/> for 
            <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>'s <see cref="P:SharpMap.Data.Providers.ProviderBase.ConnectionId"/> property.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.ProviderBase.CoordinateTransformationProperty">
            <summary>
            Gets a <see cref="T:System.ComponentModel.PropertyDescriptor"/> for 
            <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>'s <see cref="P:SharpMap.Data.Providers.ProviderBase.CoordinateTransformation"/> property.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.ProviderBase.IsOpenProperty">
            <summary>
            Gets a <see cref="T:System.ComponentModel.PropertyDescriptor"/> for 
            <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>'s <see cref="P:SharpMap.Data.Providers.ProviderBase.IsOpen"/> property.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.ProviderBase.SpatialReferenceProperty">
            <summary>
            Gets a <see cref="T:System.ComponentModel.PropertyDescriptor"/> for 
            <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>'s <see cref="P:SharpMap.Data.Providers.ProviderBase.SpatialReference"/> property.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.ProviderBase.SridProperty">
            <summary>
            Gets a <see cref="T:System.ComponentModel.PropertyDescriptor"/> for 
            <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>'s <see cref="P:SharpMap.Data.Providers.ProviderBase.Srid"/> property.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.ProviderBase.IsDisposed">
            <summary>
            Gets a value indicating if the object has been disposed.
            </summary>
        </member>
        <member name="T:SharpMap.Data.Caching.IQueryCache">
            <summary>
            Interface to represent a cache of data which has been retrieved from an 
            <see cref="T:SharpMap.Data.IProvider"/> instance via a query <see cref="T:SharpMap.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Caching.IQueryCache.AddExpressionResult(SharpMap.Expressions.Expression,System.Object)">
            <summary>
            Adds the <paramref name="result"/> of executing the query <paramref name="expression"/>
            to the cache.
            </summary>
            <param name="expression">
            The <see cref="T:SharpMap.Expressions.Expression"/> which was executed on the <see cref="T:SharpMap.Data.IProvider"/>.
            </param>
            <param name="result">The result of executing the <paramref name="expression"/>.</param>
        </member>
        <member name="M:SharpMap.Data.Caching.IQueryCache.AddExpressionResults(SharpMap.Expressions.Expression,System.Collections.IEnumerable)">
            <summary>
            Adds the set of <paramref name="results"/> of executing the query 
            <paramref name="expression"/> to the cache.
            </summary>
            <param name="expression">
            The <see cref="T:SharpMap.Expressions.Expression"/> which was executed on the <see cref="T:SharpMap.Data.IProvider"/>.
            </param>
            <param name="results">The result of executing the <paramref name="expression"/>.</param>
        </member>
        <member name="M:SharpMap.Data.Caching.IQueryCache.Contains(SharpMap.Expressions.Expression)">
            <summary>
            Computes whether a query <paramref name="expression"/> can be satisfied by 
            data contained in the cache.
            </summary>
            <param name="expression">
            The <see cref="T:SharpMap.Expressions.Expression"/> to use to check for cached data coverage.
            </param>
            <returns>
            <see langword="true"/> if the <see cref="T:SharpMap.Data.Caching.IQueryCache"/> can satisfy the 
            <paramref name="expression"/> from cached data, <see langword="false"/>
            otherwise.
            </returns>
        </member>
        <member name="M:SharpMap.Data.Caching.IQueryCache.Contains(System.Collections.IEnumerable)">
            <summary>
            Computes whether a set of <paramref name="items"/> is contained in the cache.
            </summary>
            <param name="items">The set of items to check cache containment of.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:SharpMap.Data.Caching.IQueryCache"/> contains each item in 
            <paramref name="items"/>, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:SharpMap.Data.Caching.IQueryCache.Contains(System.Object)">
            <summary>
            Computes whether an <paramref name="item"/> is contained in the cache.
            </summary>
            <param name="item">The item to check cache containment of.</param>
            <returns>
            <see langword="true"/> if the <see cref="T:SharpMap.Data.Caching.IQueryCache"/> contains the item, 
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:SharpMap.Data.Caching.IQueryCache.Expire(SharpMap.Expressions.Expression)">
            <summary>
            Forces the expiration of all items which are matched by the 
            <paramref name="expression"/>.
            </summary>
            <param name="expression">
            The <see cref="T:SharpMap.Expressions.Expression"/> to use to match items in the cache.
            </param>
        </member>
        <member name="M:SharpMap.Data.Caching.IQueryCache.Expire(System.Object)">
            <summary>
            Forces the expiration of the specified item from the cache.
            </summary>
            <param name="item">
            The item to expire from the cache.
            </param>
        </member>
        <member name="M:SharpMap.Data.Caching.IQueryCache.Expire(System.Collections.IEnumerable)">
            <summary>
            Forces the expiration of the specified items from the cache.
            </summary>
            <param name="items">
            The set of items to expire from the cache.
            </param>
        </member>
        <member name="M:SharpMap.Data.Caching.IQueryCache.Retrieve(SharpMap.Expressions.Expression)">
            <summary>
            Retrieves the items in the cache which match the given <paramref name="expression"/>.
            </summary>
            <param name="expression">
            The <see cref="T:SharpMap.Expressions.Expression"/> to match cached items to retrieve.
            </param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.Caching.IQueryCache.FilterQuery(SharpMap.Expressions.QueryExpression)">
            <summary>
            Processes the given <paramref name="query"/> to optimize it for caching purposes. 
            </summary>
            <param name="query">
            The query to process to optimize based on data stored in the cache.
            </param>
            <returns>
            A (possibly) modified query based on the given <paramref name="query"/> and the data in 
            the cache which will keep the cache optimized.
            </returns>
            <remarks>
            The behavior of this method is highly dependent on the implementation of
            <see cref="T:SharpMap.Data.Caching.IQueryCache"/>. Various cache implementations may have very different
            strategies to maintain a cache of data, and this will be reflected in the queries
            which are optimized by this method.
            </remarks>
        </member>
        <member name="P:SharpMap.Utilities.IdleMonitor.UserIdleThresholdInSeconds">
            <summary>
            Gets or sets the amount of time in seconds during which no 
            user activity is detected before a user is considered idle.
            </summary>
        </member>
        <member name="P:SharpMap.Utilities.IdleMonitor.MachineIdleThresholdInSeconds">
            <summary>
            Gets or sets the amount of time in seconds during which 
            machine activity is less than or equal to <see cref="F:SharpMap.Utilities.IdleMonitor.MachineUtilizationConsideredIdle"/> 
            before a machine is considered idle.
            </summary>
        </member>
        <member name="T:SharpMap.Indexing.RTree.GuttmanQuadraticSplit`1">
            <summary>
            Implements a common, well accepted R-Tree node splitting strategy.
            </summary>
            <typeparam name="TItem">The type of the value used in the entries.</typeparam>
            <remarks>
            This strategy follows Antonin Guttman's findings in his paper 
            entitled "R-Trees: A Dynamic Index Structure for Spatial Searching", 
            Proc. 1984 ACM SIGMOD International Conference on Management of Data, pp. 47-57.
            </remarks>
        </member>
        <member name="T:SharpMap.Presentation.Views.ILayerStyleView">
            <summary>
            Provides the interface for a view to show and accept edit requests for 
            <see cref="T:SharpMap.Layers.Layer"/> style information.
            </summary>
        </member>
        <member name="T:SharpMap.Presentation.Views.IView">
            <summary>
            Interface for a view of a map.
            </summary>
        </member>
        <member name="M:SharpMap.Presentation.Views.IView.Hide">
            <summary>
            Hides the view, causing <see cref="P:SharpMap.Presentation.Views.IView.Visible"/> to become false.
            </summary>
        </member>
        <member name="M:SharpMap.Presentation.Views.IView.Show">
            <summary>
            Shows the view, causeing <see cref="P:SharpMap.Presentation.Views.IView.Visible"/> to become true.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Views.IView.Visible">
            <summary>
            Gets or sets whether the view is visible.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Views.IView.Enabled">
            <summary>
            Gets or sets whether the view is shown as enabled and available,
            or disabled and unavailable.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Views.IView.Title">
            <summary>
            Gets or sets the title to display on the view.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Views.ILayerStyleView.Style">
            <summary>
            Gets or sets the style to display.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.ITextRenderer`3.MeasureString(System.String,SharpMap.Styles.StyleFont)">
            <summary>
            Measures the <typeparamref name="TSize"/> of a String in the given <paramref name="font"/>.
            </summary>
            <param name="text">The String to measure.</param>
            <param name="font">The font to use to draw the String.</param>
            <returns>A measurement of the String.</returns>
        </member>
        <member name="M:SharpMap.Rendering.ITextRenderer`3.RenderText(System.String,SharpMap.Styles.StyleFont,`0,SharpMap.Styles.StyleBrush)">
            <summary>
            Renders a text String.
            </summary>
            <param name="text">The text to render.</param>
            <param name="font">The font to use to draw the text.</param>
            <param name="location">The location in view coordinates to render the text at.</param>
            <param name="fontBrush">The brush to use to paint the text.</param>
            <returns>
            A set of object instances representing the rendered text.
            </returns>
        </member>
        <member name="M:SharpMap.Rendering.ITextRenderer`3.RenderText(System.String,SharpMap.Styles.StyleFont,`2,SharpMap.Rendering.Path{`0,`2},SharpMap.Styles.StyleBrush,NPack.Interfaces.IMatrix{NPack.DoubleComponent})">
            <summary>
            Renders a text String.
            </summary>
            <param name="text">The text to render.</param>
            <param name="font">The font to use to draw the text.</param>
            <param name="layoutRectangle">
            The region in view coordinates to draw the text in.
            </param>
            <param name="flowPath">
            A path which the text is rendered to flow on.
            </param>
            <param name="fontBrush">
            The brush to use to paint the text.
            </param>
            <param name="transform">
            A transform to modify the location, rotation or skew of the text.
            </param>
            <returns>
            A set of object instances representing the rendered text.
            </returns>
        </member>
        <member name="P:SharpMap.Rendering.ITextRenderer`3.TextRenderingHint">
            <summary>
            Gets or sets a <see cref="T:SharpMap.Styles.StyleTextRenderingHint"/> to control how rendered text appears.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.ITextRenderer2D`1.RenderText(System.String,SharpMap.Styles.StyleFont,SharpMap.Rendering.Rendering2D.Point2D,SharpMap.Styles.StyleBrush)">
            <summary>
            Renders a text String.
            </summary>
            <param name="text">The text to render.</param>
            <param name="font">The font to use to draw the text.</param>
            <param name="location">The location in view coordinates to render the text at.</param>
            <param name="fontBrush">The brush to use to paint the text.</param>
            <returns>
            A set of object instances representing the rendered text.
            </returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.ITextRenderer2D`1.RenderText(System.String,SharpMap.Styles.StyleFont,SharpMap.Rendering.Rendering2D.Rectangle2D,SharpMap.Rendering.Rendering2D.Path2D,SharpMap.Styles.StyleBrush,SharpMap.Rendering.Rendering2D.Matrix2D)">
            <summary>
            Renders a text String.
            </summary>
            <param name="text">The text to render.</param>
            <param name="font">The font to use to draw the text.</param>
            <param name="layoutRectangle">
            The region in view coordinates to draw the text in.
            </param>
            <param name="flowPath">
            A path which the text is rendered to flow on.
            </param>
            <param name="fontBrush">
            The brush to use to paint the text.
            </param>
            <param name="transform">
            A transform to modify the location, rotation or skew of the text.
            </param>
            <returns>
            A set of <typeparamref name="TRenderObject"/> instances representing the rendered text.
            </returns>
        </member>
        <member name="T:SharpMap.Data.FeatureTableCollection">
            <summary>
            Represents the collection of tables for the FeatureDataSet.
            </summary>
        </member>
        <member name="M:SharpMap.Indexing.RTree.DynamicRTreeBalanceHeuristic.#ctor">
            <summary>
            Creates a new DynamicRTreeBalanceHeuristic with optimum heuristic values.
            </summary>
            <remarks>
            Where did I find these so called "optimum" values? I wrote them down without the
            reference.... d'oh!
            TODO: find the reference for RTree insert heuristics.
            </remarks>
        </member>
        <member name="T:SharpMap.Data.Providers.OgcStorageType">
            <summary>
            Specifies the geometry storage type according to the OGC Simple Features
            for SQL specification.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataRowChangeEventArgs.#ctor(SharpMap.Data.FeatureDataRow,System.Data.DataRowAction)">
            <summary>
            Initializes a new instance of the FeatureDataRowChangeEventArgs class.
            </summary>
            <param name="row"></param>
            <param name="action"></param>
        </member>
        <member name="P:SharpMap.Data.FeatureDataRowChangeEventArgs.Row">
            <summary>
            Gets the row upon which an action has occurred.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataRowChangeEventArgs.Action">
            <summary>
            Gets the action that has occurred on a FeatureDataRow.
            </summary>
        </member>
        <member name="T:SharpMap.Indexing.RTree.RestructuringHuristic">
            <summary>
            Encapsulates a heuristic to determine when an index is restructured.
            </summary>
        </member>
        <member name="M:SharpMap.Indexing.RTree.RestructuringHuristic.#ctor(SharpMap.Indexing.RTree.RestructureOpportunity,System.Double)">
            <summary>
            Creates a new restructuring heuristic with no period.
            </summary>
            <param name="whenToRestructure">A RestructureOpportunity enumeration value.</param>
            <param name="executionPercentage">
            A percentage value (0 to 100) which specifies the percent 
            of the time that a restructure could run that it actually is run.
            </param>
        </member>
        <member name="M:SharpMap.Indexing.RTree.RestructuringHuristic.#ctor(SharpMap.Indexing.RTree.RestructureOpportunity,System.Double,System.Double)">
            <summary>
            Creates a new restructuring heuristic with no period.
            </summary>
            <param name="whenToRestructure">A RestructureOpportunity enumeration value.</param>
            <param name="executionPercentage">
            A percentage value (0 to 100) which specifies the percent 
            of the time that a restructure could run that it actually is run.
            </param>
            <param name="period">A value in milliseconds after which a restructure is triggered.</param>
        </member>
        <member name="P:SharpMap.Indexing.RTree.RestructuringHuristic.WhenToRestructure">
            <summary>
            Gets the heuristic's RestructureOpportunity enumeration value.
            </summary>
        </member>
        <member name="P:SharpMap.Indexing.RTree.RestructuringHuristic.ExecutionPercentage">
            <summary>
            Gets a percentage value (0 to 100) which specifies the percent 
            of the time that a restructure could run that it actually is run.
            </summary>
        </member>
        <member name="P:SharpMap.Indexing.RTree.RestructuringHuristic.Period">
            <summary>
            Gets the period in milliseconds after which a restructure is triggered.
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.FeatureDataReader">
            <summary>
            Provides a fast-forward, read-only data stream to feature data
            from a <see cref="T:SharpMap.Data.Providers.FeatureProvider"/>.
            </summary>
        </member>
        <member name="T:SharpMap.Data.LayerDataLoadException">
            <summary>
            Exception thrown when the layer data specified to the provider can not be
            found or is not accessible.
            </summary>
        </member>
        <member name="F:SharpMap.Data.Providers.AsyncProviderAdapter._innerProvider">
            <summary>
            IProvider providing actual services
            </summary>
        </member>
        <member name="T:SharpMap.Data.IRasterProvider">
            <summary>
            Defines the interface to a provider of raster data.
            </summary>
        </member>
        <member name="M:SharpMap.Data.IRasterProvider.ExecuteRasterQuery(SharpMap.Expressions.RasterQueryExpression)">
            <summary>
            Retrieves a <see cref="T:System.IO.Stream"/> for the raster data that 
            are selected by <paramref name="query"/>.
            </summary>
            <param name="query">Query select with.</param>
            <returns>A Stream to access the raster data of the result.</returns>
        </member>
        <member name="T:SharpMap.SharpMapVersion">
            <summary>
            Version information helper class.
            </summary>
        </member>
        <member name="P:SharpMap.SharpMapVersion.CurrentVersion">
            <summary>
            Returns the current build version of SharpMap.
            </summary>
        </member>
        <member name="T:SharpMap.Styles.StyleTextRenderingHint">
            <summary>
            Specifies information which a type renderer uses to help
            determine how to render a font to an output device.
            </summary>
            <remarks>
            For more background on how these hints will influence
            rendered text, read 
            <a href="http://www.microsoft.com/typography/hinting/tutorial.htm">
            Basic hinting philosophies and TrueType instructions.
            </a>
            </remarks>
        </member>
        <member name="F:SharpMap.Styles.StyleTextRenderingHint.SystemDefault">
            <summary>
            The system default for rendering characters to a bitmap grid.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.StyleTextRenderingHint.SingleBitPerPixelGridFit">
            <summary>
            The characters are to be drawn to a glyph bitmap, with 
            typographic hinting to fit curves and stems to the grid.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.StyleTextRenderingHint.SingleBitPerPixel">
            <summary>
            The characters are to be drawn to a glyph bitmap, without
            typographic hinting to help ensure readability of curves and stems. 
            This hint usually results in the fastest rendering.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.StyleTextRenderingHint.AntiAliasGridFit">
            <summary>
            The characters are to be drawn to an anti-aliased 
            glyph bitmap, with typographic hinting.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.StyleTextRenderingHint.AntiAlias">
            <summary>
            The characters are to be drawn to an anti-aliased 
            glyph bitmap, without typographic hinting.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.StyleTextRenderingHint.ClearTypeGridFit">
            <summary>
            Microsoft ClearType is used to render the characters, if available.
            </summary>
        </member>
        <member name="T:SharpMap.Styles.SolidStyleBrush">
            <summary>
            Represents a brush which fills a region with a single, solid color.
            </summary>
        </member>
        <member name="T:SharpMap.Styles.StyleBrush">
            <summary>
            Represents an abstract brush to fill regions with color or patterns.
            </summary>
        </member>
        <member name="M:SharpMap.Styles.StyleBrush.#ctor">
            <summary>
            Creates a new instance of a StyleBrush with a transparent color.
            </summary>
        </member>
        <member name="M:SharpMap.Styles.StyleBrush.#ctor(SharpMap.Styles.StyleColor)">
            <summary>
            Creates a new instance of a StyleBrush with the given <paramref name="color"/>.
            </summary>
            <param name="color">Base color of the brush.</param>
        </member>
        <member name="M:SharpMap.Styles.StyleBrush.GetHashCode">
            <summary>
            Generates a hash code for use in hashtables and dictionaries.
            </summary>
            <returns>An integer usable as a hash value in hashtables.</returns>
        </member>
        <member name="P:SharpMap.Styles.StyleBrush.Color">
            <summary>
            Gets or sets the base color of the brush.
            </summary>
        </member>
        <member name="M:SharpMap.Styles.SolidStyleBrush.#ctor(SharpMap.Styles.StyleColor)">
            <summary>
            Creates an instance of a <see cref="T:SharpMap.Styles.SolidStyleBrush"/> with the given color.
            </summary>
            <param name="color">The color of the brush.</param>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.CalculateStyleDelegate">
            <summary>
            Delegate type for a method to compute a linear interpolation between two 
            <see cref="T:SharpMap.Styles.IStyle"/> instances.
            </summary>
            <param name="min">
            Style which represents the minimum end of the interpolation.
            </param>
            <param name="max">
            Style which represents the maximum end of the interpolation.
            </param>
            <param name="weighting">
            Value which determines how much either end participates in the interpolation.
            </param>
            <returns>
            An <see cref="T:SharpMap.Styles.IStyle"/> instance which blends <paramref name="min"/> and 
            <paramref name="max"/>.
            </returns>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.GradientTheme2D">
            <summary>
            The GradientTheme class defines a gradient color 
            thematic rendering of features based by a numeric attribute.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.ITheme">
            <summary>
            Interface for rendering a thematic layer
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.ITheme.GetStyle(SharpMap.Data.IFeatureDataRecord)">
            <summary>
            Returns the style based on a feature.
            </summary>
            <param name="attribute">Attribute to calculate color from.</param>
            <returns>The theme-computed style.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientTheme2D.#ctor(System.String,System.Double,System.Double,SharpMap.Styles.IStyle,SharpMap.Styles.IStyle)">
            <summary>
            Initializes a new instance of the GradientTheme class
            </summary>
            <remarks>
            <para>
            The gradient theme interpolates linearly between two styles based 
            on a numerical attribute in the datasource. This is useful for scaling symbols, 
            line widths, line and fill colors from numerical attributes.
            </para>
            <para>
            Colors are interpolated between two colors, but if you want to interpolate 
            through more colors (fx. a rainbow), set the <see cref="!:TextColorBlend"/>, 
            <see cref="P:SharpMap.Rendering.Thematics.GradientTheme2D.LineColorBlend"/> and <see cref="P:SharpMap.Rendering.Thematics.GradientTheme2D.FillColorBlend"/> properties
            to a custom <see cref="T:SharpMap.Styles.StyleColorBlend"/>.
            </para>
            <para>
            The following properties are scaled (properties not mentioned here are not 
            interpolated):
            <list type="table">
            	<listheader>
                    <term>Property</term>
                    <description>Remarks</description>
                </listheader>
            	<item>
                    <term>
                        <see cref="T:SharpMap.Styles.StyleColor"/>
                    </term>
                    <description>
                        Red, Green, Blue and Alpha values are linearly interpolated.
                    </description>
                </item>
            	<item>
                    <term>
                        <see cref="T:SharpMap.Styles.StylePen"/>
                    </term>
                    <description>
                        The color, width, color of pens are interpolated. 
                        <see cref="P:SharpMap.Styles.StylePen.MiterLimit"/>, 
                        <see cref="P:SharpMap.Styles.StylePen.StartCap"/>, 
                        <see cref="P:SharpMap.Styles.StylePen.EndCap"/>, 
                        <see cref="P:SharpMap.Styles.StylePen.LineJoin"/>, 
                        <see cref="P:SharpMap.Styles.StylePen.DashStyle"/>, 
                        <see cref="P:SharpMap.Styles.StylePen.DashPattern"/>, 
                        <see cref="P:SharpMap.Styles.StylePen.DashOffset"/>, 
                        <see cref="P:SharpMap.Styles.StylePen.DashCap"/>, 
                        <see cref="P:SharpMap.Styles.StylePen.CompoundArray"/>, 
                        and <see cref="P:SharpMap.Styles.StylePen.Alignment"/> 
                        are switched in the middle of the min / max values.
                    </description>
                </item>
            	<item>
                    <term>
                        <see cref="T:SharpMap.Styles.SolidStyleBrush"/>
                    </term>
                    <description>
                        SolidStyleBrush color are interpolated. 
                        Other brushes are not supported.
                    </description>
                </item>
            	<item>
                    <term>
                        <see cref="!:VectorStyle"/>
                    </term>
                    <description>
                        <see cref="!:VectorStyle.MaxVisible"/>, 
                        <see cref="!:VectorStyle.MinVisible"/>, 
                        <see cref="!:VectorStyle.Line"/>, 
                        <see cref="!:VectorStyle.Outline"/>, 
                        <see cref="!:VectorStyle.Fill"/> and 
                        <see cref="!:Symbol.SymbolScale"/>
                        are scaled linearly. 
                        Symbol, EnableOutline and Enabled switch in the middle 
                        of the min/max values.
                    </description>
                </item>
            	<item>  
                    <term>  
                        <see cref="T:SharpMap.Styles.LabelStyle"/>
                    </term>
                    <description>
                        FontSize, BackColor, ForeColor, MaxVisible, MinVisible, Offset 
                        are scaled linearly. All other properties use min-style.
                    </description>
                </item>
            </list>
            </para>
            <example>
            Creating a rainbow colorblend showing colors from red, through yellow, green and blue depicting 
            the population density of a country.
            <code lang="C#">
            //Create two vector styles to interpolate between
            SharpMap.Styles.VectorStyle min = new SharpMap.Styles.VectorStyle();
            SharpMap.Styles.VectorStyle max = new SharpMap.Styles.VectorStyle();
            
            min.Outline.Width = 1f; //Outline width of the minimum value
            max.Outline.Width = 3f; //Outline width of the maximum value
            
            //Create a theme interpolating population density between 0 and 400
            SharpMap.Rendering.Thematics.GradientTheme popdens = new SharpMap.Rendering.Thematics.GradientTheme("PopDens", 0, 400, min, max);
            
            //Set the fill-style colors to be a rainbow blend from red to blue.
            popdens.FillColorBlend = SharpMap.Rendering.Thematics.ColorBlend.Rainbow5;
            myFeatureLayer.Theme = popdens;
            </code>
            </example>
            </remarks>
            <param name="columnName">Name of column to extract the attribute</param>
            <param name="minValue">Minimum value</param>
            <param name="maxValue">Maximum value</param>
            <param name="minStyle">Color for minimum value</param>
            <param name="maxStyle">Color for maximum value</param>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.GradientTheme2D.GetStyle(SharpMap.Data.FeatureDataRow)">
            <summary>
            Returns the style based on a numeric DataColumn, where style
            properties are linearly interpolated between max and min values.
            </summary>
            <param name="row">Feature</param>
            <returns><see cref="T:SharpMap.Styles.IStyle">Style</see> calculated by a linear interpolation between the min/max styles</returns>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme2D.ColumnName">
            <summary>
            Gets or sets the column name from where to get the attribute value
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme2D.Min">
            <summary>
            Gets or sets the minimum value of the gradient
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme2D.Max">
            <summary>
            Gets or sets the maximum value of the gradient
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme2D.MinStyle">
            <summary>
            Gets the <see cref="T:SharpMap.Styles.IStyle">style</see> 
            for the minimum value.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme2D.MaxStyle">
            <summary>
            Gets the <see cref="T:SharpMap.Styles.IStyle">style</see> 
            for the maximum value.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme2D.LineColorBlend">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Styles.StyleColorBlend"/> used on lines.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.GradientTheme2D.FillColorBlend">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Styles.StyleColorBlend"/> used as Fill
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.ILabelRenderer`4">
            <summary>
            Interface to a graphical renderer of label data.
            </summary>
            <typeparam name="TPoint">
            Type of point vector used by the graphical display coordinate system.
            </typeparam>
            <typeparam name="TSize">
            Type of size vector used by the graphical display coordinate system.
            </typeparam>
            <typeparam name="TRectangle">
            Type of rectangle matrix used by the graphical display coordinate system.
            </typeparam>
            <typeparam name="TRenderObject">
            Type of object used by the graphical display coordinate system to render spatial items.
            </typeparam>
        </member>
        <member name="M:SharpMap.Rendering.ILabelRenderer`4.RenderLabel(SharpMap.Rendering.ILabel{`0,`1,`2,SharpMap.Rendering.Path{`0,`2}})">
            <summary>
            Renders a label.
            </summary>
            <param name="label">Label to render.</param>
            <returns>A <typeparamref name="TRenderObject"/> used to draw the label.</returns>
        </member>
        <member name="T:SharpMap.Presentation.Views.IAttributeView">
            <summary>
            Defines a view for attribute data.
            </summary>
        </member>
        <member name="M:SharpMap.Presentation.Views.IAttributeView.SetLayerAttributes(System.String,System.ComponentModel.IBindingList)">
            <summary>
            Sets a layer's attribute source.
            </summary>
            <param name="layer"></param>
            <param name="attributes"></param>
        </member>
        <member name="M:SharpMap.Presentation.Views.IAttributeView.SetHighlightedFeatures(System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Update the view to show the given features on the given layer as selected.
            </summary>
            <param name="layerName">
            Layer to set selected features on.
            </param>
            <param name="featureIndexes">
            Set of indexes of features to set to be selected.
            </param>
        </member>
        <member name="P:SharpMap.Presentation.Views.IAttributeView.Layers">
            <summary>
            Sets the layers to display attributes for.
            </summary>
        </member>
        <member name="E:SharpMap.Presentation.Views.IAttributeView.FeaturesHighlightedChanged">
            <summary>
            Raises an event to request that the controlling presenter
            change the list of selected features shown in this view.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Rendering2D.Path2D">
            <summary>
            Represents a series of figures of connected points in 2D space.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Path`2">
            <summary>
            Represents a series of figures of connected points in an 
            n-dimensional vector space, which is set by generic parameters.
            </summary>
            <typeparam name="TPoint">Type of point used in the path.</typeparam>
            <typeparam name="TViewBounds">Type of rectilinear used to bound the path.</typeparam>
        </member>
        <member name="M:SharpMap.Rendering.Path`2.#ctor">
            <summary>
            Creates a new, empty <see cref="T:SharpMap.Rendering.Path`2"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Path`2.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new, open <see cref="T:SharpMap.Rendering.Path`2"/> 
            with the given points.
            </summary>
            <param name="points">Points to add to the path in sequence.</param>
        </member>
        <member name="M:SharpMap.Rendering.Path`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Creates a new <see cref="T:SharpMap.Rendering.Path`2"/> 
            with the given points, as closed or open.
            </summary>
            <param name="points">
            Points to add to the path in sequence.
            </param>
            <param name="isClosed">
            True to create a closed path, false for an open path.
            </param>
        </member>
        <member name="M:SharpMap.Rendering.Path`2.#ctor(SharpMap.Rendering.Figure{`0,`1})">
            <summary>
            Creates a new <see cref="T:SharpMap.Rendering.Path`2"/> with the given 
            <see cref="T:SharpMap.Rendering.Figure`2"/> instance.
            </summary>
            <param name="figure">A figure to create the path from.</param>
        </member>
        <member name="M:SharpMap.Rendering.Path`2.#ctor(System.Collections.Generic.IEnumerable{SharpMap.Rendering.Figure{`0,`1}})">
            <summary>
            Creates a new <see cref="T:SharpMap.Rendering.Path`2"/> with the given 
            <see cref="T:SharpMap.Rendering.Path`2"/> instances.
            </summary>
            <param name="figures">An enumeration of figures to create the path from.</param>
        </member>
        <member name="M:SharpMap.Rendering.Path`2.ToString">
            <summary>
            Provides a String representation of the 
            <see cref="T:SharpMap.Rendering.Path`2"/>.
            </summary>
            <returns>A String which describes the <see cref="T:SharpMap.Rendering.Path`2"/></returns>
        </member>
        <member name="M:SharpMap.Rendering.Path`2.GetHashCode">
            <summary>
            Returns the hash code for the instance.
            </summary>
            <returns>
            A 32-bit signed integer hash code suitable for use in hash tables.
            </returns>
        </member>
        <member name="M:SharpMap.Rendering.Path`2.Equals(System.Object)">
            <summary>
            Returns true if two <see cref="T:SharpMap.Rendering.Path`2"/> 
            instances are figure-for-figure, point-for-point identical.
            </summary>
            <remarks>
            Casts <paramref name="obj"/> to a <see cref="T:SharpMap.Rendering.Path`2"/> 
            and calls <see cref="M:SharpMap.Rendering.Path`2.Equals(SharpMap.Rendering.Path{`0,`1})"/> with the result.
            </remarks>
            <param name="obj">The value to compare.</param>
            <returns>True if the parameter is a path which is figure-for-figure, point-for-point equal.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Path`2.Equals(SharpMap.Rendering.Path{`0,`1})">
            <summary>
            Returns true if two <see cref="T:SharpMap.Rendering.Path`2"/> instances are figure-for-figure, 
            point-for-point identical.
            </summary>
            <param name="other">The <see cref="T:SharpMap.Rendering.Path`2"/> to compare.</param>
            <returns>True if the two paths are figure-for-figure, point-for-point equal.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Path`2.CreatePath(System.Collections.Generic.IEnumerable{SharpMap.Rendering.Figure{`0,`1}})">
            <summary>
            Creates a <see cref="T:SharpMap.Rendering.Path`2"/> with the given figures.
            </summary>
            <param name="figures">Figures used in creating the path.</param>
            <returns>A new path with the given <paramref name="figures"/>.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Path`2.CreateFigure(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Creates a new <see cref="T:SharpMap.Rendering.Figure`2"/> 
            with the given points, either open or closed.
            </summary>
            <param name="points">Points in the figure.</param>
            <param name="isClosed">
            True if the figure wraps from the last point to the first point, 
            false if it is open.
            </param>
            <returns>A new figure with the given points and open or closed condition.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Path`2.ComputeBounds">
            <summary>
            Computes a minimum bounding box for this path.
            </summary>
            <returns>
            A <typeparamref name="TViewBounds"/> instance which is the minimum 
            bounding n-dimensional rectilinear shape encompassing this path.
            </returns>
        </member>
        <member name="M:SharpMap.Rendering.Path`2.NewFigure(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Creates a new Figure from the given <paramref name="points"/>, 
            either closed or open, and adds it to this path.
            </summary>
            <remarks>
            Also sets the <see cref="P:SharpMap.Rendering.Path`2.CurrentFigure"/> to the added figure.
            </remarks>
            <param name="points">
            Points to make the Figure from.
            </param>
            <param name="closeFigure">True to close the figure, false to keep it open.</param>
        </member>
        <member name="M:SharpMap.Rendering.Path`2.Clone">
            <summary>
            Clones this <see cref="T:SharpMap.Rendering.Path`2"/>.
            </summary>
            <returns>A new Path with identical figures.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Path`2.AddPoint(`0)">
            <summary>
            Adds a point to the current figure, creating one if the path has no figures.
            </summary>
            <param name="point">The <typeparamref name="TPoint"/> to add.</param>
        </member>
        <member name="M:SharpMap.Rendering.Path`2.Clear">
            <summary>
            Removes all elements from <see cref="T:SharpMap.Rendering.Path`2"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Path`2.CloseFigure">
            <summary>
            Closes the current <see cref="T:SharpMap.Rendering.Figure`2"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Path`2.GetEnumerator">
            <summary>
            Enumerates the figures in this path.
            </summary>
            <returns>An enumerator over this path's <see cref="T:SharpMap.Rendering.Figure`2">figures</see>.</returns>
        </member>
        <member name="P:SharpMap.Rendering.Path`2.Figures">
            <summary>
            Gets a list of the <see cref="T:SharpMap.Rendering.Figure`2"/> in this path.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Path`2.Points">
            <summary>
            Gets the points in the <see cref="P:SharpMap.Rendering.Path`2.CurrentFigure"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Path`2.CurrentFigure">
            <summary>
            Gets or sets the current figure in the path.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Path`2.Bounds">
            <summary>
            Gets the bounds of the path.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Path`2.EmptyBounds">
            <summary>
            Gets a value indicating an empty bounds shape.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Path2D.#ctor">
            <summary>
            Creates a new empty <see cref="T:SharpMap.Rendering.Rendering2D.Path2D"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Path2D.#ctor(System.Collections.Generic.IEnumerable{SharpMap.Rendering.Rendering2D.Point2D})">
            <summary>
            Creates a new, open <see cref="T:SharpMap.Rendering.Rendering2D.Path2D"/> with the given points.
            </summary>
            <param name="points">Points to add to the path in sequence.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Path2D.#ctor(System.Collections.Generic.IEnumerable{SharpMap.Rendering.Rendering2D.Point2D},System.Boolean)">
            <summary>
            Creates a new <see cref="T:SharpMap.Rendering.Rendering2D.Path2D"/> with the given points, as closed or open.
            </summary>
            <param name="points">Points to add to the path in sequence.</param>
            <param name="closeFigure">True to create a closed path, false for an open path.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Path2D.#ctor(SharpMap.Rendering.Rendering2D.Figure2D)">
            <summary>
            Creates a new <see cref="T:SharpMap.Rendering.Rendering2D.Path2D"/> with the given 
            <see cref="T:SharpMap.Rendering.Rendering2D.Figure2D"/> instance.
            </summary>
            <param name="figure">A figure to create the path from.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Path2D.#ctor(System.Collections.Generic.IEnumerable{SharpMap.Rendering.Rendering2D.Figure2D})">
            <summary>
            Creates a new <see cref="T:SharpMap.Rendering.Rendering2D.Path2D"/> with the given 
            <see cref="T:SharpMap.Rendering.Rendering2D.Figure2D"/> instances.
            </summary>
            <param name="figures">An enumeration of figures to create the path from.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Path2D.CreatePath(System.Collections.Generic.IEnumerable{SharpMap.Rendering.Figure{SharpMap.Rendering.Rendering2D.Point2D,SharpMap.Rendering.Rendering2D.Rectangle2D}})">
            <summary>
            Creates a new Path with one figure for each of the 
            figures in the give enumeration of <paramref name="figures"/>.
            </summary>
            <param name="figures">Figures to make the Path from.</param>
            <returns>A Path instance with one figure for each of the Figure 
            instances in the given enumeration.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Path2D.CreateFigure(System.Collections.Generic.IEnumerable{SharpMap.Rendering.Rendering2D.Point2D},System.Boolean)">
            <summary>
            Creates a new Figure from the given <paramref name="points"/>, 
            either open or closed.
            </summary>
            <param name="points">Points to use in the figure.</param>
            <param name="closeFigure">True to close the figure, false to leave it open.</param>
            <returns>A Figure instance made from the given points.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Path2D.ComputeBounds">
            <summary>
            Computes the <see cref="!:Figure2D.Bounds"/> for this <see cref="T:SharpMap.Rendering.Rendering2D.Path2D"/>.
            </summary>
            <returns>A <see cref="T:SharpMap.Rendering.Rendering2D.Rectangle2D"/> which describes the minimum bounding rectangle for this path.</returns>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Path2D.EmptyBounds">
            <summary>
            Gets the empty bounds shape: <see cref="F:SharpMap.Rendering.Rendering2D.Rectangle2D.Empty"/>.
            </summary>
        </member>
        <member name="T:SharpMap.Styles.FeatureStyle">
            <summary>
            Defines a style used for rendering features.
            </summary>
        </member>
        <member name="T:SharpMap.Styles.Style">
            <summary>
            Defines a style used for for defining layer styles.
            </summary>
        </member>
        <member name="T:SharpMap.Styles.IStyle">
            <summary>
            Defines an interface for defining layer styles.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.IStyle.MinVisible">
            <summary>
            Gets or sets the minimum zoom value where the style is applied.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.IStyle.MaxVisible">
            <summary>
            Gets or sets the maximum zoom value where the style is applied.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.IStyle.Enabled">
            <summary>
            Gets or sets whether objects in this style is rendered or not.
            </summary>
        </member>
        <member name="M:SharpMap.Styles.Style.#ctor">
            <summary>
            Initializes a style as sets Min = 0, Max = Double.PositiveInfinity and Visible = true
            </summary>
        </member>
        <member name="P:SharpMap.Styles.Style.MinVisible">
            <summary>
            Gets or sets the minimum zoom value where the style is applied
            </summary>
        </member>
        <member name="P:SharpMap.Styles.Style.MaxVisible">
            <summary>
            Gets or sets the maximum zoom value where the style is applied
            </summary>
        </member>
        <member name="P:SharpMap.Styles.Style.Enabled">
            <summary>
            Specified whether style is rendered or not
            </summary>
        </member>
        <member name="P:SharpMap.Styles.FeatureStyle.RenderingMode">
            <summary>
            Gets or sets whether smoothing (anti-aliasing or ClearType) is applied to lines 
            and curves and the edges of filled areas.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.FeatureStyle.AreFeaturesSelectable">
            <summary>
            Gets or sets a value to determine if features can 
            be selected on this layer.
            </summary>
        </member>
        <member name="T:SharpMap.Expressions.SpatialAnalysisDistanceExpression">
            <summary>
            An SpatialAnalysisExpression which calculates the distance between two GeometryExpressions
            </summary>
        </member>
        <member name="T:SharpMap.Data.FeatureMerger">
            <summary>
            Represents a merger of two <see cref="T:SharpMap.Data.FeatureDataTable"/> instances.
            </summary>
        </member>
        <member name="T:SharpMap.Data.RasterDataView">
            <summary>
            NOTE: this class is just an experimental attempt to express a view on 
            raster data. It _will_ change.
            </summary>
        </member>
        <member name="M:SharpMap.Data.RasterDataView.Flush">
             <summary>
             When overridden in a derived class, clears all buffers for 
             this stream and causes any buffered data to be written to 
             the underlying device.
             </summary>
            
             <exception cref="T:System.IO.IOException">
             An I/O error occurs.
             </exception>
             <filterpriority>2</filterpriority>
        </member>
        <member name="M:SharpMap.Data.RasterDataView.Seek(System.Int64,System.IO.SeekOrigin)">
             <summary>
             When overridden in a derived class, sets the position within the current stream.
             </summary>
            
             <returns>
             The new position within the current stream.
             </returns>
            
             <param name="offset">
             A Byte offset relative to the origin parameter.
             </param>
             <param name="origin">
             A value of type <see cref="T:System.IO.SeekOrigin"></see> indicating the 
             reference point used to obtain the new position.
             </param>
             <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
             <exception cref="T:System.NotSupportedException">
             The stream does not support seeking, such as if the stream is 
             constructed from a pipe or console output.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
             Methods were called after the stream was closed. 
             </exception>
             <filterpriority>1</filterpriority>
        </member>
        <member name="M:SharpMap.Data.RasterDataView.SetLength(System.Int64)">
             <summary>
             When overridden in a derived class, sets the length of the current stream.
             </summary>
            
             <param name="value">The desired length of the current stream in bytes. </param>
             <exception cref="T:System.NotSupportedException">
             The stream does not support both writing and seeking, such as if the stream 
             is constructed from a pipe or console output.
             </exception>
             <exception cref="T:System.IO.IOException">
             An I/O error occurs.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
             Methods were called after the stream was closed.
             </exception>
             <filterpriority>2</filterpriority>
        </member>
        <member name="M:SharpMap.Data.RasterDataView.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             When overridden in a derived class, reads a sequence of bytes 
             from the current stream and advances the position within the stream 
             by the number of bytes read.
             </summary>
            
             <returns>
             The total number of bytes read into the buffer. This can be less than 
             the number of bytes requested if that many bytes are not currently available, 
             or zero (0) if the end of the stream has been reached.
             </returns>
            
             <param name="offset">
             The zero-based Byte offset in buffer at which to begin storing the 
             data read from the current stream.
             </param>
             <param name="count">
             The maximum number of bytes to be read from the current stream.
             </param>
             <param name="buffer">
             An array of bytes. When this method returns, the buffer contains the 
             specified Byte array with the values between offset and (offset + count - 1) 
             replaced by the bytes read from the current source.
             </param>
             <exception cref="T:System.ArgumentException">
             The sum of offset and count is larger than the buffer length.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
             Methods were called after the stream was closed.
             </exception>
             <exception cref="T:System.NotSupportedException">
             The stream does not support reading.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="buffer "/> is null.
             </exception>
             <exception cref="T:System.IO.IOException">
             An I/O error occurs.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="offset"/> or <paramref name="count"/> is negative.
             </exception>
             <filterpriority>1</filterpriority>
        </member>
        <member name="M:SharpMap.Data.RasterDataView.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
             When overridden in a derived class, writes a sequence of bytes to the current 
             stream and advances the current position within this stream by the number of 
             bytes written.
             </summary>
            
             <param name="offset">
             The zero-based Byte offset in buffer at which to begin copying 
             bytes to the current stream.
             </param>
             <param name="count">
             The number of bytes to be written to the current stream.
             </param>
             <param name="buffer">
             An array of bytes. This method copies count bytes from buffer to the current stream.
             </param>
             <exception cref="T:System.IO.IOException">
             An I/O error occurs. 
             </exception>
             <exception cref="T:System.NotSupportedException">
             The stream does not support writing.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
             Methods were called after the stream was closed.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="buffer"/> is null. 
             </exception>
             <exception cref="T:System.ArgumentException">
             The sum of <paramref name="offset"/> and <paramref name="count"/> 
             is greater than the buffer length. 
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             <paramref name="offset"/> or <paramref name="count"/> is negative. 
             </exception>
             <filterpriority>1</filterpriority>
        </member>
        <member name="P:SharpMap.Data.RasterDataView.CanRead">
             <summary>
             When overridden in a derived class, gets a value indicating whether the 
             current stream supports reading.
             </summary>
            
             <returns>
             true if the stream supports reading; otherwise, false.
             </returns>
             <filterpriority>1</filterpriority>
        </member>
        <member name="P:SharpMap.Data.RasterDataView.CanSeek">
             <summary>
             When overridden in a derived class, gets a value indicating whether the 
             current stream supports seeking.
             </summary>
            
             <returns>
             true if the stream supports seeking; otherwise, false.
             </returns>
             <filterpriority>1</filterpriority>
        </member>
        <member name="P:SharpMap.Data.RasterDataView.CanWrite">
             <summary>
             When overridden in a derived class, gets a value indicating whether the 
             current stream supports writing.
             </summary>
            
             <returns>
             true if the stream supports writing; otherwise, false.
             </returns>
             <filterpriority>1</filterpriority>
        </member>
        <member name="P:SharpMap.Data.RasterDataView.Length">
             <summary>
             When overridden in a derived class, gets the length in bytes of the stream.
             </summary>
            
             <returns>
             A Int64 value representing the length of the stream in bytes.
             </returns>
            
             <exception cref="T:System.NotSupportedException">
             A class derived from Stream does not support seeking. 
             </exception>
             <exception cref="T:System.ObjectDisposedException">
             Methods were called after the stream was closed. 
             </exception>
             <filterpriority>1</filterpriority>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SharpMap.Data.RasterDataView.Position" -->
        <member name="T:SharpMap.Styles.LineDashCap">
            <summary>
            Describes how to form the end of a dash in a drawn line.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LineDashCap.Flat">
            <summary>
            Makes the cap of the dash flat, so it is square to the sides of the dash.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LineDashCap.Round">
            <summary>
            Makes the cap of the dash rounded, so it forms an arc from the sides
            of the dash.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LineDashCap.Triangle">
            <summary>
            Makes each side of the cap of the dash an obtuse angle 
            from the side of the dash, so a triangle is formed for the cap
            when they meet.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Rendering2D.LabelCollisionDetection2D">
            <summary>
            Class defining delegate for label collision detection and static predefined methods
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.LabelCollisionDetection2D.SimpleCollisionTest(SharpMap.Rendering.Rendering2D.Label2D)">
            <summary>
            Test whether label collides.
            </summary>
            <param name="newLabel"></param>
            <returns>true if label collided with another (more important or earlier) label</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.LabelCollisionDetection2D.AdvancedCollisionTest(SharpMap.Rendering.Rendering2D.Label2D)">
            <summary>
            Test whether label collides.
            </summary>
            <param name="newLabel"></param>
            <returns>true if label collided with another (more important or earlier) label</returns>
        </member>
        <member name="T:SharpMap.Presentation.Presenters.FeatureLayersListenerPresenter`1">
            <summary>
            Provides functionality for a presenter which listens to <see cref="E:System.ComponentModel.IBindingList.ListChanged"/>
            events from <see cref="P:SharpMap.Layers.FeatureLayer.SelectedFeatures"/> and <see cref="P:SharpMap.Layers.FeatureLayer.HighlightedFeatures"/>.
            </summary>
            <typeparam name="TView">Type of view to manage.</typeparam>
        </member>
        <member name="T:SharpMap.Presentation.Presenters.MapLayersListenerPresenter`1">
            <summary>
            
            </summary>
            <typeparam name="TView">Type of view to manage.</typeparam>
        </member>
        <member name="T:SharpMap.Presentation.Presenters.BasePresenter`1">
            <summary>
            The base presenter for map views.
            </summary>
            <typeparam name="TView">Type of view to manage.</typeparam>
        </member>
        <member name="M:SharpMap.Presentation.Presenters.BasePresenter`1.#ctor(SharpMap.Map,`0)">
            <summary>
            Constructs a new presenter with the given map and view.
            </summary>
            <param name="map">The map model.</param>
            <param name="view">The view to keep synchronized with the model and to accept input from.</param>
        </member>
        <member name="M:SharpMap.Presentation.Presenters.BasePresenter`1.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:SharpMap.Presentation.Presenters.BasePresenter`1.Dispose">
            <summary>
            Releases all resources deterministically.
            </summary>
        </member>
        <member name="M:SharpMap.Presentation.Presenters.BasePresenter`1.Dispose(System.Boolean)">
            <summary>
            Releases all resources, and removes from finalization 
            queue if <paramref name="disposing"/> is true.
            </summary>
            <param name="disposing">
            True if being called deterministically, false if being called from finalizer.
            </param>
        </member>
        <member name="P:SharpMap.Presentation.Presenters.BasePresenter`1.IsDisposed">
            <summary>
            Gets whether this presenter is disposed, and no longer accessible.
            </summary>
        </member>
        <member name="E:SharpMap.Presentation.Presenters.BasePresenter`1.Disposed">
            <summary>
            Event fired when the presenter is disposed.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Presenters.BasePresenter`1.Map">
            <summary>
            The map to present.
            </summary>
            <remarks>
            This is the model which is kept synchronized to the view, 
            and which input on the view modifies through this presenter.
            </remarks>
        </member>
        <member name="P:SharpMap.Presentation.Presenters.BasePresenter`1.View">
            <summary>
            The view used to accept input and keep synchronized with the <see cref="P:SharpMap.Presentation.Presenters.BasePresenter`1.Map">model</see>.
            </summary>
        </member>
        <member name="T:SharpMap.Layers.IFeatureLayer">
            <summary>
            Interface to a layer of features in a <see cref="T:SharpMap.Map"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.IFeatureLayer.DataSource">
            <summary>
            Gets the data source for this layer as a more 
            strongly-typed <see cref="T:SharpMap.Data.IFeatureProvider"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.IFeatureLayer.Features">
            <summary>
            Gets a <see cref="T:SharpMap.Data.FeatureDataTable"/> of cached features for the layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.IFeatureLayer.HighlightedFeatures">
            <summary>
            Gets a <see cref="T:SharpMap.Data.FeatureDataView"/> of features which have been 
            highlighted.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.IFeatureLayer.Locale">
            <summary>
            Gets the <see cref="T:System.Globalization.CultureInfo"/> used to encode text
            and format numbers for this layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.IFeatureLayer.SelectedFeatures">
            <summary>
            Gets a <see cref="T:SharpMap.Data.FeatureDataView"/> of features which have been 
            selected.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.IFeatureLayer.Theme">
            <summary>
            Gets or sets the theme used to generate styles for rendered features.
            </summary>
        </member>
        <member name="T:SharpMap.Expressions.SpatialOperation">
            <summary>
            Indicates the type of spatial query to execute.
            </summary>
            <remarks>
            See section 6.1.15 Relational operators in Open Geospatial Consortium's Simple Features Access 
            (reference number: OGC 06-103r3) for more careful definitions of these terms.
            </remarks>
        </member>
        <member name="F:SharpMap.Expressions.SpatialOperation.None">
            <summary>
            No spatial relation. Returns an empty set.
            </summary>
        </member>
        <member name="F:SharpMap.Expressions.SpatialOperation.Contains">
            <summary>
            A query for geometries which are spatially contained in the query geometry.
            </summary>
        </member>
        <member name="F:SharpMap.Expressions.SpatialOperation.Crosses">
            <summary>
            A query for geometries which spatially cross the query geometry.
            </summary>
        </member>
        <member name="F:SharpMap.Expressions.SpatialOperation.Disjoint">
            <summary>
            A query for geometries which are spatially disjoint from the query geometry.
            </summary>
        </member>
        <member name="F:SharpMap.Expressions.SpatialOperation.Equals">
            <summary>
            A query for geometries which are spatially equal to the query geometry.
            </summary>
        </member>
        <member name="F:SharpMap.Expressions.SpatialOperation.Intersects">
            <summary>
            A query for geometries which spatially intersect the query geometry.
            </summary>
        </member>
        <member name="F:SharpMap.Expressions.SpatialOperation.Overlaps">
            <summary>
            A query for geometries which spatially overlap the query geometry.
            </summary>
        </member>
        <member name="F:SharpMap.Expressions.SpatialOperation.Touches">
            <summary>
            A query for geometries which spatially touch the query geometry.
            </summary>
        </member>
        <member name="F:SharpMap.Expressions.SpatialOperation.Within">
            <summary>
            A query for geometries which are spatially within the query geometry.
            </summary>
        </member>
        <member name="T:SharpMap.Data.SchemaMergeAction">
            <summary>
            Specifies how to merge schema when <see cref="T:SharpMap.Data.FeatureDataTable"/> instances or
            <see cref="T:SharpMap.Data.FeatureDataSet"/> instances are merged.
            </summary>
        </member>
        <member name="F:SharpMap.Data.SchemaMergeAction.None">
            <summary>
            Specifies that schema information should not be merged. If schema
            differs and data doesn't match, an exception will probably be thrown.
            </summary>
        </member>
        <member name="F:SharpMap.Data.SchemaMergeAction.AddNonKey">
            <summary>
            Adds any non key columns (columns not in <see cref="P:System.Data.DataTable.PrimaryKey"/>)
             from the source to the target if missing.
            </summary>
        </member>
        <member name="F:SharpMap.Data.SchemaMergeAction.AddKey">
            <summary>
            Adds any key columns (columns in <see cref="P:System.Data.DataTable.PrimaryKey"/>)
            from the source to the target if missing.
            </summary>
        </member>
        <member name="F:SharpMap.Data.SchemaMergeAction.AddAll">
            <summary>
            Adds all columns from the source to the target if missing.
            </summary>
        </member>
        <member name="F:SharpMap.Data.SchemaMergeAction.AddWithKey">
            <summary>
            Adds all columns from the source to the target if missing, and
            adds any key information from the source to the target if missing.
            </summary>
        </member>
        <member name="F:SharpMap.Data.SchemaMergeAction.Replace">
            <summary>
            Replaces the schema in the target by converting columns to a type
            which supports both source data and target data, if possible.
            </summary>
        </member>
        <member name="F:SharpMap.Data.SchemaMergeAction.Key">
            <summary>
            Merges the <see cref="P:System.Data.DataTable.PrimaryKey"/> array.
            </summary>
        </member>
        <member name="F:SharpMap.Data.SchemaMergeAction.KeyByType">
            <summary>
            Matches <see cref="P:System.Data.DataTable.PrimaryKey"/> columns if their type matches, 
            regardless of the column names.
            </summary>
        </member>
        <member name="F:SharpMap.Data.SchemaMergeAction.CaseInsensitive">
            <summary>
            Matches columns by their names in a case-insensitive manner.
            </summary>
        </member>
        <member name="F:SharpMap.Data.SchemaMergeAction.MatchIfConvertible">
            <summary>
            Allows columns to be matched if the names are the same and the type of 
            the source column has a conversion to the type of the target column, 
            otherwise column types need to be identical to match.
            </summary>
        </member>
        <member name="M:SharpMap.Utilities.SridUtility.SridMapStrategyBase.Process(GeoAPI.CoordinateSystems.ICoordinateSystem,System.Nullable{System.Int32}@)">
            <summary>
            Attempts to locate the integer id from the Coordinate System
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.SridUtility.SridMapStrategyBase.Process(GeoAPI.CoordinateSystems.ICoordinateSystem,System.String@)">
            <summary>
            attempts to return the wkt representing the coordinate system
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.SridUtility.SridMapStrategyBase.Process(System.Nullable{System.Int32},GeoAPI.CoordinateSystems.ICoordinateSystem@)">
            <summary>
            attempts to locate the coordinate system from the integer id
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.SridUtility.SridMapStrategyBase.Process(System.Nullable{System.Int32},System.String@)">
            <summary>
            attempts to get the wkt representing the coordinate system from the integer id
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Utilities.SridUtility.SridMapStrategyBase.Process(System.String,System.Nullable{System.Int32}@)">
            <summary>
            attempts to locate the integer id from the wkt representing the coordinate system
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Presentation.Presenters.LayersPresenter">
            <summary>
            Provides a presenter for the layers of a <see cref="T:SharpMap.Map"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Presentation.Presenters.LayersPresenter.#ctor(SharpMap.Map,SharpMap.Presentation.Views.ILayersView)">
            <summary>
            Creates a new instance of a <see cref="T:SharpMap.Presentation.Presenters.LayersPresenter"/> with the given <see cref="T:SharpMap.Map"/>
            instance and the given concrete <see cref="T:SharpMap.Presentation.Views.ILayersView"/> implementation.
            </summary>
            <param name="map">Map to present.</param>
            <param name="view">View to present to.</param>
        </member>
        <member name="T:SharpMap.Presentation.Presenters.AttributePresenter">
            <summary>
            Manages views of attribute data and coordinates layer attribute interaction.
            </summary>
        </member>
        <member name="M:SharpMap.Presentation.Presenters.AttributePresenter.#ctor(SharpMap.Map,SharpMap.Presentation.Views.IAttributeView)">
            <summary>
            Creates a new <see cref="T:SharpMap.Presentation.Presenters.AttributePresenter"/> with the given map and view.
            </summary>
            <param name="map">The map model to observe and control.</param>
            <param name="view">The view to use to display attribute data.</param>
        </member>
        <member name="T:SharpMap.Presentation.ViewSelection2D">
            <summary>
            A representation of a selection on a 2D view surface.
            </summary>
        </member>
        <member name="M:SharpMap.Presentation.ViewSelection2D.ToString">
            <summary>
            Returns a String description of the <see cref="T:SharpMap.Presentation.ViewSelection2D"/>.
            </summary>
            <returns>A String which describes the <see cref="T:SharpMap.Presentation.ViewSelection2D"/>.</returns>
        </member>
        <member name="M:SharpMap.Presentation.ViewSelection2D.SelectRectangle(SharpMap.Rendering.Rendering2D.Point2D,SharpMap.Rendering.Rendering2D.Size2D)">
            <summary>
            Creates a rectangular selection.
            </summary>
            <param name="upperLeft">The upper left point of the rectangle.</param>
            <param name="size">The size of the rectangle.</param>
            <returns>
            A ViewSelection2D rectangular selection with upper left corner at 
            <paramref name="upperLeft"/> and the given <paramref name="size"/>.
            </returns>
        </member>
        <member name="T:SharpMap.Rendering.Rendering2D.Point2D">
            <summary>
            A point in 2 dimensional Cartesian space.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Point2D.Equals(NPack.Interfaces.IMatrix{NPack.DoubleComponent})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
            
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Point2D.NPack#Interfaces#IAddable{NPack#Interfaces#IMatrix{NPack#DoubleComponent}}#Add(NPack.Interfaces.IMatrix{NPack.DoubleComponent})">
            <summary>
            Returns the sum of the object and <paramref name="b"/>.
            It must not modify the value of the object.
            </summary>
            <param name="b">The second operand.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Point2D.NPack#Interfaces#ISubtractable{NPack#Interfaces#IMatrix{NPack#DoubleComponent}}#Subtract(NPack.Interfaces.IMatrix{NPack.DoubleComponent})">
            <summary>
            Returns the difference of the object and <paramref name="b"/>.
            It must not modify the value of the object.
            </summary>
            <param name="b">The second operand.</param>
            <returns>The difference.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Point2D.NPack#Interfaces#INegatable{NPack#Interfaces#IMatrix{NPack#DoubleComponent}}#Negative">
            <summary>
            Returns the negative of the object. Must not modify the object itself.
            </summary>
            <returns>The negative.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Point2D.NPack#Interfaces#IMultipliable{NPack#Interfaces#IMatrix{NPack#DoubleComponent}}#Multiply(NPack.Interfaces.IMatrix{NPack.DoubleComponent})">
            <summary>
            Returns the product of the object and <paramref name="b"/>.
            It must not modify the value of the object.
            </summary>
            <param name="b">The second operand.</param>
            <returns>The product.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Point2D.NPack#Interfaces#IDivisible{NPack#Interfaces#IMatrix{NPack#DoubleComponent}}#Divide(NPack.Interfaces.IMatrix{NPack.DoubleComponent})">
            <summary>
            Returns the quotient of the object and <paramref name="b"/>.
            It must not modify the value of the object.
            </summary>
            <param name="b">The second operand.</param>
            <returns>The quotient.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Point2D.System#Collections#Generic#IEnumerable{NPack#DoubleComponent}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Point2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#Clone">
            <summary>
            Makes an element-by-element copy of the matrix.
            </summary>
            <returns>An exact copy of the matrix.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Point2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#GetMatrix(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Gets a submatrix.
            </summary>
            <param name="rowIndexes">The indexes of the rows to include.</param>
            <param name="j0">The starting column to include.</param>
            <param name="j1">The ending column to include.</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Point2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#Transpose">
            <summary>
            Returns the transpose of the matrix.
            </summary>
            <returns>The matrix with the rows as columns and columns as rows.</returns>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Point2D.NPack#Interfaces#IVector{NPack#DoubleComponent}#Components">
            <summary>
            Gets or sets the vector component array.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Point2D.NPack#Interfaces#IHasZero{NPack#Interfaces#IMatrix{NPack#DoubleComponent}}#Zero">
            <summary>
            Returns the additive identity.
            </summary>
            <value>e</value>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Point2D.NPack#Interfaces#IHasOne{NPack#Interfaces#IMatrix{NPack#DoubleComponent}}#One">
            <summary>
            Returns the multiplicative identity.
            </summary>
            <value>e</value>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Point2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#Determinant">
            <summary>
            Gets the determinant for the matrix, if it exists.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Point2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#ColumnCount">
            <summary>
            Gets the number of columns in the matrix.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Point2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#IsSingular">
            <summary>
            Gets true if the matrix is singular (non-invertable).
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Point2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#IsInvertible">
            <summary>
            Gets true if the matrix is invertable (non-singluar).
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Point2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#Inverse">
            <summary>
            Gets the inverse of the matrix, if one exists.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Point2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#IsSquare">
            <summary>
            Gets true if the matrix is square (<c>RowCount == ColumnCount != 0</c>).
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Point2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#IsSymmetrical">
            <summary>
            Gets true if the matrix is symmetrical.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Point2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#RowCount">
            <summary>
            Gets the number of rows in the matrix.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Point2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets an element in the matrix.
            </summary>
            <param name="row">The index of the row of the element.</param>
            <param name="column">The index of the column of the element.</param>
            <returns>The value of the element at the given index.</returns>
        </member>
        <member name="T:SharpMap.Rendering.Rendering2D.Rectangle2D">
            <summary>
            Represents an axis-aligned 2D rectangle in screen coordinates.
            </summary>
            <remarks>
            Since the Rectangle2D is in screen coordinates, the <see cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Top"/> 
            property is less than the <see cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Bottom"/> property when the <see cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Height"/>
            is positive, and Bottom is less than Top when the Height is negative.
            </remarks>
        </member>
        <member name="F:SharpMap.Rendering.Rendering2D.Rectangle2D.Empty">
            <summary>
            An empty Rectangle2D, having no value.
            </summary>
        </member>
        <member name="F:SharpMap.Rendering.Rendering2D.Rectangle2D.Zero">
            <summary>
            A Rectangle2D with zero height and zero width centered at (0, 0).
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new Rectangle2D with the given values for the sides.
            </summary>
            <param name="left">The X value of the left side.</param>
            <param name="top">The Y value of the top side.</param>
            <param name="right">The X value of the right side.</param>
            <param name="bottom">The Y value of the bottom side.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.#ctor(SharpMap.Rendering.Rendering2D.Point2D,SharpMap.Rendering.Rendering2D.Size2D)">
            <summary>
            Creates a new Rectangle2D with the upper-left at
            <paramref name="location"/>, and the given <paramref name="size"/>.
            </summary>
            <param name="location">The upper-left point of the Rectangle2D.</param>
            <param name="size">The size of the Rectangle2D.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.CompareTo(SharpMap.Rendering.Rendering2D.Rectangle2D)">
            <summary>
            Compares this <see cref="T:SharpMap.Rendering.Rendering2D.Rectangle2D"/> instance with another instance.
            </summary>
            <remarks>
            The comparison for non-intersecting rectangles is computed by determining where 
            the top-left corner of the <paramref name="other"/> rectangle is in relation 
            to the one CompareTo is called on. The following diagram shows which value is 
            returned depending on the location of the top-left corner of the other rectangle:
            <pre>
            
                             +1
            
                                       +--------------------------------------------
                                       |              |
                                       |              |
                                       |              |
                                       |              |
                                       |              |
                                       |--------------+
                                       |
                                       |
                                       |                      -1
                                       |
                                       |
            </pre>
            Any intersecting rectangle returns a 0, regardless of the position of the top-left corner.
            </remarks>
            <param name="other">Rectangle2D to perform comparison with.</param>
            <returns>
            Returns 0 if the <see cref="T:SharpMap.Rendering.Rendering2D.Rectangle2D"/> instances intersect each other,
            1 if this rectangle is located to the right or downward from the <paramref name="other"/>
            rectangle, and -1 if this rectangle is located to the left or upward from the other.
            </returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.Intersects(SharpMap.Rendering.Rendering2D.Rectangle2D)">
            <summary>
            Determines whether this <see cref="T:SharpMap.Rendering.Rendering2D.Rectangle2D"/> intersects another.
            </summary>
            <param name="rectangle"><see cref="T:SharpMap.Rendering.Rendering2D.Rectangle2D"/> to check intersection with.</param>
            <returns>True if there is intersection, false if not.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.Add(NPack.Interfaces.IMatrix{NPack.DoubleComponent})">
            <summary>
            Returns the sum of the object and <paramref name="b"/>.
            It must not modify the value of the object.
            </summary>
            <param name="b">The second operand.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.Subtract(NPack.Interfaces.IMatrix{NPack.DoubleComponent})">
            <summary>
            Returns the difference of the object and <paramref name="b"/>.
            It must not modify the value of the object.
            </summary>
            <param name="b">The second operand.</param>
            <returns>The difference.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.Negative">
            <summary>
            Returns the negative of the object. Must not modify the object itself.
            </summary>
            <returns>The negative.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#IMultipliable{NPack#Interfaces#IMatrix{NPack#DoubleComponent}}#Multiply(NPack.Interfaces.IMatrix{NPack.DoubleComponent})">
            <summary>
            Returns the product of the object and <paramref name="b"/>.
            It must not modify the value of the object.
            </summary>
            <param name="b">The second operand.</param>
            <returns>The product.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.Divide(NPack.Interfaces.IMatrix{NPack.DoubleComponent})">
            <summary>
            Returns the quotient of the object and <paramref name="b"/>.
            It must not modify the value of the object.
            </summary>
            <param name="b">The second operand.</param>
            <returns>The quotient.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#Clone">
            <summary>
            Makes an element-by-element copy of the matrix.
            </summary>
            <returns>An exact copy of the matrix.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#GetMatrix(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Gets a submatrix.
            </summary>
            <param name="rowIndexes">The indexes of the rows to include.</param>
            <param name="j0">The starting column to include.</param>
            <param name="j1">The ending column to include.</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#Transpose">
            <summary>
            Returns the transpose of the matrix.
            </summary>
            <returns>The matrix with the rows as columns and columns as rows.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.Scale(NPack.DoubleComponent)">
            <summary>
            Scales the matrix by the given <paramref name="amount"/> in all orthoganal columns.
            </summary>
            <param name="amount">Amount to scale by.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.Scale(NPack.Interfaces.IVector{NPack.DoubleComponent})">
            <summary>
            Scales the matrix by the given vector <paramref name="scaleVector"/>.
            </summary>
            <param name="scaleVector">
            A vector with scaling components which 
            correspond to the affine transform dimensions.
            </param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.Translate(NPack.DoubleComponent)">
            <summary>
            Translates the affine transform by the given amount in each dimension.
            </summary>
            <param name="amount">Amount to translate by.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.Translate(NPack.Interfaces.IVector{NPack.DoubleComponent})">
            <summary>
            Translates the affine transform by the given translation vector.
            </summary>
            <param name="translateVector">
            A vector whose components will translate the transform 
            in the corresponding dimension.
            </param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#IAffineTransformMatrix{NPack#DoubleComponent}#Reset">
            <summary>
            Resets the affine transform to the identity matrix (a diagonal of one).
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#ITransformMatrix{NPack#DoubleComponent}#Shear(NPack.Interfaces.IVector{NPack.DoubleComponent})">
            <summary>
            Applies a shear to the transform.
            </summary>
            <param name="shearVector">The vector used to compute the shear.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#ITransformMatrix{NPack#DoubleComponent}#Shear(NPack.Interfaces.IVector{NPack.DoubleComponent},NPack.MatrixOperationOrder)">
            <summary>
            Applies a shear to the transform.
            </summary>
            <param name="shearVector">The vector used to compute the shear.</param>
            <param name="order">Order in which to apply the operation.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#ITransformMatrix{NPack#DoubleComponent}#RotateAlong(NPack.Interfaces.IVector{NPack.DoubleComponent},System.Double)">
            <summary>
            Rotates the affine transform around the given <paramref name="axis"/>.
            </summary>
            <param name="axis">
            The axis to rotate around. May be an addition of the basis vectors.
            </param>
            <param name="radians">Angle to rotate through.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#ITransformMatrix{NPack#DoubleComponent}#RotateAlong(NPack.Interfaces.IVector{NPack.DoubleComponent},System.Double,NPack.MatrixOperationOrder)">
            <summary>
            Rotates the affine transform around the given <paramref name="axis"/>.
            </summary>
            <param name="axis">
            The axis to rotate around. May be an addition of the basis vectors.
            </param>
            <param name="radians">Angle to rotate through.</param>
            <param name="order">Order in which to apply the operation.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#IAffineTransformMatrix{NPack#DoubleComponent}#RotateAt(NPack.Interfaces.IVector{NPack.DoubleComponent},NPack.Interfaces.IVector{NPack.DoubleComponent},System.Double)">
            <summary>
            Rotates the affine transform around the given <paramref name="axis"/> 
            at the given <paramref name="point"/>.
            </summary>
            <param name="point">Point at which to compute the rotation.</param>
            <param name="axis">The axis to rotate around.</param>
            <param name="radians">Angle to rotate through.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#IAffineTransformMatrix{NPack#DoubleComponent}#RotateAt(NPack.Interfaces.IVector{NPack.DoubleComponent},NPack.Interfaces.IVector{NPack.DoubleComponent},System.Double,NPack.MatrixOperationOrder)">
            <summary>
            Rotates the affine transform around the given <paramref name="axis"/> 
            at the given <paramref name="point"/>.
            </summary>
            <param name="point">Point at which to compute the rotation.</param>
            <param name="axis">The axis to rotate around.</param>
            <param name="radians">Angle to rotate through.</param>
            <param name="order">Order in which to apply the operation.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#ITransformMatrix{NPack#DoubleComponent}#Scale(NPack.DoubleComponent,NPack.MatrixOperationOrder)">
            <summary>
            Scales the matrix by the given <paramref name="amount"/> in all orthoganal columns.
            </summary>
            <param name="amount">Amount to scale by.</param>
            <param name="order">Order in which to apply the operation.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#ITransformMatrix{NPack#DoubleComponent}#Scale(NPack.Interfaces.IVector{NPack.DoubleComponent},NPack.MatrixOperationOrder)">
            <summary>
            Scales the matrix by the given vector <paramref name="scaleVector"/>.
            </summary>
            <param name="scaleVector">
            A vector with scaling components which 
            correspond to the affine transform dimensions.
            </param>
            <param name="order">Order in which to apply the operation.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#IAffineTransformMatrix{NPack#DoubleComponent}#Translate(NPack.DoubleComponent,NPack.MatrixOperationOrder)">
            <summary>
            Translates the affine transform by the given translation vector.
            </summary>
            <param name="amount">Amount to translate by.</param>
            <param name="order">Order in which to apply the operation.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#IAffineTransformMatrix{NPack#DoubleComponent}#Translate(NPack.Interfaces.IVector{NPack.DoubleComponent},NPack.MatrixOperationOrder)">
            <summary>
            Translates the affine transform by the given translation vector.
            </summary>
            <param name="translateVector">
            A vector whose components will translate the transform 
            in the corresponding dimension.
            </param>
            <param name="order">Order in which to apply the operation.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#ITransformMatrix{NPack#DoubleComponent}#TransformMatrix(NPack.Interfaces.IMatrix{NPack.DoubleComponent})">
            <summary>
            Applies this transform to the given <paramref name="input"/> matrix.
            </summary>
            <param name="input">Matrix to transform.</param>
            <returns>
            The multiplication of this transform matrix with the input matrix.
            </returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#ITransformMatrix{NPack#DoubleComponent}#TransformVector(NPack.Interfaces.IVector{NPack.DoubleComponent})">
            <summary>
            Applies this transform to the given <paramref name="input"/> vector.
            </summary>
            <param name="input">Vector to transform.</param>
            <returns>
            The multiplication of this transform matrix with the input vector.
            </returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#ITransformMatrix{NPack#DoubleComponent}#TransformVector(NPack.DoubleComponent[])">
            <summary>
            Applies this transform to the given <paramref name="input"/> vector in place.
            </summary>
            <param name="input">Vector to transform.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#ITransformMatrix{NPack#DoubleComponent}#TransformVectors(System.Collections.Generic.IEnumerable{NPack.Interfaces.IVector{NPack.DoubleComponent}})">
            <summary>
            Applies this transform to the given <paramref name="input"/> vectors.
            </summary>
            <param name="input">Set of vectors to transform.</param>
            <returns>
            The multiplication of this transform matrix with each of the input vectors.
            </returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#ITransformMatrix{NPack#DoubleComponent}#TransformVectors(System.Collections.Generic.IEnumerable{NPack.DoubleComponent[]})">
            <summary>
            Applies this transform to the given <paramref name="input"/> vectors in place.
            </summary>
            <param name="input">Set of vectors to transform.</param>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.X">
            <summary>
            Gets the X value of the coordinate of the upper left 
            corner of the <see cref="T:SharpMap.Rendering.Rendering2D.Rectangle2D"/>.
            </summary>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Location"/>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Y">
            <summary>
            Gets the Y value of the coordinate of the upper left 
            corner of the <see cref="T:SharpMap.Rendering.Rendering2D.Rectangle2D"/>.
            </summary>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Location"/>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Left">
            <summary>
            Gets the X value of the left edge of the <see cref="T:SharpMap.Rendering.Rendering2D.Rectangle2D"/>.
            </summary>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Bottom"/>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Right"/>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Top"/>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Top">
            <summary>
            Gets the Y value of the top edge of the <see cref="T:SharpMap.Rendering.Rendering2D.Rectangle2D"/>.
            </summary>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Bottom"/>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Right"/>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Left"/>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Right">
            <summary>
            Gets the X value of the right edge of the <see cref="T:SharpMap.Rendering.Rendering2D.Rectangle2D"/>.
            </summary>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Bottom"/>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Top"/>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Left"/>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Bottom">
            <summary>
            Gets the Y value of the bottom edge of the <see cref="T:SharpMap.Rendering.Rendering2D.Rectangle2D"/>.
            </summary>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Right"/>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Top"/>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Left"/>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Center">
            <summary>
            Gets the coordinates of the center of the <see cref="T:SharpMap.Rendering.Rendering2D.Rectangle2D"/>.
            </summary>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Location"/>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.X"/>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Y"/>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Location">
            <summary>
            Gets the coordinates of the upper left corner of the <see cref="T:SharpMap.Rendering.Rendering2D.Rectangle2D"/>.
            </summary>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Center"/>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Size">
            <summary>
            Gets the size of the <see cref="T:SharpMap.Rendering.Rendering2D.Rectangle2D"/>.
            </summary>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Width"/>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Height"/>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Width">
            <summary>
            Gets the width of the <see cref="T:SharpMap.Rendering.Rendering2D.Rectangle2D"/>.
            </summary>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Size"/>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Height">
            <summary>
            Gets the height of the <see cref="T:SharpMap.Rendering.Rendering2D.Rectangle2D"/>.
            </summary>
            <seealso cref="P:SharpMap.Rendering.Rendering2D.Rectangle2D.Size"/>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.IsEmpty">
            <summary>
            Gets true if the Rectangle2D has no set value.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#IHasZero{NPack#Interfaces#IMatrix{NPack#DoubleComponent}}#Zero">
            <summary>
            Returns the additive identity.
            </summary>
            <value>e</value>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.One">
            <summary>
            Returns the multiplicative identity.
            </summary>
            <value>e</value>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#Determinant">
            <summary>
            Gets the determinant for the matrix, if it exists.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#ColumnCount">
            <summary>
            Gets the number of columns in the matrix.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#IsSingular">
            <summary>
            Gets true if the matrix is singular (non-invertable).
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#IsInvertible">
            <summary>
            Gets true if the matrix is invertable (non-singular).
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#Inverse">
            <summary>
            Gets the inverse of the matrix, if one exists.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#IsSquare">
            <summary>
            Gets true if the matrix is square (<c>RowCount == ColumnCount != 0</c>).
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#IsSymmetrical">
            <summary>
            Gets true if the matrix is symmetrical.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#RowCount">
            <summary>
            Gets the number of rows in the matrix.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets an element in the matrix.
            </summary>
            <param name="row">The index of the row of the element.</param>
            <param name="column">The index of the column of the element.</param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Rectangle2D.NPack#Interfaces#IAffineTransformMatrix{NPack#DoubleComponent}#Inverse">
            <summary>
            Gets the inverse of the affine transform.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Rendering2D.IVectorRenderer2D">
            <summary>
            Interface for renderers which take computed graphics paths and produce 
            rendered objects suitable for display.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.IVectorRenderer2D.RenderPaths(System.Collections.Generic.IEnumerable{SharpMap.Rendering.Rendering2D.Path2D},SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Rendering.RenderState)">
            <summary>
            Renders a set of <see cref="T:SharpMap.Rendering.Rendering2D.Path2D"/> instances into a set of rendered objects.
            </summary>
            <param name="paths">The paths to render.</param>
            <param name="outline">Style of the path outline.</param>
            <param name="highlightOutline">Style of the path outline when highlighted.</param>
            <param name="selectOutline">Style of the path outline when selected.</param>
            <returns>A rendered object suitable for direct display.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.IVectorRenderer2D.RenderPaths(System.Collections.Generic.IEnumerable{SharpMap.Rendering.Rendering2D.Path2D},SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Rendering.RenderState)">
            <summary>
            Renders a set of <see cref="T:SharpMap.Rendering.Rendering2D.Path2D"/> instances into a set of rendered objects.
            </summary>
            <param name="paths">The paths to render.</param>
            <param name="line">The style of the path line.</param>
            <param name="highlightLine">The style of the path line when highlighted.</param>
            <param name="selectLine">The style of the path line when selected.</param>
            <param name="outline">Style of the path line outline.</param>
            <param name="highlightOutline">Style of the path line outline when highlighted.</param>
            <param name="selectOutline">Style of the path line outline when selected.</param>
            <returns>A rendered object suitable for direct display.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.IVectorRenderer2D.RenderPaths(System.Collections.Generic.IEnumerable{SharpMap.Rendering.Rendering2D.Path2D},SharpMap.Styles.StyleBrush,SharpMap.Styles.StyleBrush,SharpMap.Styles.StyleBrush,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Rendering.RenderState)">
            <summary>
            Renders a set of <see cref="T:SharpMap.Rendering.Rendering2D.Path2D"/> instances into a set of rendered objects.
            </summary>
            <param name="path">The paths to render.</param>
            <param name="fill">The style of the path fill.</param>
            <param name="highlightFill">The style of the path fill when highlighted.</param>
            <param name="selectFill">The style of the path fill when selected.</param>
            <param name="outline">Style of the path outline.</param>
            <param name="highlightOutline">Style of the path outline when highlighted.</param>
            <param name="selectOutline">Style of the path outline when selected.</param>
            <returns>A rendered object suitable for direct display.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.IVectorRenderer2D.RenderSymbols(System.Collections.Generic.IEnumerable{SharpMap.Rendering.Rendering2D.Point2D},SharpMap.Rendering.Rendering2D.Symbol2D,SharpMap.Rendering.RenderState)">
            <summary>
            Renders a set of <see cref="T:SharpMap.Rendering.Rendering2D.Point2D">points</see> into a set of rendered objects.
            </summary>
            <param name="locations">The point to render.</param>
            <param name="symbolData">The symbol to use for the point.</param>
            <returns>A rendered object suitable for direct display.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.IVectorRenderer2D.RenderSymbols(System.Collections.Generic.IEnumerable{SharpMap.Rendering.Rendering2D.Point2D},SharpMap.Rendering.Rendering2D.Symbol2D,SharpMap.Rendering.ColorMatrix,SharpMap.Rendering.ColorMatrix,SharpMap.Rendering.RenderState)">
            <summary>
            Renders a set of <see cref="T:SharpMap.Rendering.Rendering2D.Point2D">point</see> into a set of rendered objects.
            </summary>
            <param name="locations">The point to render.</param>
            <param name="symbolData">The symbol to use for the point.</param>
            <param name="highlight">A color matrix used to recolor the symbol during highlight.</param>
            <param name="select">A color matrix used to recolor the symbol during selection.</param>
            <returns>A rendered object suitable for direct display.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.IVectorRenderer2D.RenderSymbols(System.Collections.Generic.IEnumerable{SharpMap.Rendering.Rendering2D.Point2D},SharpMap.Rendering.Rendering2D.Symbol2D,SharpMap.Rendering.Rendering2D.Symbol2D,SharpMap.Rendering.Rendering2D.Symbol2D,SharpMap.Rendering.RenderState)">
            <summary>
            Renders a set of <see cref="T:SharpMap.Rendering.Rendering2D.Point2D">point</see> into a set of rendered objects.
            </summary>
            <param name="locations">The point to render.</param>
            <param name="symbolData">The symbol to use for the point.</param>
            <param name="highlightSymbolData">The symbol to use for the point when highlighted.</param>
            <param name="selectSymbolData">The symbol to use for the point when selected.</param>
            <returns>A rendered object suitable for direct display.</returns>
        </member>
        <member name="T:SharpMap.Indexing.ObsoleteIndexFileFormatException">
            <summary>
            Exception thrown when loading spatial index file fails due to imcompatible version
            </summary>
        </member>
        <member name="M:SharpMap.Indexing.ObsoleteIndexFileFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Exception thrown when layer rendering has failed. This constructor is used by the runtime during serialization.
            </summary>
            <param name="info">Data used to reconstruct instance</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="P:SharpMap.Indexing.ObsoleteIndexFileFormatException.VersionExpected">
            <summary>
            The version of the file expected
            </summary>
        </member>
        <member name="P:SharpMap.Indexing.ObsoleteIndexFileFormatException.VersionEncountered">
            <summary>
            The version of the file actually encountered
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.GeometryDataReader">
            <summary>
            Provides a fast-forward, read-only data stream to geometry data
            from a <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryDataReader.GetValues(System.Object[])">
            <summary>
            Does nothing and returns 0
            </summary>
            <param name="values"></param>
            <returns>0</returns>
        </member>
        <member name="T:SharpMap.Data.Providers.FeatureProviderBase">
            <summary>
            Provides basic functionality for providers which access feature data.
            </summary>
        </member>
        <member name="T:SharpMap.Styles.StyleColorBlend">
            <summary>
            Defines arrays of colors and positions used for interpolating color blending 
            in a multicolor gradient.
            </summary>
            <seealso cref="T:SharpMap.Rendering.Thematics.GradientTheme2D"/>
        </member>
        <member name="M:SharpMap.Styles.StyleColorBlend.#ctor(SharpMap.Styles.StyleColor[],System.Single[])">
            <summary>
            Initializes a new instance of the ColorBlend class.
            </summary>
            <param name="colors">An array of Color structures that represents the 
            colors to use at corresponding positions along a gradient.</param>
            <param name="positions">An array of values that specify percentages of 
            distance along the gradient line.</param>
        </member>
        <member name="M:SharpMap.Styles.StyleColorBlend.GetColor(System.Single)">
            <summary>
            Gets the color from the scale at position 'pos'.
            </summary>
            <remarks>If the position is outside the scale [0..1] only the fractional part
            is used (in other words the scale restarts for each integer-part).</remarks>
            <param name="pos">Position on scale between 0.0f and 1.0f</param>
            <returns>Color on scale</returns>
        </member>
        <member name="M:SharpMap.Styles.StyleColorBlend.TwoColors(SharpMap.Styles.StyleColor,SharpMap.Styles.StyleColor)">
            <summary>
            Creates a linear gradient scale from two colors
            </summary>
            <param name="fromColor"></param>
            <param name="toColor"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Styles.StyleColorBlend.ThreeColors(SharpMap.Styles.StyleColor,SharpMap.Styles.StyleColor,SharpMap.Styles.StyleColor)">
            <summary>
            Creates a linear gradient scale from three colors
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StyleColorBlend.Colors">
            <summary>
            Gets or sets an array of colors that represents the colors to use at 
            corresponding positions along a gradient.
            </summary>
            <value>An array of <see cref="T:SharpMap.Styles.StyleColor"/> structures that 
            represents the colors to use at corresponding positions along a gradient.
            </value>
            <remarks>
            This property is an array of <see cref="T:SharpMap.Styles.StyleColor"/> structures 
            that represents the colors to use at corresponding positions along a gradient. 
            Along with the Positions property, this property defines a multicolor gradient.
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColorBlend.Positions">
            <summary>
            Gets or sets the positions along a gradient line.
            </summary>
            <value>An array of values that specify percentages of distance along the 
            gradient line.</value>
            <remarks>
            <para>The elements of this array specify percentages of distance along the 
            gradient line. For example, an element value of 0.2f specifies that this 
            point is 20 percent of the total distance from the starting point. 
            The elements in this array are represented by Single values between 0.0f and 1.0f, 
            and the first element of the array must be 0.0f and the last element must be 1.0f.</para>
            <pre>Along with the Colors property, this property defines a multicolor gradient.</pre>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColorBlend.Rainbow7">
            <summary>
            Gets a linear gradient scale with seven colours making a rainbow from red to violet.
            </summary>
            <remarks>
            Colors span the following with an interval of 1/6:
            { Color.Red, Color.Orange, Color.Yellow, Color.Green, Color.Blue, Color.Indigo, Color.Violet }
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColorBlend.Rainbow5">
            <summary>
            Gets a linear gradient scale with five colours making a rainbow from red to blue.
            </summary>
            <remarks>
            Colors span the following with an interval of 0.25:
            { Color.Red, Color.Yellow, Color.Green, Color.Cyan, Color.Blue }
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColorBlend.BlackToWhite">
            <summary>
            Gets a linear gradient scale from black to white
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StyleColorBlend.WhiteToBlack">
            <summary>
            Gets a linear gradient scale from white to black
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StyleColorBlend.RedToGreen">
            <summary>
            Gets a linear gradient scale from red to green
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StyleColorBlend.GreenToRed">
            <summary>
            Gets a linear gradient scale from green to red
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StyleColorBlend.BlueToGreen">
            <summary>
            Gets a linear gradient scale from blue to green
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StyleColorBlend.GreenToBlue">
            <summary>
            Gets a linear gradient scale from green to blue
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StyleColorBlend.RedToBlue">
            <summary>
            Gets a linear gradient scale from red to blue
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StyleColorBlend.BlueToRed">
            <summary>
            Gets a linear gradient scale from blue to red
            </summary>
        </member>
        <member name="T:SharpMap.Presentation.MapViewPropertyChangeEventArgs`1">
            <summary>
            Represents arguments for map view property changes.
            </summary>
            <typeparam name="TParam">Type of the propery which changed.</typeparam>
        </member>
        <member name="M:SharpMap.Presentation.MapViewPropertyChangeEventArgs`1.#ctor(`0,`0)">
            <summary>
            Creates a new instance of the MapViewPropertyChangeEventArgs class.
            </summary>
            <param name="currentValue"></param>
            <param name="requestedValue"></param>
        </member>
        <member name="P:SharpMap.Presentation.MapViewPropertyChangeEventArgs`1.CurrentValue">
            <summary>
            Gets the current value of the view property.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.MapViewPropertyChangeEventArgs`1.RequestedValue">
            <summary>
            Gets the requested value of the property.
            </summary>
        </member>
        <member name="T:SharpMap.Presentation.Views.IMapView2D">
            <summary>
            Provides the interface definition for a 2 dimensional graphics surface
            on which to render features and rasters.
            </summary>
        </member>
        <member name="M:SharpMap.Presentation.Views.IMapView2D.Offset(SharpMap.Rendering.Rendering2D.Point2D)">
            <summary>
            Moves the view by the given vector.
            </summary>
            <param name="offsetVector">Amount and direction of the offset.</param>
        </member>
        <member name="M:SharpMap.Presentation.Views.IMapView2D.ShowRenderedObjects(System.Collections.IEnumerable)">
            <summary>
            Draws the rendered object to the view.
            </summary>
            <param name="renderedObjects">The rendered objects to draw.</param>
        </member>
        <member name="M:SharpMap.Presentation.Views.IMapView2D.ToView(GeoAPI.Coordinates.ICoordinate)">
            <summary>
            Creates a <see cref="T:SharpMap.Rendering.Rendering2D.Point2D"/> in view space from a
            <see cref="T:GeoAPI.Geometries.IPoint"/> in the map's world space.
            </summary>
            <param name="point">Point in the map's world space to transform.</param>
            <returns>
            A <see cref="T:SharpMap.Rendering.Rendering2D.Point2D"/> in view space coordinates which 
            corresponds to the given <paramref name="point"/> in map world space.
            </returns>
        </member>
        <member name="M:SharpMap.Presentation.Views.IMapView2D.ToView(System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:SharpMap.Rendering.Rendering2D.Point2D"/> in view space from X and Y
            coordinate values in the map's world space.
            </summary>
            <param name="x">X coordinate in the map's world space to transform.</param>
            <param name="y">Y coordinate in the map's world space to transform.</param>
            <returns>
            A <see cref="T:SharpMap.Rendering.Rendering2D.Point2D"/> in view space coordinates which 
            corresponds to the given (<paramref name="x"/>, <paramref name="y"/>) coordinate
            pair in map world space.
            </returns>
        </member>
        <member name="M:SharpMap.Presentation.Views.IMapView2D.ToWorld(SharpMap.Rendering.Rendering2D.Point2D)">
            <summary>
            Creates a <see cref="T:GeoAPI.Geometries.IPoint"/> in the map's world space from a
            <see cref="T:SharpMap.Rendering.Rendering2D.Point2D"/> in the view space.
            </summary>
            <param name="point">Point in the view space to transform.</param>
            <returns>
            A <see cref="T:GeoAPI.Geometries.IPoint"/> in the map's world space coordinates which 
            corresponds to the given <paramref name="point"/> in view space.
            </returns>
        </member>
        <member name="M:SharpMap.Presentation.Views.IMapView2D.ToWorld(System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:GeoAPI.Geometries.IPoint"/> in map world space from X and Y
            coordinate values in the view space.
            </summary>
            <param name="x">X coordinate in the view space to transform.</param>
            <param name="y">Y coordinate in the view space to transform.</param>
            <returns>
            A <see cref="T:GeoAPI.Geometries.IPoint"/> in view space coordinates which 
            corresponds to the given (<paramref name="x"/>, <paramref name="y"/>) coordinate
            pair in view space.
            </returns>
        </member>
        <member name="M:SharpMap.Presentation.Views.IMapView2D.ZoomToExtents">
            <summary>
            Zooms to the extents of all visible layers in the current <see cref="T:SharpMap.Map"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Presentation.Views.IMapView2D.ZoomToViewBounds(SharpMap.Rendering.Rendering2D.Rectangle2D)">
            <summary>
            Zooms the map to fit a view bounding box. 
            </summary>
            <remarks>
            Transforms view coordinates into
            world coordinates using <see cref="P:SharpMap.Presentation.Views.IMapView2D.ToWorldTransform"/> to perform zoom. 
            This means the heuristic to determine the final value of <see cref="P:SharpMap.Presentation.Views.IMapView2D.ViewEnvelope"/>
            after the zoom is the same as in <see cref="M:SharpMap.Presentation.Views.IMapView2D.ZoomToWorldBounds(GeoAPI.Geometries.IExtents2D)"/>.
            </remarks>
            <param name="viewBounds">
            The view bounds, translated into world bounds,
            to set the zoom to.
            </param>
        </member>
        <member name="M:SharpMap.Presentation.Views.IMapView2D.ZoomToWorldBounds(GeoAPI.Geometries.IExtents2D)">
            <summary>
            Zooms the map to fit a world bounding box.
            </summary>
            <remarks>
            The <paramref name="zoomBox"/> value is stretched
            to fit the current view. For example, if a view has a size of
            100 x 100, which is a 1:1 ratio, and the bounds of zoomBox are 
            200 x 100, which is a 2:1 ratio, the bounds are stretched to be 
            200 x 200 to match the view size ratio. This ensures that at least
            all of the area selected in the zoomBox is displayed, and possibly more
            area.
            </remarks>
            <param name="zoomBox">
            <see cref="T:GeoAPI.Geometries.IExtents"/> to set zoom to.
            </param>
        </member>
        <member name="M:SharpMap.Presentation.Views.IMapView2D.ZoomToWorldWidth(System.Double)">
            <summary>
            Zooms the view to the given width.
            </summary>
            <remarks>
            View modifiers <see cref="P:SharpMap.Presentation.Views.IMapView2D.MinimumWorldWidth"/>, 
            <see cref="P:SharpMap.Presentation.Views.IMapView2D.MaximumWorldWidth"/> and <see cref="P:SharpMap.Presentation.Views.IMapView2D.WorldAspectRatio"/>
            are taken into account when zooming to this width.
            </remarks>
        </member>
        <member name="P:SharpMap.Presentation.Views.IMapView2D.BackgroundColor">
            <summary>
            Gets or sets map background color.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Views.IMapView2D.Dpi">
            <summary>
            Gets the view resolution in dots per inch.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Views.IMapView2D.GeoCenter">
            <summary>
            Gets or sets center of map in world coordinates.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Views.IMapView2D.MaximumWorldWidth">
            <summary>
            Gets or sets the minimum width in world units of the view.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Views.IMapView2D.MinimumWorldWidth">
            <summary>
            Gets or sets the minimum width in world units of the view.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Views.IMapView2D.PixelWorldHeight">
            <summary>
            Gets the height of a pixel in world coordinate units.
            </summary>
            <remarks>
            The value returned is the same as <see cref="P:SharpMap.Presentation.Views.IMapView2D.WorldUnitsPerPixel"/> 
            unless <see cref="P:SharpMap.Presentation.Views.IMapView2D.WorldAspectRatio"/> is different from 1.
            </remarks>
        </member>
        <member name="P:SharpMap.Presentation.Views.IMapView2D.PixelWorldWidth">
            <summary>
            Gets the width of a pixel in world coordinate units.
            </summary>
            <remarks>
            The value returned is the same as <see cref="P:SharpMap.Presentation.Views.IMapView2D.WorldUnitsPerPixel"/>.
            </remarks>
        </member>
        <member name="P:SharpMap.Presentation.Views.IMapView2D.Selection">
            <summary>
            Gets the selection on a view, if one exists.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Views.IMapView2D.ToViewTransform">
            <summary>
            Gets a <see cref="T:SharpMap.Rendering.Rendering2D.Matrix2D"/> used to project the world
            coordinate system into the view coordinate system. 
            The inverse of the <see cref="P:SharpMap.Presentation.Views.IMapView2D.ToWorldTransform"/> matrix.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Views.IMapView2D.ToWorldTransform">
            <summary>
            Gets a <see cref="T:SharpMap.Rendering.Rendering2D.Matrix2D"/> used to reverse the view projection
            transform to get world coordinates.
            The inverse of the <see cref="P:SharpMap.Presentation.Views.IMapView2D.ToViewTransform"/> matrix.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Views.IMapView2D.ViewEnvelope">
            <summary>
            Gets or sets the extents of the current view in world units.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Views.IMapView2D.ViewSize">
            <summary>
            Gets or sets the size of the view.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Views.IMapView2D.WorldAspectRatio">
            <summary>
            Gets or sets the aspect ratio of the <see cref="P:SharpMap.Presentation.Views.IMapView2D.WorldHeight"/> 
            to the <see cref="P:SharpMap.Presentation.Views.IMapView2D.WorldWidth"/>.
            </summary>
            <remarks> 
            A value less than 1 will make the map stretch upwards 
            (the view will cover less world distance vertically), 
            and greater than 1 will make it more squat (the view will 
            cover more world distance vertically).
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws an exception when value is 0 or less.
            </exception>
        </member>
        <member name="P:SharpMap.Presentation.Views.IMapView2D.WorldHeight">
            <summary>
            Gets the height of view in world units.
            </summary>
            <returns>
            The height of the view in world units, taking into account <see cref="P:SharpMap.Presentation.Views.IMapView2D.WorldAspectRatio"/> 
            (<see cref="P:SharpMap.Presentation.Views.IMapView2D.WorldWidth"/> * <see cref="P:SharpMap.Presentation.Views.IMapView2D.WorldAspectRatio"/> * 
            <see cref="P:SharpMap.Presentation.Presenters.BasePresenter`1.View"/> ViewSize height 
            / <see cref="P:SharpMap.Presentation.Presenters.BasePresenter`1.View"/> ViewSize width).
            </returns>
        </member>
        <member name="P:SharpMap.Presentation.Views.IMapView2D.WorldWidth">
            <summary>
            Gets the width of view in world units.
            </summary>
            <returns>
            The width of the view in world units 
            (<see cref="P:SharpMap.Presentation.Presenters.BasePresenter`1.View"/> height 
            * <see cref="P:SharpMap.Presentation.Views.IMapView2D.WorldUnitsPerPixel"/>).
            </returns>
        </member>
        <member name="P:SharpMap.Presentation.Views.IMapView2D.WorldUnitsPerPixel">
            <summary>
            Gets the width of a pixel in world coordinate units.
            </summary>
        </member>
        <member name="T:SharpMap.Presentation.FeaturesHighlightedChangedEventArgs">
            <summary>
            Arguments for the <see cref="E:SharpMap.Presentation.Views.IAttributeView.FeaturesHighlightedChanged"/> event.
            </summary>
        </member>
        <member name="M:SharpMap.Presentation.FeaturesHighlightedChangedEventArgs.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Creates a new instance of <see cref="T:SharpMap.Presentation.FeaturesHighlightedChangedEventArgs"/>.
            </summary>
            <param name="layerName">The layer which the features are being highlighted on.</param>
            <param name="highlightedFeatures">The highlighted features.</param>
        </member>
        <member name="P:SharpMap.Presentation.FeaturesHighlightedChangedEventArgs.LayerName">
            <summary>
            Gets the name of the layer which the features are being highlighted on.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.FeaturesHighlightedChangedEventArgs.HighlightedFeatures">
            <summary>
            Gets the features which have been highlighted.
            </summary>
        </member>
        <member name="T:SharpMap.Layers.LayerCollection">
            <summary>
            Represents an ordered collection of layers of geospatial features
            which are composed into a map.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.LayerCollection.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns the name of the list.
            </summary>
            <param name="listAccessors">
            An array of <see cref="T:System.ComponentModel.PropertyDescriptor"/> objects, 
            for which the list name is returned. This can be <see langword="null"/>.
            </param>
            <returns>The name of the list.</returns>
            <remarks>
            From the MSDN docs: This method is used only in the design-time framework 
            and by the obsolete DataGrid control.
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.LayerCollection.Item(System.String)">
            <summary>
            Gets a layer by its name, or <see langword="null"/> if the layer isn't found.
            </summary>
            <remarks>
            Performs culture-specific, case-insensitive search.
            </remarks>
            <param name="layerName">Name of layer.</param>
            <returns>
            Layer with <see cref="P:SharpMap.Layers.ILayer.LayerName"/> of <paramref name="layerName"/>.
            </returns>
        </member>
        <member name="P:SharpMap.Layers.LayerCollection.AllowNew">
            <summary>
            Adding new layers through LayerCollection is not supported. Always gets
            <see langword="false"/> and throws an exception if set.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown if set.</exception>
        </member>
        <member name="F:SharpMap.Expressions.SpatialAnalysisOperation.Distance">
            <summary>
            Returns the shortest distance between any two Points in the two geometric objects as calculated in the spatial 
            reference system of this geometric object. Because the
            geometries are closed, it is possible to find a point on each geometric object involved, such that the distance
            between these 2 points is the returned distance between their geometric objects
            </summary>
        </member>
        <member name="F:SharpMap.Expressions.SpatialAnalysisOperation.Buffer">
            <summary>
            Returns a geometric object that represents all Points whose distance
            from this geometric object is less than or equal to distance. Calculations are in the spatial reference system of
            this geometric object. Because of the limitations of linear interpolation, there will often be some relatively
            small error in this distance, but it should be near the resolution of the coordinates used.
            </summary>
        </member>
        <member name="F:SharpMap.Expressions.SpatialAnalysisOperation.ConvexHull">
            <summary>
            Returns a geometric object that represents the convex hull of this geometric
            object. Convex hulls, being dependent on straight lines, can be accurately represented in linear interpolations
            for any geometry restricted to linear interpolations.
            </summary>
        </member>
        <member name="F:SharpMap.Expressions.SpatialAnalysisOperation.Intersection">
            <summary>
            Returns a geometric object that represents the
            Point set intersection of this geometric object with anotherGeometry
            </summary>
        </member>
        <member name="F:SharpMap.Expressions.SpatialAnalysisOperation.Union">
            <summary>
            Returns a geometric object that represents the Point set
            union of this geometric object with anotherGeometry.
            </summary>
        </member>
        <member name="F:SharpMap.Expressions.SpatialAnalysisOperation.Difference">
            <summary>
            Returns a geometric object that represents the Point
            set difference of this geometric object with anotherGeometry.
            </summary>
        </member>
        <member name="F:SharpMap.Expressions.SpatialAnalysisOperation.SymDifference">
            <summary>
            Returns a geometric object that represents the
            Point set symmetric difference of this geometric object with anotherGeometry
            </summary>
        </member>
        <member name="T:SharpMap.Styles.IFeatureLayerStyle">
            <summary>
            Interface which applies to a feature style and allows the feature
            to be selectable or not, depending on the style.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.IFeatureLayerStyle.AreFeaturesSelectable">
            <summary>
            Gets or sets a value to determine if features can 
            be selected on this layer.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Vector">
            <summary>
            A vector.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Vector.#ctor(System.Int32)">
            <summary>
            Creates a new vector with the given number of components.
            </summary>
            <param name="componentCount">The number of components in the vector.</param>
        </member>
        <member name="M:SharpMap.Rendering.Vector.#ctor(NPack.DoubleComponent[])">
            <summary>
            Creates a new vector with the given components.
            </summary>
            <param name="components">The components to initialize the vector to.</param>
        </member>
        <member name="M:SharpMap.Rendering.Vector.ToString">
            <summary>
            Gets a String representation of the vector.
            </summary>
            <returns>A String describing the vector.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Vector.Clone">
            <summary>
            Creates a component-by-component copy of the vector.
            </summary>
            <returns>A copy of the vector.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Vector.Negative">
            <summary>
            Returns the vector multiplied by -1.
            </summary>
            <returns>The vector when multiplied by -1.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Vector.GetEnumerator">
            <summary>
            Gets an enumerator which enumerates over the vector's components.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> which returns the vectors components when iterated.</returns>
        </member>
        <member name="P:SharpMap.Rendering.Vector.Item(System.Int32)">
            <summary>
            Gets or sets a component in the vector.
            </summary>
            <param name="index">The index of the component.</param>
            <returns>The value of the component at the given <paramref name="index"/>.</returns>
        </member>
        <member name="P:SharpMap.Rendering.Vector.ComponentCount">
            <summary>
            Gets the number of components in the vector.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Vector.Components">
            <summary>
            Gets or sets the vector component array.
            </summary>
        </member>
        <member name="T:SharpMap.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SharpMap.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SharpMap.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:SharpMap.Layers.LayerGroup">
            <summary>
            Class for holding a group of layers.
            </summary>
            <remarks>
            A <see cref="T:SharpMap.Layers.LayerGroup"/> is useful for grouping a set of layers,
            for instance a set of image tiles, or a feature layer and a label layer, 
            and expose them as a single layer.
            </remarks>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.#ctor(SharpMap.Data.IProvider)">
            <summary>
            Initializes a new group layer.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.#ctor(System.Collections.Generic.IEnumerable{SharpMap.Layers.ILayer},SharpMap.Layers.ILayer)">
            <summary>
            Initializes a new group layer.
            </summary>
            <param name="layers">An enumeration of member layers.</param>
            <param name="master">
            A <see cref="T:SharpMap.Layers.ILayer"/> which is the master layer for the group, from which the group
            gets the data source.
            </param>
            <exception cref="T:System.ArgumentException">
            Parameter <paramref name="layers"/> contains layers and <paramref name="master"/>
            is not a member of the enumeration.
            </exception>
        </member>
        <member name="M:SharpMap.Layers.LayerGroup.GetLayerByName(System.String)">
            <summary>
            Returns a layer by its name
            </summary>
            <param name="name">Name of layer</param>
            <returns>Layer</returns>
        </member>
        <member name="P:SharpMap.Layers.LayerGroup.ShowChildren">
            <summary>
            Gets or sets whether child layers should be shown or only the <see cref="P:SharpMap.Layers.LayerGroup.MasterLayer"/>.
            </summary>
        </member>
        <member name="T:SharpMap.Data.FeatureDataSet">
            <summary>
            Represents an in-memory cache of spatial data. 
            </summary>
            <remarks>
            The FeatureDataSet is an extension of System.Data.DataSet, and can be used 
            in much the same way.
            </remarks>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Initializes a new instance of the FeatureDataSet class.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.#ctor(System.String,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Initializes a new instance of the FeatureDataSet class with the given name.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the FeatureDataSet class.
            </summary>
            <param name="info">Serialized info.</param>
            <param name="context">Remoting context.</param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.Clone">
            <summary>
            Copies the structure of the FeatureDataSet, 
            including all FeatureDataTable schemas, relations, 
            and constraints. Does not copy any data. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.ShouldSerializeTables">
            <summary>
            Gets a value indicating whether Tables property should be persisted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.ShouldSerializeRelations">
            <summary>
            Gets a value indicating whether Relations property should be persisted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.ReadXmlSerializable(System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataSet.GetSchemaSerializable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Data.FeatureDataSet.Tables">
            <summary>
            Gets the collection of tables contained in the FeatureDataSet.
            </summary>
        </member>
        <member name="T:SharpMap.Styles.GeometryStyle">
            <summary>
            Defines a style used for rendering a geometry.
            </summary>
        </member>
        <member name="M:SharpMap.Styles.GeometryStyle.#ctor">
            <summary>
            Initializes a new VectorStyle with default values.
            </summary>
            <remarks>
            Default style values when initialized:<br/>
            <list type="table">
            <item>
            <term>AreFeaturesSelectable</term>
            <description>True</description>
            </item>
            <item>
            <term>LineStyle</term>
            <description>1px solid black</description>
            </item>
            <item>
            <term>FillStyle</term>
            <description>Solid black</description>
            </item>
            <item>
            <term>Outline</term>
            <description>No Outline</description>
            </item>
            <item>
            <term>Symbol</term>
            <description>Null reference (uses the geometry renderer default)</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.GeometryStyle.Line">
            <summary>
            Linestyle for line geometries
            </summary>
        </member>
        <member name="P:SharpMap.Styles.GeometryStyle.HighlightLine">
            <summary>
            Highlighted line style for line geometries
            </summary>
        </member>
        <member name="P:SharpMap.Styles.GeometryStyle.SelectLine">
            <summary>
            Selected line style for line geometries
            </summary>
        </member>
        <member name="P:SharpMap.Styles.GeometryStyle.EnableOutline">
            <summary>
            Specified whether the objects are rendered with or without outlining
            </summary>
        </member>
        <member name="P:SharpMap.Styles.GeometryStyle.Outline">
            <summary>
            Normal outline style for line and polygon geometries
            </summary>
        </member>
        <member name="P:SharpMap.Styles.GeometryStyle.HighlightOutline">
            <summary>
            Highlighted outline style for line and polygon geometries
            </summary>
        </member>
        <member name="P:SharpMap.Styles.GeometryStyle.SelectOutline">
            <summary>
            Selected outline style for line and polygon geometries.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.GeometryStyle.Fill">
            <summary>
            Fill style for closed geometries.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.GeometryStyle.SelectFill">
            <summary>
            Fill style for closed geometries when they are in a selected state.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.GeometryStyle.HighlightFill">
            <summary>
            Gets or sets a fill style for closed geometries when they are in a highlighted state.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.GeometryStyle.Symbol">
            <summary>
            Gets or sets a symbol used for rendering point features.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.GeometryStyle.HighlightSymbol">
            <summary>
            Gets or sets a symbol used for rendering highlighted point features.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.GeometryStyle.SelectSymbol">
            <summary>
            Gets or sets a symbol used for rendering selected point features.
            </summary>
        </member>
        <member name="T:SharpMap.Styles.StylePenAlignment">
            <summary>
            Specifies the relation of the pen placement to the line being drawn
            by the <see cref="T:SharpMap.Styles.StylePen"/>.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.StylePenAlignment.Center">
            <summary>
            Places the pen in the center of the line.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.StylePenAlignment.Inset">
            <summary>
            Places the pen inside the line.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.StylePenAlignment.Outset">
            <summary>
            Places the pen around the outside of the line.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.StylePenAlignment.Left">
            <summary>
            Places the pen to the left of the line.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.StylePenAlignment.Right">
            <summary>
            Places the pen to the right of the line.
            </summary>
        </member>
        <member name="T:SharpMap.Styles.StyleColor">
            <summary>
            Represents a 32-bit color in BGRA (blue, green, red, alpha) format.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.StyleColor.RedLuminanceFactor">
            <summary>
            Value of pure red luminance - 0.2126.
            </summary>
            <remarks>
            This value is correct for modern monitors' phosphors. 
            See ITU-R BT.709 for definition.
            </remarks>
        </member>
        <member name="F:SharpMap.Styles.StyleColor.GreenLuminanceFactor">
            <summary>
            Value of pure green luminance - 0.7152.
            </summary>
            <remarks>
            This value is correct for modern monitors' phosphors. 
            See ITU-R BT.709 for definition.
            </remarks>
        </member>
        <member name="F:SharpMap.Styles.StyleColor.BlueLuminanceFactor">
            <summary>
            Value of pure blue luminance - 0.0722.
            </summary>
            <remarks>
            This value is correct for modern monitors' phosphors. 
            See ITU-R BT.709 for definition.
            </remarks>
        </member>
        <member name="M:SharpMap.Styles.StyleColor.#ctor(System.UInt32)">
            <summary>
            Creates a new <see cref="T:SharpMap.Styles.StyleColor"/> from a <see cref="T:System.UInt32"/>
            value where the highest order Byte is the blue, the next highest is green,
            the next is red and the lowest order Byte is the alpha value.
            </summary>
            <param name="bgra">
            The blue, green, red, alpha encoded <see cref="T:System.UInt32"/> value to create
            the <see cref="T:SharpMap.Styles.StyleColor"/> from.
            </param>
        </member>
        <member name="M:SharpMap.Styles.StyleColor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpMap.Styles.StyleColor"/> from individual color components.
            </summary>
            <param name="b">The blue value.</param>
            <param name="g">The green value.</param>
            <param name="r">The red value.</param>
            <param name="a">The alpha value.</param>
            <remarks>
            If any of the parameters are outside the range [0 - 255] the value
            is clamped on the nearest value within that range.
            </remarks>
        </member>
        <member name="M:SharpMap.Styles.StyleColor.FromBgra(System.UInt32)">
            <summary>
            Generates a new <see cref="T:SharpMap.Styles.StyleColor"/> from a <see cref="T:System.UInt32"/>
            value where the highest order Byte is the blue, the next highest is green,
            the next is red and the lowest order Byte is the alpha value.
            </summary>
            <param name="bgra">
            The blue, green, red, alpha encoded <see cref="T:System.UInt32"/> value to create
            a <see cref="T:SharpMap.Styles.StyleColor"/> from.
            </param>
            <returns>
            A <see cref="T:SharpMap.Styles.StyleColor"/> with the same value as <paramref name="bgra"/>.
            </returns>
        </member>
        <member name="M:SharpMap.Styles.StyleColor.FromBgra(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a new <see cref="T:SharpMap.Styles.StyleColor"/> from individual color components.
            </summary>
            <param name="b">The blue value.</param>
            <param name="g">The green value.</param>
            <param name="r">The red value.</param>
            <param name="a">The alpha value.</param>
            <returns>
            A <see cref="T:SharpMap.Styles.StyleColor"/> instance with the specified color
            component values.
            </returns>
            <remarks>
            If any of the parameters are outside the range [0 - 255] the value
            is clamped on the nearest value within that range.
            </remarks>
        </member>
        <member name="M:SharpMap.Styles.StyleColor.FromHsb(System.Double,System.Double,System.Double)">
            <summary> 
            Creates a color using HSB.
            </summary> 
            <remarks>
            Adapted from the algorithm in "Computer Graphics: Principles and Practice in C", 
            ISBN: 978-0201848403
            </remarks>
            <param name="hue">The hue value.</param> 
            <param name="saturation">The saturation value.</param> 
            <param name="brightness">The brightness value.</param> 
            <returns>A <see cref="T:SharpMap.Styles.StyleColor"/> structure containing the equivalent RGBA values</returns> 
        </member>
        <member name="M:SharpMap.Styles.StyleColor.Interpolate(SharpMap.Styles.StyleColor,SharpMap.Styles.StyleColor)">
            <summary>
            Evenly interpolates between two <see cref="T:SharpMap.Styles.StyleColor"/> values
            in the RGB color space.
            </summary>
            <param name="color1">The first color to interpolate between</param>
            <param name="color2">The second color to interpolate between</param>
            <returns>A <see cref="T:SharpMap.Styles.StyleColor"/> on the midpoint of the distance between 
            <paramref name="color1"/> and <paramref name="color2"/>.</returns>
        </member>
        <member name="M:SharpMap.Styles.StyleColor.Interpolate(SharpMap.Styles.StyleColor,SharpMap.Styles.StyleColor,System.Double)">
            <summary>
            Interpolates between two <see cref="T:SharpMap.Styles.StyleColor"/> values
            in the RGB color space.
            </summary>
            <param name="color1">The first color to interpolate between</param>
            <param name="color2">The second color to interpolate between</param>
            <param name="blendFactor">The percentage of the distance between 
            <paramref name="color1"/> and <paramref name="color2"/> to return.</param>
            <returns>A <see cref="T:SharpMap.Styles.StyleColor"/> which is <paramref name="blendFactor"/> percent
            of the distance between <paramref name="color1"/> and <paramref name="color2"/>.
            </returns>
            <remarks>If <paramref name="blendFactor"/> is less than 0 or more than 100,
            the value used is 0 or 100 respectively.</remarks>
        </member>
        <member name="M:SharpMap.Styles.StyleColor.Equals(SharpMap.Styles.StyleColor)">
            <summary>
            Compares two <see cref="T:SharpMap.Styles.StyleColor"/> instances to determine if they are equal.
            </summary>
        </member>
        <member name="M:SharpMap.Styles.StyleColor.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:SharpMap.Styles.StyleColor"/> instances to determine if they are equal.
            </summary>
        </member>
        <member name="M:SharpMap.Styles.StyleColor.op_Equality(SharpMap.Styles.StyleColor,SharpMap.Styles.StyleColor)">
            <summary>
            Returns true if two <see cref="T:SharpMap.Styles.StyleColor"/> instances are equal, false if they are not equal.
            </summary>
        </member>
        <member name="M:SharpMap.Styles.StyleColor.op_Inequality(SharpMap.Styles.StyleColor,SharpMap.Styles.StyleColor)">
            <summary>
            Returns true if two <see cref="T:SharpMap.Styles.StyleColor"/> instances are not equal, false if they are equal.
            </summary>
        </member>
        <member name="M:SharpMap.Styles.StyleColor.op_Explicit(SharpMap.Styles.StyleColor)~System.UInt32">
            <summary>
            Casts a <see cref="T:SharpMap.Styles.StyleColor"/> to a <see cref="T:System.UInt32"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Styles.StyleColor.op_Explicit(System.UInt32)~SharpMap.Styles.StyleColor">
            <summary>
            Casts a <see cref="T:System.UInt32"/> to a <see cref="T:SharpMap.Styles.StyleColor"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Styles.StyleColor.GetHashCode">
            <summary>
            Returns a hash code for this color value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Styles.StyleColor.LookupColorName(SharpMap.Styles.StyleColor)">
            <summary>
            Gets the name of a color, if one exists.
            </summary>
            <param name="color">The color value to lookup.</param>
            <returns>The name of the color if one exists, otherwise null.</returns>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Bgra">
            <summary>
            Gets the color value as a BGRA-encoded <see cref="T:System.UInt32"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.B">
            <summary>
            Gets the blue component of this color.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.G">
            <summary>
            Gets the green component of this color.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.R">
            <summary>
            Gets the red component of this color.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.A">
            <summary>
            Gets the alpha component of this color.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Luminance">
            <summary>
            Gets the luminance of the color based on the values 
            of the red, green, and blue components. 
            </summary>
            <remarks>
            <see cref="P:SharpMap.Styles.StyleColor.A">Alpha</see>
            is not used in the computation, since the resulting luminance depends on 
            what is blended with the alpha.
            </remarks>
            <returns>A value in the range [0 to 1] (inclusive).</returns>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Hue">
            <summary>
            Gets the hue of the color based on the values
            of the red, green and blue components.
            </summary>
            <returns>A value in the range [0 to 360] (inclusive).</returns>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Saturation">
            <summary>
            Gets the saturation of the color based on the values
            of the red, green and blue components.
            </summary>
            <returns>A value in the range [0 to 1] (inclusive).</returns>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Brightness">
            <summary>
            Gets a value indicating the relative brightness of this color.
            </summary>
            <remarks>
            The human eye perceives different colors as having different brightness. 
            Yellow, for example, is brighter than blue. This method computes the relative
            brightness of a given color.
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Transparent">
            <summary>
            Gets a transparent color (BRGA = 255, 255, 255, 0).
            </summary>
            <remarks>
            The alpha component is 0, making this color completely transparent.
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.AliceBlue">
            <summary>
            Gets a bluish-white (BRGA = 255, 248, 240, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(240, 248, 255); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.AntiqueWhite">
            <summary>
            (BRGA = 215, 235, 250, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(250, 235, 215); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Aqua">
            <summary>
            (BRGA = 255, 255, 0, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(0, 255, 255); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Aquamarine">
            <summary>
            (BRGA = 212, 255, 127, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(127, 255, 212); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Azure">
            <summary>
            (BRGA = 255, 255, 240, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(240, 255, 255); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Beige">
            <summary>
            (BRGA = 220, 245, 245, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(245, 245, 220); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Bisque">
            <summary>
            (BRGA = 196, 228, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 228, 196); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Black">
            <summary>
            (BRGA = 0, 0, 0, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(0, 0, 0); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.BlanchedAlmond">
            <summary>
            (BRGA = 205, 235, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 235, 205); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Blue">
            <summary>
            (BRGA = 255, 0, 0, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(0, 0, 255); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.BlueViolet">
            <summary>
            (BRGA = 226, 43, 138, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(138, 43, 226); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Brown">
            <summary>
            (BRGA = 42, 42, 165, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(165, 42, 42); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.BurlyWood">
            <summary>
            (BRGA = 135, 184, 222, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(222, 184, 135); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.CadetBlue">
            <summary>
            (BRGA = 160, 158, 95, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(95, 158, 160); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Chartreuse">
            <summary>
            (BRGA = 0, 255, 127, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(127, 255, 0); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Chocolate">
            <summary>
            (BRGA = 30, 105, 210, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(210, 105, 30); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Coral">
            <summary>
            (BRGA = 80, 127, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 127, 80); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.CornflowerBlue">
            <summary>
            (BRGA = 237, 149, 100, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(100, 149, 237); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Cornsilk">
            <summary>
            (BRGA = 220, 248, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 248, 220); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Crimson">
            <summary>
            (BRGA = 60, 20, 220, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(220, 20, 60); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Cyan">
            <summary>
            (BRGA = 255, 255, 0, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(0, 255, 255); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.DarkBlue">
            <summary>
            (BRGA = 139, 0, 0, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(0, 0, 139); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.DarkCyan">
            <summary>
            (BRGA = 139, 139, 0, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(0, 139, 139); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.DarkGoldenrod">
            <summary>
            (BRGA = 11, 134, 184, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(184, 134, 11); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.DarkGray">
            <summary>
            (BRGA = 169, 169, 169, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(169, 169, 169); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.DarkGreen">
            <summary>
            (BRGA = 0, 100, 0, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(0, 100, 0); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.DarkKhaki">
            <summary>
            (BRGA = 107, 183, 189, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(189, 183, 107); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.DarkMagenta">
            <summary>
            (BRGA = 139, 0, 139, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(139, 0, 139); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.DarkOliveGreen">
            <summary>
            (BRGA = 47, 107, 85, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(85, 107, 47); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.DarkOrange">
            <summary>
            (BRGA = 0, 140, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 140, 0); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.DarkOrchid">
            <summary>
            (BRGA = 204, 50, 153, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(153, 50, 204); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.DarkRed">
            <summary>
            (BRGA = 0, 0, 139, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(139, 0, 0); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.DarkSalmon">
            <summary>
            (BRGA = 122, 150, 233, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(233, 150, 122); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.DarkSeaGreen">
            <summary>
            (BRGA = 139, 188, 143, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(143, 188, 139); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.DarkSlateBlue">
            <summary>
            (BRGA = 139, 61, 72, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(72, 61, 139); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.DarkSlateGray">
            <summary>
            (BRGA = 79, 79, 47, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(47, 79, 79); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.DarkTurquoise">
            <summary>
            (BRGA = 209, 206, 0, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(0, 206, 209); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.DarkViolet">
            <summary>
            (BRGA = 211, 0, 148, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(148, 0, 211); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.DeepPink">
            <summary>
            (BRGA = 147, 20, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 20, 147); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.DeepSkyBlue">
            <summary>
            (BRGA = 255, 191, 0, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(0, 191, 255); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.DimGray">
            <summary>
            (BRGA = 105, 105, 105, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(105, 105, 105); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.DodgerBlue">
            <summary>
            (BRGA = 255, 144, 30, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(30, 144, 255); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Firebrick">
            <summary>
            (BRGA = 34, 34, 178, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(178, 34, 34); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.FloralWhite">
            <summary>
            (BRGA = 240, 250, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 250, 240); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.ForestGreen">
            <summary>
            (BRGA = 34, 139, 34, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(34, 139, 34); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Fuchsia">
            <summary>
            (BRGA = 255, 0, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 0, 255); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Gainsboro">
            <summary>
            (BRGA = 220, 220, 220, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(220, 220, 220); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.GhostWhite">
            <summary>
            (BRGA = 255, 248, 248, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(248, 248, 255); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Gold">
            <summary>
            (BRGA = 0, 215, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 215, 0); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Goldenrod">
            <summary>
            (BRGA = 32, 165, 218, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(218, 165, 32); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Gray">
            <summary>
            (BRGA = 128, 128, 128, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(128, 128, 128); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Green">
            <summary>
            (BRGA = 0, 128, 0, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(0, 128, 0); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.GreenYellow">
            <summary>
            (BRGA = 47, 255, 173, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(173, 255, 47); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Honeydew">
            <summary>
            (BRGA = 240, 255, 240, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(240, 255, 240); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.HotPink">
            <summary>
            (BRGA = 180, 105, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 105, 180); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.IndianRed">
            <summary>
            (BRGA = 92, 92, 205, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(205, 92, 92); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Indigo">
            <summary>
            (BRGA = 130, 0, 75, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(75, 0, 130); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Ivory">
            <summary>
            (BRGA = 240, 255, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 255, 240); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Khaki">
            <summary>
            (BRGA = 140, 230, 240, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(240, 230, 140); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Lavender">
            <summary>
            (BRGA = 250, 230, 230, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(230, 230, 250); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.LavenderBlush">
            <summary>
            (BRGA = 245, 240, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 240, 245); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.LawnGreen">
            <summary>
            (BRGA = 252, 124, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 124, 252); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.LemonChiffon">
            <summary>
            (BRGA = 205, 250, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 250, 205); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.LightBlue">
            <summary>
            (BRGA = 230, 216, 173, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(173, 216, 230); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.LightCoral">
            <summary>
            (BRGA = 128, 128, 240, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(240, 128, 128); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.LightCyan">
            <summary>
            (BRGA = 255, 255, 224, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(224, 255, 255); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.LightGoldenrodYellow">
            <summary>
            (BRGA = 210, 250, 250, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(250, 250, 210); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.LightGreen">
            <summary>
            (BRGA = 144, 238, 144, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(144, 238, 144); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.LightGray">
            <summary>
            (BRGA = 211, 211, 211, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(211, 211, 211); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.LightPink">
            <summary>
            (BRGA = 193, 182, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 182, 193); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.LightSalmon">
            <summary>
            (BRGA = 122, 160, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 160, 122); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.LightSeaGreen">
            <summary>
            (BRGA = 170, 178, 32, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(32, 178, 170); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.LightSkyBlue">
            <summary>
            (BRGA = 250, 206, 135, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(135, 206, 250); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.LightSlateGray">
            <summary>
            (BRGA = 153, 136, 119, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(119, 136, 153); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.LightSteelBlue">
            <summary>
            (BRGA = 222, 196, 176, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(176, 196, 222); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.LightYellow">
            <summary>
            (BRGA = 224, 255, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 255, 224); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Lime">
            <summary>
            (BRGA = 0, 255, 0, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(0, 255, 0); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.LimeGreen">
            <summary>
            (BRGA = 50, 205, 50, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(50, 205, 50); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Linen">
            <summary>
            (BRGA = 230, 240, 250, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(250, 240, 230); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Magenta">
            <summary>
            (BRGA = 255, 0, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 0, 255); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Maroon">
            <summary>
            (BRGA = 0, 0, 128, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(128, 0, 0); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.MediumAquamarine">
            <summary>
            (BRGA = 170, 205, 102, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(102, 205, 170); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.MediumBlue">
            <summary>
            (BRGA = 205, 0, 0, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(0, 0, 205); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.MediumOrchid">
            <summary>
            (BRGA = 211, 85, 186, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(186, 85, 211); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.MediumPurple">
            <summary>
            (BRGA = 219, 112, 147, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(147, 112, 219); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.MediumSeaGreen">
            <summary>
            (BRGA = 113, 179, 60, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(60, 179, 113); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.MediumSlateBlue">
            <summary>
            (BRGA = 238, 104, 123, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(123, 104, 238); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.MediumSpringGreen">
            <summary>
            (BRGA = 154, 250, 0, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(0, 250, 154); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.MediumTurquoise">
            <summary>
            (BRGA = 204, 209, 72, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(72, 209, 204); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.MediumVioletRed">
            <summary>
            (BRGA = 133, 21, 199, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(199, 21, 133); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.MidnightBlue">
            <summary>
            (BRGA = 112, 25, 25, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(25, 25, 112); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.MintCream">
            <summary>
            (BRGA = 250, 255, 245, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(245, 255, 250); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.MistyRose">
            <summary>
            (BRGA = 225, 228, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 228, 225); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Moccasin">
            <summary>
            (BRGA = 181, 228, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 228, 181); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.NavajoWhite">
            <summary>
            (BRGA = 173, 222, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 222, 173); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Navy">
            <summary>
            (BRGA = 128, 0, 0, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(0, 0, 128); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.OldLace">
            <summary>
            (BRGA = 230, 245, 253, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(253, 245, 230); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Olive">
            <summary>
            (BRGA = 0, 128, 128, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(128, 128, 0); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.OliveDrab">
            <summary>
            (BRGA = 35, 142, 107, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(107, 142, 35); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Orange">
            <summary>
            (BRGA = 0, 165, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 165, 0); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.OrangeRed">
            <summary>
            (BRGA = 0, 69, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 69, 0); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Orchid">
            <summary>
            (BRGA = 214, 112, 218, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(218, 112, 214); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.PaleGoldenrod">
            <summary>
            (BRGA = 170, 232, 238, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(238, 232, 170); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.PaleGreen">
            <summary>
            (BRGA = 152, 251, 152, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(152, 251, 152); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.PaleTurquoise">
            <summary>
            (BRGA = 238, 238, 175, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(175, 238, 238); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.PaleVioletRed">
            <summary>
            (BRGA = 147, 112, 219, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(219, 112, 147); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.PapayaWhip">
            <summary>
            (BRGA = 213, 239, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 239, 213); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.PeachPuff">
            <summary>
            (BRGA = 185, 218, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 218, 185); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Peru">
            <summary>
            (BRGA = 63, 133, 205, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(205, 133, 63); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Pink">
            <summary>
            (BRGA = 203, 192, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 192, 203); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Plum">
            <summary>
            (BRGA = 221, 160, 221, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(221, 160, 221); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.PowderBlue">
            <summary>
            (BRGA = 230, 224, 176, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(176, 224, 230); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Purple">
            <summary>
            (BRGA = 128, 0, 128, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(128, 0, 128); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Red">
            <summary>
            (BRGA = 0, 0, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 0, 0); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.RosyBrown">
            <summary>
            (BRGA = 143, 143, 188, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(188, 143, 143); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.RoyalBlue">
            <summary>
            (BRGA = 225, 105, 65, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(65, 105, 225); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.SaddleBrown">
            <summary>
            (BRGA = 19, 69, 139, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(139, 69, 19); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Salmon">
            <summary>
            (BRGA = 114, 128, 250, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(250, 128, 114); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.SandyBrown">
            <summary>
            (BRGA = 96, 164, 244, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(244, 164, 96); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.SeaGreen">
            <summary>
            (BRGA = 87, 139, 46, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(46, 139, 87); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.SeaShell">
            <summary>
            (BRGA = 238, 245, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 245, 238); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Sienna">
            <summary>
            (BRGA = 45, 82, 160, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(160, 82, 45); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Silver">
            <summary>
            (BRGA = 192, 192, 192, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(192, 192, 192); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.SkyBlue">
            <summary>
            (BRGA = 235, 206, 135, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(135, 206, 235); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.SlateBlue">
            <summary>
            (BRGA = 205, 90, 106, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(106, 90, 205); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.SlateGray">
            <summary>
            (BRGA = 144, 128, 112, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(112, 128, 144); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Snow">
            <summary>
            (BRGA = 250, 250, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 250, 250); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.SpringGreen">
            <summary>
            (BRGA = 127, 255, 0, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(0, 255, 127); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.SteelBlue">
            <summary>
            Gets a greyish pastel blue (BRGA = 180, 130, 70, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(70, 130, 180); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Tan">
            <summary>
            Gets a light brown (BRGA = 140, 180, 210, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(210, 180, 140); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Teal">
            <summary>
            Gets a blueish-green (BRGA = 128, 128, 0, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(0, 128, 128); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Thistle">
            <summary>
            Gets a medium pastel purple (BRGA = 216, 191, 216, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(216, 191, 216); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Tomato">
            <summary>
            Gets a bright orangish-red (BRGA = 71, 99, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 99, 71); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Turquoise">
            <summary>
            Gets a bright greenish-blue (BRGA = 208, 224, 64, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(64, 224, 208); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Violet">
            <summary>
            Gets a bright pinkish-purple (BRGA = 238, 130, 238, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(238, 130, 238); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Wheat">
            <summary>
            Gets a light tan (BRGA = 179, 222, 245, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(245, 222, 179); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.White">
            <summary>
            Gets a pure white (BRGA = 255, 255, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 255, 255); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.WhiteSmoke">
            <summary>
            Gets a very light whitish-grey (BRGA = 245, 245, 245, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(245, 245, 245); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Yellow">
            <summary>
            Gets a pure yellow (BRGA = 0, 255, 255, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 255, 0); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.YellowGreen">
            <summary>
            Gets a bright yellow-green (BRGA = 50, 205, 154, 255).
            </summary>
            <remarks>
            Here is an example: 
            <div style="width: 100%; height: 25px; background-color: rgb(255, 154, 205); border: solid 1px black;"></div>
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.Zero">
            <summary>
            Gets a zero value as a StyleColor.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StyleColor.PredefinedColors">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> 
            which indexes a StyleColor value by its name.
            </summary>
        </member>
        <member name="T:SharpMap.Presentation.Presenters.LayerStylePresenter">
            <summary>
            Provides a presenter for the <see cref="T:SharpMap.Styles.Style"/> of an <see cref="T:SharpMap.Layers.ILayer"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Presentation.Presenters.LayerStylePresenter.#ctor(SharpMap.Map,SharpMap.Presentation.Views.ILayerStyleView)">
            <summary>
            Creates a new instance of a <see cref="T:SharpMap.Presentation.Presenters.LayerStylePresenter"/> with the given <see cref="T:SharpMap.Map"/>
            instance and the given concrete <see cref="T:SharpMap.Presentation.Views.ILayersView"/> implementation.
            </summary>
            <param name="map"><see cref="T:SharpMap.Map"/> instance to present.</param>
            <param name="view"><see cref="T:SharpMap.Presentation.Views.ILayerStyleView"/> to present to.</param>
        </member>
        <member name="T:SharpMap.Map">
            <summary>
            A map is a collection of <see cref="T:SharpMap.Layers.Layer">layers</see> 
            composed into a single frame of spatial reference, and a set
            of <see cref="T:SharpMap.Tools.IMapTool"/>s for interacting with them.
            </summary>
        </member>
        <member name="M:SharpMap.Map.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a new instance of a <see cref="T:SharpMap.Map"/> with a title describing 
            when the map was created.
            </summary>
        </member>
        <member name="M:SharpMap.Map.#ctor(GeoAPI.Geometries.IGeometryFactory,GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformationFactory)">
            <summary>
            Creates a new instance of a <see cref="T:SharpMap.Map"/> with a title describing 
            when the map was created.
            </summary>
        </member>
        <member name="M:SharpMap.Map.#ctor(System.String,GeoAPI.Geometries.IGeometryFactory,GeoAPI.CoordinateSystems.Transformations.ICoordinateTransformationFactory)">
            <summary>
            Creates a new instance of a Map with the given title.
            </summary>
        </member>
        <member name="M:SharpMap.Map.Dispose">
            <summary>
            Releases all resources deterministically.
            </summary>
        </member>
        <member name="M:SharpMap.Map.Dispose(System.Boolean)">
            <summary>
            Disposes the map object and all layers.
            </summary>
        </member>
        <member name="M:SharpMap.Map.AddLayer(SharpMap.Layers.ILayer)">
            <summary>
            Adds the given layer to the map, ordering it under all other layers.
            </summary>
            <param name="layer">The layer to add.</param>
        </member>
        <member name="M:SharpMap.Map.AddLayers(System.Collections.Generic.IEnumerable{SharpMap.Layers.ILayer})">
            <summary>
            Adds the given set of layers to the map, 
            ordering each one in turn under all other layers.
            </summary>
            <param name="layers">The set of layers to add.</param>
        </member>
        <member name="M:SharpMap.Map.ClearLayers">
            <summary>
            Removes all the layers from the map.
            </summary>
        </member>
        <member name="M:SharpMap.Map.DisableLayer(System.Int32)">
            <summary>
            Disables the given layer so it is not visible and doesn't participate in
            spatial queries.
            </summary>
            <param name="index">The index of the layer to disable.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="index"/> is less than 0 or greater than or equal to 
            Layers.Count.
            </exception>
        </member>
        <member name="M:SharpMap.Map.DisableLayer(System.String)">
            <summary>
            Disables the given layer so it is not visible and doesn't participate in
            spatial queries.
            </summary>
            <param name="name">Name of layer to disable.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="name"/> is <see langword="null"/> or empty.
            </exception>
        </member>
        <member name="M:SharpMap.Map.DisableLayer(SharpMap.Layers.ILayer)">
            <summary>
            Disables the given layer so it is not visible and doesn't participate in
            spatial queries.
            </summary>
            <param name="layer">Layer to disable.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="layer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:SharpMap.Map.EnableLayer(System.Int32)">
            <summary>
            Enables the given layer so it is visible and participates in
            spatial queries.
            </summary>
            <param name="index">Index of the layer to enable.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="index"/> is less than 0 or greater than or equal to 
            Layers.Count.
            </exception>
        </member>
        <member name="M:SharpMap.Map.EnableLayer(System.String)">
            <summary>
            Enables the given layer so it is visible and participates in
            spatial queries.
            </summary>
            <param name="name">Name of layer to enable.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="name"/> is <see langword="null"/> or empty.
            </exception>
        </member>
        <member name="M:SharpMap.Map.EnableLayer(SharpMap.Layers.ILayer)">
            <summary>
            Enables the given layer so it is visible and participates in
            spatial queries.
            </summary>
            <param name="layer">Layer to enable.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="layer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:SharpMap.Map.FindLayers(System.String)">
            <summary>
            Returns an enumerable set of all layers containing the String 
            <paramref name="layerNamePart"/>  in the <see cref="P:SharpMap.Layers.ILayer.LayerName"/> property.
            </summary>
            <param name="layerNamePart">Part of the layer name to search for.</param>
            <returns>IEnumerable{ILayer} of all layers with <see cref="P:SharpMap.Layers.ILayer.LayerName"/> 
            containing <paramref name="layerNamePart"/>.</returns>
        </member>
        <member name="M:SharpMap.Map.GetActiveTool``2">
            <summary>
            Gets the active tool for map interaction.
            </summary>
            <typeparam name="TMapView">Type of Map view in use.</typeparam>
            <typeparam name="TPoint">Type of vertex used to define a point.</typeparam>
            <returns>The currently active MapTool for the map.</returns>
        </member>
        <member name="M:SharpMap.Map.GetLayerByName(System.String)">
            <summary>
            Returns a layer by its name, or <see langword="null"/> if the layer isn't found.
            </summary>
            <remarks>
            Performs culture-specific, case-insensitive search.
            </remarks>
            <param name="name">Name of layer.</param>
            <returns>
            Layer with <see cref="P:SharpMap.Layers.ILayer.LayerName"/> of <paramref name="name"/>.
            </returns>
        </member>
        <member name="M:SharpMap.Map.RemoveLayer(SharpMap.Layers.ILayer)">
            <summary>
            Removes a layer from the map.
            </summary>
            <param name="layer">The layer to remove.</param>
        </member>
        <member name="M:SharpMap.Map.RemoveLayer(System.String)">
            <summary>
            Removes a layer from the map using the given layer name.
            </summary>
            <param name="name">The name of the layer to remove.</param>
        </member>
        <member name="M:SharpMap.Map.SelectLayer(System.Int32)">
            <summary>
            Selects a layer, using the given index, to be the target of action on the map.
            </summary>
            <param name="index">The index of the layer to select.</param>
        </member>
        <member name="M:SharpMap.Map.SelectLayer(System.String)">
            <summary>
            Selects a layer, using the given name, to be the target of action on the map.
            </summary>
            <param name="name">The name of the layer to select.</param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="name"/> is <see langword="null"/> or empty.
            </exception>
        </member>
        <member name="M:SharpMap.Map.SelectLayer(SharpMap.Layers.ILayer)">
            <summary>
            Selects a layer to be the target of action on the map.
            </summary>
            <param name="layer">The layer to select.</param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="layer"/> is <see langword="null"/> or empty.
            </exception>
        </member>
        <member name="M:SharpMap.Map.SelectLayers(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Selects a set of layers, using the given index set, 
            to be the targets of action on the map.
            </summary>
            <param name="indexes">The set of indexes of the layers to select.</param>
        </member>
        <member name="M:SharpMap.Map.SelectLayers(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Selects a set of layers, using the given set of names, 
            to be the targets of action on the map.
            </summary>
            <param name="layerNames">The set of names of layers to select.</param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="layerNames"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:SharpMap.Map.SelectLayers(System.Collections.Generic.IEnumerable{SharpMap.Layers.ILayer})">
            <summary>
            Selects a set of layers to be the targets of action on the map.
            </summary>
            <param name="layers">The set of layers to select.</param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="layers"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:SharpMap.Map.DeselectLayer(System.Int32)">
            <summary>
            Deselects a layer given by its index from being 
            the target of action on the map.
            </summary>
            <param name="index">The index of the layer to deselect.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index"/> is less than 0 or greater than or equal
            to Layers.Count.
            </exception>
        </member>
        <member name="M:SharpMap.Map.DeselectLayer(System.String)">
            <summary>
            Deselects a layer given by its name from being 
            the target of action on the map.
            </summary>
            <param name="name">The name of the layer to deselect.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="name"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:SharpMap.Map.DeselectLayer(SharpMap.Layers.ILayer)">
            <summary>
            Deselects a layer from being 
            the target of action on the map.
            </summary>
            <param name="layer">The layer to deselect.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="layer"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:SharpMap.Map.DeselectLayers(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Deselects a set of layers given by their index 
            from being the targets of action on the map.
            </summary>
            <param name="indexes">A set of indexes of layers to deselect.</param>
            <exception cref="T:System.ArgumentException">
            If <paramref name="indexes"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If any item in <paramref name="indexes"/> is less than 0 or greater than or equal
            to Layers.Count.
            </exception>
        </member>
        <member name="M:SharpMap.Map.DeselectLayers(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Deselects a set of layers given by their names 
            from being the targets of action on the map.
            </summary>
            <param name="layerNames">A set of names of layers to deselect.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="layerNames"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:SharpMap.Map.DeselectLayers(System.Collections.Generic.IEnumerable{SharpMap.Layers.ILayer})">
            <summary>
            Deselects a set of layers from being the targets of action on the map.
            </summary>
            <param name="layers">The set of layers to deselect.</param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="layers"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:SharpMap.Map.onExtentsChanged">
            <summary>
            20090402 kbd4hire
            Notify the presenters that the map extents have changed allowing
            them to update their internal metrics.
            </summary>
        </member>
        <member name="P:SharpMap.Map.ActiveToolProperty">
            <summary>
            Gets a PropertyDescriptor for the Map's <see cref="P:SharpMap.Map.ActiveTool"/> property.
            </summary>
        </member>
        <member name="P:SharpMap.Map.ExtentsProperty">
            <summary>
            Gets a PropertyDescriptor for the Map's <see cref="P:SharpMap.Map.Extents"/> property.
            </summary>
        </member>
        <member name="P:SharpMap.Map.SpatialReferenceProperty">
            <summary>
            Gets a PropertyDescriptor for the Map's <see cref="P:SharpMap.Map.SpatialReference"/> property.
            </summary>
        </member>
        <member name="P:SharpMap.Map.SelectedLayersProperty">
            <summary>
            Gets a PropertyDescriptor for the Map's <see cref="P:SharpMap.Map.SelectedLayers"/> property.
            </summary>
        </member>
        <member name="P:SharpMap.Map.TitleProperty">
            <summary>
            Gets a PropertyDescriptor for the Map's <see cref="P:SharpMap.Map.Title"/> property.
            </summary>
        </member>
        <member name="P:SharpMap.Map.IsDisposed">
            <summary>
            Gets whether this layer is disposed, and no longer accessible.
            </summary>
        </member>
        <member name="E:SharpMap.Map.Disposed">
            <summary>
            Event fired when the layer is disposed.
            </summary>
        </member>
        <member name="P:SharpMap.Map.Extents">
            <summary>
            Gets the extents of the map based on the extents of all the layers 
            in the layers collection.
            </summary>
            <returns>Full map extents.</returns>
        </member>
        <member name="P:SharpMap.Map.ActiveTool">
            <summary>
            Gets or sets the currently active tool used to
            interact with the map.
            </summary>
        </member>
        <member name="P:SharpMap.Map.Center">
            <summary>
            Gets center of map in world coordinates.
            </summary>
        </member>
        <member name="P:SharpMap.Map.Layers">
            <summary>
            Gets a collection of layers. 
            </summary>
            <remarks>
            The first layer in the list is drawn first, the last one on top.
            </remarks>
        </member>
        <member name="P:SharpMap.Map.Title">
            <summary>
            Gets or sets the name of the map.
            </summary>
        </member>
        <member name="P:SharpMap.Map.SelectedLayers">
            <summary>
            Gets or sets a list of layers which are
            selected.
            </summary>
        </member>
        <member name="P:SharpMap.Map.SpatialReference">
            <summary>
            Gets or sets the spatial reference for the entire map.
            </summary>
        </member>
        <member name="P:SharpMap.Map.Features">
            <summary>
            Gets a <see cref="T:SharpMap.Data.FeatureDataSet"/> containing all the loaded 
            features in all the enabled layers in the map.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Symbol`2">
            <summary>
            Represents a graphical symbol used for point data on a map.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Symbol`2.Clone">
            <summary>
            Clones this symbol.
            </summary>
            <returns>
            A duplicate of this <see cref="T:SharpMap.Rendering.Symbol`2"/>.
            </returns>
        </member>
        <member name="M:SharpMap.Rendering.Symbol`2.System#ICloneable#Clone">
            <summary>
            Clones this symbol.
            </summary>
            <returns>
            A duplicate of this <see cref="T:SharpMap.Rendering.Symbol`2"/> 
            as an object reference.
            </returns>
        </member>
        <member name="P:SharpMap.Rendering.Symbol`2.IsDisposed">
            <summary>
            Gets a value indicating if the <see cref="T:SharpMap.Rendering.Symbol`2"/>
            is disposed.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbol`2.AffineTransform">
            <summary>
            Gets or sets an <see cref="T:NPack.Interfaces.IAffineTransformMatrix`1"/> used 
            to transform this <see cref="T:NPack.Interfaces.IAffineTransformMatrix`1"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbol`2.ColorTransform">
            <summary>
            Gets or sets a <see cref="T:SharpMap.Rendering.ColorMatrix"/> used to change the color 
            of this symbol.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbol`2.Offset">
            <summary>
            Gets or sets a vector by which to offset the symbol.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbol`2.Size">
            <summary>
            Gets or sets the size of this symbol.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbol`2.SymbolData">
            <summary>
            Gets a stream containing the <see cref="T:SharpMap.Rendering.Symbol`2"/> 
            data.
            </summary>
            <remarks>
            This is often a bitmap or a vector-based image.
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Symbol`2.Rotation">
            <summary>
            Gets or sets a rotation matrix by which to rotate this symbol.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Symbol`2.Scale">
            <summary>
            Gets or sets a scale matrix by which to scale this symbol.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Rendering2D.IVectorRenderer2D`1">
            <summary>
            Interface for renderers which take computed graphics paths and produces 
            rendered objects suitable for display.
            </summary>
            <typeparam name="TRenderObject">The type of rendered object.</typeparam>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.IVectorRenderer2D`1.RenderPaths(System.Collections.Generic.IEnumerable{SharpMap.Rendering.Rendering2D.Path2D},SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Rendering.RenderState)">
            <summary>
            Renders a set of <see cref="T:SharpMap.Rendering.Rendering2D.Path2D"/> instances into a set of rendered objects.
            </summary>
            <param name="paths">The paths to render.</param>
            <param name="outline">Style of the path outline.</param>
            <param name="highlightOutline">Style of the path outline when highlighted.</param>
            <param name="selectOutline">Style of the path outline when selected.</param>
            <returns>A rendered object suitable for direct display.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.IVectorRenderer2D`1.RenderPaths(System.Collections.Generic.IEnumerable{SharpMap.Rendering.Rendering2D.Path2D},SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Rendering.RenderState)">
            <summary>
            Renders a set of <see cref="T:SharpMap.Rendering.Rendering2D.Path2D"/> instances into a set of rendered objects.
            </summary>
            <param name="paths">The paths to render.</param>
            <param name="line">The style of the path line.</param>
            <param name="highlightLine">The style of the path line when highlighted.</param>
            <param name="selectLine">The style of the path line when selected.</param>
            <param name="outline">Style of the path line outline.</param>
            <param name="highlightOutline">Style of the path line outline when highlighted.</param>
            <param name="selectOutline">Style of the path line outline when selected.</param>
            <returns>A rendered object suitable for direct display.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.IVectorRenderer2D`1.RenderPaths(System.Collections.Generic.IEnumerable{SharpMap.Rendering.Rendering2D.Path2D},SharpMap.Styles.StyleBrush,SharpMap.Styles.StyleBrush,SharpMap.Styles.StyleBrush,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Styles.StylePen,SharpMap.Rendering.RenderState)">
            <summary>
            Renders a set of <see cref="T:SharpMap.Rendering.Rendering2D.Path2D"/> instances into a set of rendered objects.
            </summary>
            <param name="path">The paths to render.</param>
            <param name="fill">The style of the path fill.</param>
            <param name="highlightFill">The style of the path fill when highlighted.</param>
            <param name="selectFill">The style of the path fill when selected.</param>
            <param name="outline">Style of the path outline.</param>
            <param name="highlightOutline">Style of the path outline when highlighted.</param>
            <param name="selectOutline">Style of the path outline when selected.</param>
            <returns>A rendered object suitable for direct display.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.IVectorRenderer2D`1.RenderSymbols(System.Collections.Generic.IEnumerable{SharpMap.Rendering.Rendering2D.Point2D},SharpMap.Rendering.Rendering2D.Symbol2D,SharpMap.Rendering.RenderState)">
            <summary>
            Renders a set of <see cref="T:SharpMap.Rendering.Rendering2D.Point2D">points</see> into a set of rendered objects.
            </summary>
            <param name="locations">The point to render.</param>
            <param name="symbolData">The symbol to use for the point.</param>
            <returns>A rendered object suitable for direct display.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.IVectorRenderer2D`1.RenderSymbols(System.Collections.Generic.IEnumerable{SharpMap.Rendering.Rendering2D.Point2D},SharpMap.Rendering.Rendering2D.Symbol2D,SharpMap.Rendering.ColorMatrix,SharpMap.Rendering.ColorMatrix,SharpMap.Rendering.RenderState)">
            <summary>
            Renders a set of <see cref="T:SharpMap.Rendering.Rendering2D.Point2D">point</see> into a set of rendered objects.
            </summary>
            <param name="locations">The point to render.</param>
            <param name="symbolData">The symbol to use for the point.</param>
            <param name="highlight">A color matrix used to recolor the symbol during highlight.</param>
            <param name="select">A color matrix used to recolor the symbol during selection.</param>
            <returns>A rendered object suitable for direct display.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.IVectorRenderer2D`1.RenderSymbols(System.Collections.Generic.IEnumerable{SharpMap.Rendering.Rendering2D.Point2D},SharpMap.Rendering.Rendering2D.Symbol2D,SharpMap.Rendering.Rendering2D.Symbol2D,SharpMap.Rendering.Rendering2D.Symbol2D,SharpMap.Rendering.RenderState)">
            <summary>
            Renders a set of <see cref="T:SharpMap.Rendering.Rendering2D.Point2D">point</see> into a set of rendered objects.
            </summary>
            <param name="locations">The point to render.</param>
            <param name="symbolData">The symbol to use for the point.</param>
            <param name="highlightSymbolData">The symbol to use for the point when highlighted.</param>
            <param name="selectSymbolData">The symbol to use for the point when selected.</param>
            <returns>A rendered object suitable for direct display.</returns>
        </member>
        <member name="T:SharpMap.Rendering.LabelFilterDelegate">
            <summary>
            Delegate method for filtering labels. Useful for performing custom collision detection on labels.
            </summary>
            <param name="labels">The labels to filter.</param>
            <returns>An enumeration over the filtered labels only.</returns>
        </member>
        <member name="T:SharpMap.Data.IWritableFeatureProvider`1">
            <summary>
            Provides an interface for writable data providers.
            </summary>
            <typeparam name="TOid">
            Type of the value used for feature object identifiers.
            </typeparam>
            <remarks>
            <para>
            NOTICE: The writeable interface is not stable yet.
            </para>
            <para>
            The current definition suffices for short term simple use cases, but
            leaves many details to the discretion of the provider.  Things that
            may be addressed in the future include but are not limited to:
            <list type="bullet">
            <item>some level of transaction control</item>
            <item>replace FeatureDataRow{TOid} argument types with IFeatureDataRecord</item>
            <item>add Delete overloads to accept a single OID, or enumeration of OIDs</item>
            <item>notification of provider capabilities</item>
            </list>
            </para>
            <para>
            The current philosophy of the provider interface is to provide  
            primitives operations for updating the data source.  Optimization
            of the process is left to the calling code based on the the current 
            use case.  If the provider is told to update a feature with a 
            particular OID, it may assume the feature exists and update it.
            <para>
            </para>
            Some providers may accept an Oid pre-populated in the Insert methods
            while others will always assign an Oid of their own choosing to the inserted
            features.  If an Oid is supplied by the provider, and with the current
            FeatureDataRow{TOid} implementation, it is good form to update the Oid 
            in the FeatureDataRow with the value actually used.
            </para>
            <para>
            Transaction control is currently left up to the provider, but
            obviously it is a good idea to leave the datasource in a consistent 
            and predictable state based on the success or failure of the operation.
            </para>
            </remarks>
        </member>
        <member name="M:SharpMap.Data.IWritableFeatureProvider.Insert(SharpMap.Data.FeatureDataRow)">
            <summary>
            Inserts a feature into the data source.
            </summary>
            <param name="feature">The feature to insert.</param>
        </member>
        <member name="M:SharpMap.Data.IWritableFeatureProvider.Insert(System.Collections.Generic.IEnumerable{SharpMap.Data.FeatureDataRow})">
            <summary>
            Inserts a set of features into the data source.
            </summary>
            <param name="features">The features to insert.</param>
        </member>
        <member name="M:SharpMap.Data.IWritableFeatureProvider.Update(SharpMap.Data.FeatureDataRow)">
            <summary>
            Updates an existing feature in the data source.
            </summary>
            <param name="feature">The feature to update.</param>
        </member>
        <member name="M:SharpMap.Data.IWritableFeatureProvider.Update(System.Collections.Generic.IEnumerable{SharpMap.Data.FeatureDataRow})">
            <summary>
            Updates a set of existing features in the data source.
            </summary>
            <param name="features">The features to update.</param>
        </member>
        <member name="M:SharpMap.Data.IWritableFeatureProvider.Delete(SharpMap.Data.FeatureDataRow)">
            <summary>
            Deletes a feature from the data source.
            </summary>
            <param name="feature">The feature to delete.</param>
        </member>
        <member name="M:SharpMap.Data.IWritableFeatureProvider.Delete(System.Collections.Generic.IEnumerable{SharpMap.Data.FeatureDataRow})">
            <summary>
            Deletes a set of features from the data source.
            </summary>
            <param name="features">The features to delete.</param>
        </member>
        <member name="M:SharpMap.Data.IWritableFeatureProvider`1.Insert(SharpMap.Data.FeatureDataRow{`0})">
            <summary>
            Inserts a feature into the data source.
            </summary>
            <param name="feature">The feature to insert.</param>
        </member>
        <member name="M:SharpMap.Data.IWritableFeatureProvider`1.Insert(System.Collections.Generic.IEnumerable{SharpMap.Data.FeatureDataRow{`0}})">
            <summary>
            Inserts a set of features into the data source.
            </summary>
            <param name="features">The features to insert.</param>
        </member>
        <member name="M:SharpMap.Data.IWritableFeatureProvider`1.Update(SharpMap.Data.FeatureDataRow{`0})">
            <summary>
            Updates an existing feature in the data source.
            </summary>
            <param name="feature">The feature to update.</param>
        </member>
        <member name="M:SharpMap.Data.IWritableFeatureProvider`1.Update(System.Collections.Generic.IEnumerable{SharpMap.Data.FeatureDataRow{`0}})">
            <summary>
            Updates a set of existing features in the data source.
            </summary>
            <param name="features">The features to update.</param>
        </member>
        <member name="M:SharpMap.Data.IWritableFeatureProvider`1.Delete(SharpMap.Data.FeatureDataRow{`0})">
            <summary>
            Deletes a feature from the data source.
            </summary>
            <param name="feature">The feature to delete.</param>
        </member>
        <member name="M:SharpMap.Data.IWritableFeatureProvider`1.Delete(System.Collections.Generic.IEnumerable{SharpMap.Data.FeatureDataRow{`0}})">
            <summary>
            Deletes a set of features from the data source.
            </summary>
            <param name="features">The features to delete.</param>
        </member>
        <member name="T:SharpMap.Expressions.ExtentsExpression">
            <summary>
            An expression which represents an <see cref="T:GeoAPI.Geometries.IExtents"/> in a
            compound expression or an expression tree.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.ProviderSchemaHelper.CreateSchemaTable">
            <summary>
            Creates an empty schema table.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Column</term>
            <description>
            Column in the schema table which describes the column in the data table.
            </description>
            </listheader>
            <item>
            <term>ColumnName</term>
            <description>
            The name of the column; this might not be unique. 
            If the column name cannot be determined, a null value is returned. 
            This name always reflects the most recent naming of the column 
            in the current view or command text.
            </description>
            </item>
            <item>
            <term>ColumnOrdinal</term>
            <description>
            The ordinal of the column. This is zero for the bookmark column of the row, if any. 
            Other columns are numbered starting with 1. This column cannot contain a null value.
            </description>
            </item>
            <item>
            <term>ColumnSize</term>
            <description>
            The maximum possible length of a value in the column. 
            For columns that use a fixed-length data type, this is the size of the data type.
            </description>
            </item>
            <item>
            <term>NumericPrecision</term>
            <description>
            If DbType is a numeric data type, this is the maximum precision of the column. 
            The precision depends on the definition of the column. 
            If DbType is not a numeric data type, this is a null value. If the underlying 
            table has a precision value for a non-numeric data type, 
            this value is used in the schema table.
            </description>
            </item>
            <item>
            <term>NumericScale</term>
            <description>
            If DbType is Decimal, the number of digits to the right of the decimal point. 
            Otherwise, this is a null value. If the underlying table returns a precision 
            value for a non-numeric data type, this value is used in the schema table.
            </description>
            </item>
            <item>
            <term>DataType</term>
            <description>
            Maps to the common language runtime type of DbType.
            </description>
            </item>
            <item>
            <term>ProviderType</term>
            <description>
            The underlying driver type.
            </description>
            </item>
            <item>
            <term>IsLong</term>
            <description>
            <see langword="true"/> if the column holds a large object type, such as 
            a binary large object (BLOB) or character large object (CLOB); 
            <see langword="false"/> if it is a normal value column.
            </description>
            </item>
            <item>
            <term>AllowDBNull</term>
            <description>
            <see langword="true"/> if the consumer can set the column 
            to a null value or if the driver cannot determine whether the 
            consumer can set the column to a null value. Otherwise, <see langword="false"/>. 
            A column may contain null values, even if it cannot be set to a null value.
            </description>
            </item>
            <item>
            <term>IsReadOnly</term>
            <description>
            <see langword="true"/> if the column cannot be modified; otherwise false.
            </description>
            </item>
            <item>
            <term>IsRowVersion</term>
            <description>
            Set if the column contains a persistent row identifier 
            that cannot be written to, and has no meaningful value 
            except to identity the row.
            </description>
            </item>
            <item>
            <term>IsUnique</term>
            <description>
            <para>
            <see langword="true"/>: No two rows in the base table (the table returned in BaseTableName) 
            can have the same value in this column. IsUnique is guaranteed to be true 
            if the column represents a key by itself or if there is a constraint of 
            type UNIQUE that applies only to this column.
            </para>
            <para>
            <see langword="false"/>: The column can contain duplicate values in the base table. 
            </para>
            <para>
            The default for this column is <see langword="false"/>.
            </para>
            </description>
            </item>
            <item>
            <term>IsKey</term>
            <description>
            <para>
            <see langword="true"/>: The column is one of a set of columns in the rowset that, 
            taken together, uniquely identify the row. The set of columns with 
            IsKey set to true must uniquely identify a row in the rowset. 
            There is no requirement that this set of columns is a minimal set of columns. 
            This set of columns may be generated from a base table primary key, 
            a unique constraint, or a unique index.
            </para>
            <para>
            <see langword="true"/>: The column is not required to uniquely identify the row.
            </para>
            </description>
            </item>
            <item>
            <term>IsAutoIncrement</term>
            <description>
            <see langword="true"/> if the column assigns values to new rows in fixed increments; otherwise false. 
            The default for this column is <see langword="false"/>.
            </description>
            </item>
            </list>
            </remarks>
            <returns>
            A <see cref="T:System.Data.DataTable"/> with one row per column in the target schema, 
            having a set of columns which describe the target column.
            </returns>
        </member>
        <member name="T:SharpMap.Data.Providers.FeatureProvider">
            <summary>
            In-memory provider for arbitrary feature data.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.FeatureProvider.#ctor(GeoAPI.Geometries.IGeometryFactory,System.Data.DataColumn[])">
            <summary>
            Creates a new <see cref="T:SharpMap.Data.Providers.FeatureProvider"/> with the given columns as a schema.
            </summary>
            <param name="factory">
            An <see cref="T:GeoAPI.Geometries.IGeometryFactory"/> instance to create geometry.
            </param>
            <param name="columns">
            The feature schema to create the <see cref="T:SharpMap.Data.Providers.FeatureProvider"/> with.
            </param>
        </member>
        <member name="M:SharpMap.Data.Providers.FeatureProvider.ExecuteFeatureQuery(SharpMap.Expressions.FeatureQueryExpression)">
            <summary>
            Retrieves a <see cref="T:SharpMap.Data.IFeatureDataReader"/> for the features that 
            match the given <paramref name="query"/>.
            </summary>
            <param name="query">Spatial query to execute.</param>
            <returns>An IFeatureDataReader to iterate over the results.</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.FeatureProvider.GetFeatureCount">
            <summary>
            Returns the number of features in the entire dataset.
            </summary>
            <returns>Count of the features in the entire dataset.</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.FeatureProvider.GetSchemaTable">
            <summary>
            Returns a <see cref="T:System.Data.DataTable"/> with rows describing the columns in the schema
            for the configured provider. Provides the same result as 
            <see cref="M:System.Data.IDataReader.GetSchemaTable"/>.
            </summary>
            <seealso cref="M:System.Data.IDataReader.GetSchemaTable"/>
            <returns>A DataTable that describes the column metadata.</returns>
        </member>
        <member name="M:SharpMap.Data.Providers.FeatureProvider.SetTableSchema(SharpMap.Data.FeatureDataTable)">
            <summary>
            Configures a <see cref="T:SharpMap.Data.FeatureDataTable`1"/> with the schema 
            present in the IProvider with the given connection.
            </summary>
            <param name="table">The FeatureDataTable to configure the schema of.</param>
        </member>
        <member name="P:SharpMap.Data.Providers.FeatureProvider.GeometryFactoryProperty">
            <summary>
            Gets a <see cref="T:System.ComponentModel.PropertyDescriptor"/> for 
            <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>'s <see cref="P:SharpMap.Data.Providers.FeatureProvider.GeometryFactory"/> property.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.FeatureProvider.LocaleProperty">
            <summary>
            Gets a <see cref="T:System.ComponentModel.PropertyDescriptor"/> for 
            <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>'s <see cref="P:SharpMap.Data.Providers.FeatureProvider.Locale"/> property.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.FeatureProvider.Locale">
            <summary>
            Gets the locale of the data as a CultureInfo.
            </summary>
        </member>
        <member name="T:SharpMap.Styles.LabelStyle">
            <summary>
            Defines a style used for rendering labels.
            </summary>
        </member>
        <member name="M:SharpMap.Styles.LabelStyle.#ctor">
            <summary>
            Initializes a new <see cref="T:SharpMap.Styles.LabelStyle"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.TextRenderingHint">
            <summary>
            Specifies the quality of text rendering.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.Font">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Styles.StyleFont"/> used to draw the label.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.Foreground">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Styles.StyleBrush"/> used to fill the 
            font for the label.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.Background">
            <summary>
            Gets or sets the background <see cref="T:SharpMap.Styles.StyleBrush"/> of the label. 
            </summary>
            <remarks>
            Set to transparent brush or null if background isn't needed.
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.Halo">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Styles.StylePen"/> which 
            creates a halo around the text.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.Offset">
            <summary>
            Gets or sets a <see cref="T:SharpMap.Rendering.Rendering2D.Point2D"/> which 
            specifies relative position of labels with respect to feature's label
            <see cref="P:SharpMap.Rendering.ILabel`4.Location"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.CollisionDetection">
            <summary>
            Gets whether collision detection is enabled for the labels.
            If set to true, label collision will be applied.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.CollisionBuffer">
            <summary>
            Gets or sets the distance around label where collision buffer is active.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.HorizontalAlignment">
            <summary>
            Gets or sets the <see cref="P:SharpMap.Styles.LabelStyle.HorizontalAlignment"/> value
            of the text in relation to the label 
            <see cref="P:SharpMap.Rendering.ILabel`4.Location"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.VerticalAlignment">
            <summary>
            Gets or sets the <see cref="P:SharpMap.Styles.LabelStyle.VerticalAlignment"/> value
            of the text in relation to the label
            <see cref="P:SharpMap.Rendering.ILabel`4.Location"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LabelStyle.CollisionDetectionType">
            <summary>
            Gets or sets the type of collision test performed.
            </summary>
        </member>
        <member name="T:SharpMap.Styles.LineDashStyle">
            <summary>
            An enumeration of the types of dash styles available to a StylePen.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LineDashStyle.Solid">
            <summary>
            Draws a solid line.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LineDashStyle.Dash">
            <summary>
            Draws a dashed line.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LineDashStyle.Dot">
            <summary>
            Draws a dotted line.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LineDashStyle.DashDot">
            <summary>
            Draws an alternating dash and dot.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LineDashStyle.DashDotDot">
            <summary>
            Draws an alternating dash and two dots.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.LineDashStyle.Custom">
            <summary>
            Uses the <see cref="P:SharpMap.Styles.StylePen.DashPattern"/> values for the dash style.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Rendering2D.Symbol2D">
            <summary>
            Represents a 2 dimensional graphical symbol used for point data on a map.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Symbol2D.#ctor(SharpMap.Rendering.Rendering2D.Size2D)">
            <summary>
            Creates a new, blank symbol with the given <paramref name="size"/>.
            </summary>
            <param name="size">The base size of the symbol.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Symbol2D.#ctor(System.IO.Stream,SharpMap.Rendering.Rendering2D.Size2D)">
            <summary>
            Creates a new symbol with the given <paramref name="symbolData">data</paramref>
            and <paramref name="size"/>.
            </summary>
            <param name="symbolData">The data which encodes this symbol.</param>
            <param name="size">The base size of the symbol.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Symbol2D.#ctor(System.Byte[],SharpMap.Rendering.Rendering2D.Size2D)">
            <summary>
            Creates a new symbol with the given <paramref name="symbolData">data</paramref>
            and <paramref name="size"/>.
            </summary>
            <param name="symbolData">The data which encodes this symbol.</param>
            <param name="size">The base size of the symbol.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Symbol2D.ToString">
            <summary>
            Returns a String description of this symbol.
            </summary>
            <returns>
            A String representing the value of this <see cref="T:SharpMap.Rendering.Rendering2D.Symbol2D"/>.
            </returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Symbol2D.Scale(System.Double)">
            <summary>
            Scales this symbol's width and height.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Symbol2D.AffineTransform">
            <summary>
            Gets or sets a <see cref="T:SharpMap.Rendering.Rendering2D.Matrix2D"/> object used 
            to transform this <see cref="T:SharpMap.Rendering.Rendering2D.Symbol2D"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Symbol2D.Rotation">
            <summary>
            Gets or sets the amount of rotation to render this symbol with in radians.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Symbol2D.ScaleX">
            <summary>
            Gets or sets a value by which to scale this symbol's width.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Symbol2D.ScaleY">
            <summary>
            Gets or sets a value by which to scale this symbol's height.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Rendering2D.Label2D">
            <summary>
            Encapsulates a label glyph on a map.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.ILabel`4">
            <summary>
            Encapsulates a label glyph on a map.
            </summary>
            <typeparam name="TPoint">Type of point.</typeparam>
            <typeparam name="TSize">Type of size.</typeparam>
            <typeparam name="TRectangle">Type of rectangle.</typeparam>
            <typeparam name="TPath">Type of graphics path.</typeparam>
        </member>
        <member name="P:SharpMap.Rendering.ILabel`4.CollisionBuffer">
            <summary>
            Gets or sets the label collision buffer.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.ILabel`4.FlowPath">
            <summary>
            Gets or sets a path along which label runs.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.ILabel`4.Font">
            <summary>
            Gets or sets the label font.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.ILabel`4.Location">
            <summary>
            Gets or sets the label's world location.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.ILabel`4.Offset">
            <summary>
            Gets or sets the label's offset within the <see cref="P:SharpMap.Rendering.ILabel`4.CollisionBuffer"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.ILabel`4.Priority">
            <summary>
            Gets or sets a priority value used in label layout.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.ILabel`4.Rotation">
            <summary>
            Gets or sets the label's rotation.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.ILabel`4.Style">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Styles.LabelStyle"/> of this label.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.ILabel`4.Text">
            <summary>
            Gets or sets the text of the label.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Label2D.#ctor(System.String,SharpMap.Rendering.Rendering2D.Point2D,SharpMap.Styles.LabelStyle)">
            <summary>
            Initializes a new Label instance.
            </summary>
            <param name="text">Text to write.</param>
            <param name="position">Position of label.</param>
            <param name="style">The style to use in rendering the label.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Label2D.#ctor(System.String,SharpMap.Rendering.Rendering2D.Point2D,System.Single,System.Int32,SharpMap.Rendering.Rendering2D.Size2D,SharpMap.Styles.LabelStyle)">
            <summary>
            Initializes a new Label instance.
            </summary>
            <param name="text">Text to write</param>
            <param name="location">Position of label</param>
            <param name="rotation">Rotation</param>
            <param name="priority">Label priority used for collision detection.</param>
            <param name="collisionBuffer">Area around label for collision detection.</param>
            <param name="style">The style to use in rendering the label.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Label2D.ToString">
            <summary>
            Creates a String representation of the label.
            </summary>
            <returns>A String which represents the label instance.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Label2D.CompareTo(SharpMap.Rendering.Rendering2D.Label2D)">
            <summary>
            Tests if two label boxes intersects
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Label2D.Compare(SharpMap.Rendering.Rendering2D.Label2D,SharpMap.Rendering.Rendering2D.Label2D)">
            <summary>
            Checks if two labels intersect
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Label2D.CollisionBuffer">
            <summary>
            Gets or sets the region which collision is computed for.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Label2D.FlowPath">
            <summary>
            Gets or sets the path on which to flow the label.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Label2D.Font">
            <summary>
            Gets or sets the font to render the label with.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Label2D.Location">
            <summary>
            Gets or sets the label position.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Label2D.Priority">
            <summary>
            Gets or sets the relative priority in layout of the label.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Label2D.Rotation">
            <summary>
            Gets or sets the rotation the label is rendered with. Represented as radians counter-clockwise.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Label2D.Style">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Styles.LabelStyle"/> of this label.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Label2D.Text">
            <summary>
            Gets or sets the text of the label.
            </summary>
        </member>
        <member name="T:SharpMap.Presentation.Presenters.MapPresenter2D">
            <summary>
            Provides the input-handling and view-updating logic for a 2D map view.
            </summary>
        </member>
        <member name="M:SharpMap.Presentation.Presenters.MapPresenter2D.#ctor(SharpMap.Map,SharpMap.Presentation.Views.IMapView2D)">
            <summary>
            Creates a new MapPresenter2D.
            </summary>
            <param name="map">The map to present.</param>
            <param name="mapView">The view to present the map on.</param>
        </member>
        <member name="M:SharpMap.Presentation.Presenters.MapPresenter2D.ZoomToExtentsInternal">
            <summary>
            Zooms to the extents of all visible layers in the current <see cref="T:SharpMap.Map"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Presentation.Presenters.MapPresenter2D.ZoomToViewBoundsInternal(SharpMap.Rendering.Rendering2D.Rectangle2D)">
            <summary>
            Zooms the map to fit a view bounding box. 
            </summary>
            <remarks>
            Transforms view coordinates into
            world coordinates using <see cref="P:SharpMap.Presentation.Presenters.MapPresenter2D.ToWorldTransformInternal"/> 
            to perform zoom. 
            This means the heuristic to determine the final value of 
            <see cref="P:SharpMap.Presentation.Presenters.MapPresenter2D.ViewEnvelopeInternal"/> after the zoom is the same as in 
            <see cref="M:SharpMap.Presentation.Presenters.MapPresenter2D.ZoomToWorldBoundsInternal(GeoAPI.Geometries.IExtents2D)"/>.
            </remarks>
            <param name="viewBounds">
            The view bounds, translated into world bounds,
            to set the zoom to.
            </param>
        </member>
        <member name="M:SharpMap.Presentation.Presenters.MapPresenter2D.ZoomToWorldBoundsInternal(GeoAPI.Geometries.IExtents2D)">
            <summary>
            Zooms the map to fit a world bounding box.
            </summary>
            <remarks>
            The <paramref name="zoomBox"/> value is stretched
            to fit the current view. For example, if a view has a size of
            100 x 100, which is a 1:1 ratio, and the bounds of zoomBox are 
            200 x 100, which is a 2:1 ratio, the bounds are stretched to be 
            200 x 200 to match the view size ratio. This ensures that at least
            all of the area selected in the zoomBox is displayed, and possibly more
            area.
            </remarks>
            <param name="zoomBox">
            <see cref="T:GeoAPI.Geometries.IExtents2D"/> to set zoom to.
            </param>
        </member>
        <member name="M:SharpMap.Presentation.Presenters.MapPresenter2D.ZoomToWorldWidthInternal(System.Double)">
            <summary>
            Zooms the view to the given width.
            </summary>
            <remarks>
            View modifiers <see cref="P:SharpMap.Presentation.Presenters.MapPresenter2D.MinimumWorldWidthInternal"/>, 
            <see cref="P:SharpMap.Presentation.Presenters.MapPresenter2D.MaximumWorldWidthInternal"/> and 
            <see cref="P:SharpMap.Presentation.Presenters.MapPresenter2D.WorldAspectRatioInternal"/>
            are taken into account when zooming to this width.
            </remarks>
        </member>
        <member name="M:SharpMap.Presentation.Presenters.MapPresenter2D.GetRenderer``2">
            <summary>
            Gets the registered renderer for the given layer type.
            </summary>
            <typeparam name="TRenderer">The type to return the renderer as.</typeparam>
            <typeparam name="TLayer">The type of the layer to retrieve the layer for.</typeparam>
            <returns>
            The renderer registered for the layer type <typeparamref name="TLayer"/>.
            </returns>
        </member>
        <member name="M:SharpMap.Presentation.Presenters.MapPresenter2D.GetRenderer``1(System.String)">
            <summary>
            Gets the registered renderer for the given <paramref name="name"/>.
            </summary>
            <param name="name">
            The name under which the desired renderer has previously been registered.
            </param>
            <typeparam name="TRenderer">The type to return the renderer as.</typeparam>
            <returns>
            The renderer registered by <paramref name="name"/>.
            </returns>
        </member>
        <member name="M:SharpMap.Presentation.Presenters.MapPresenter2D.GetRenderer``1(SharpMap.Layers.ILayer)">
            <summary>
            Gets the registered renderer for the given <paramref name="layer"/>.
            </summary>
            <param name="layer">
            The specific layer instance for which the desired renderer has previously been registered.
            </param>
            <typeparam name="TRenderer">The type to return the renderer as.</typeparam>
            <returns>
            The renderer registered for <paramref name="layer"/>.
            </returns>
        </member>
        <member name="M:SharpMap.Presentation.Presenters.MapPresenter2D.RegisterRendererForLayerType(System.Type,SharpMap.Rendering.IRenderer)">
            <summary>
            Registers a renderer for a given layer type.
            </summary>
            <param name="layerType">Type of the layer to register a renderer for.</param>
            <param name="renderer">The <see cref="T:SharpMap.Rendering.IRenderer"/> instance to register.</param>
        </member>
        <member name="M:SharpMap.Presentation.Presenters.MapPresenter2D.RenderAllLayers">
            <summary>
            Renders all layers and displays the result on the view.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Presenters.MapPresenter2D.BackgroundColorInternal">
            <summary>
            Gets or sets map background color.
            </summary>
            <remarks>
            Defaults to transparent.
            </remarks>
        </member>
        <member name="P:SharpMap.Presentation.Presenters.MapPresenter2D.GeoCenterInternal">
            <summary>
            Gets or sets center of map in world coordinates.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Presenters.MapPresenter2D.MaximumWorldWidthInternal">
            <summary>
            Gets or sets the minimum width in world units of the view.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Presenters.MapPresenter2D.MinimumWorldWidthInternal">
            <summary>
            Gets or sets the minimum width in world units of the view.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Presenters.MapPresenter2D.PixelWorldWidthInternal">
            <summary>
            Gets the width of a pixel in world coordinate units.
            </summary>
            <remarks>
            The value returned is the same as <see cref="P:SharpMap.Presentation.Presenters.MapPresenter2D.WorldUnitsPerPixelInternal"/>.
            </remarks>
        </member>
        <member name="P:SharpMap.Presentation.Presenters.MapPresenter2D.PixelWorldHeightInternal">
            <summary>
            Gets the height of a pixel in world coordinate units.
            </summary>
            <remarks>
            The value returned is the same as <see cref="P:SharpMap.Presentation.Presenters.MapPresenter2D.WorldUnitsPerPixelInternal"/> 
            unless <see cref="P:SharpMap.Presentation.Presenters.MapPresenter2D.WorldAspectRatioInternal"/> is different from 1.
            </remarks>
        </member>
        <member name="P:SharpMap.Presentation.Presenters.MapPresenter2D.RasterRenderer">
            <summary>
            Gets the instance of the concrete
            <see cref="T:SharpMap.Rendering.Rendering2D.RasterRenderer2D`1"/> used
            for the specific display technology which a base class
            is created to support.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Presenters.MapPresenter2D.SelectionInternal">
            <summary>
            A selection on a view.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Presenters.MapPresenter2D.ToViewTransformInternal">
            <summary>
            Gets a <see cref="T:SharpMap.Rendering.Rendering2D.Matrix2D"/> used to project the world
            coordinate system into the view coordinate system. 
            The inverse of the <see cref="P:SharpMap.Presentation.Presenters.MapPresenter2D.ToWorldTransformInternal"/> matrix.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Presenters.MapPresenter2D.ToWorldTransformInternal">
            <summary>
            Gets a <see cref="T:SharpMap.Rendering.Rendering2D.Matrix2D"/> used to reverse the view projection
            transform to get world coordinates.
            The inverse of the <see cref="P:SharpMap.Presentation.Presenters.MapPresenter2D.ToViewTransformInternal"/> matrix.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Presenters.MapPresenter2D.VectorRenderer">
            <summary>
            Gets the instance of the concrete
            <see cref="T:SharpMap.Rendering.Rendering2D.VectorRenderer2D`1"/> used
            for the specific display technology which a base class
            is created to support.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Presenters.MapPresenter2D.ViewEnvelopeInternal">
            <summary>
            Gets or sets the extents of the current view in world units.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Presenters.MapPresenter2D.WorldAspectRatioInternal">
            <summary>
            Gets or sets the aspect ratio of the <see cref="P:SharpMap.Presentation.Presenters.MapPresenter2D.WorldHeightInternal"/> 
            to the <see cref="P:SharpMap.Presentation.Presenters.MapPresenter2D.WorldWidthInternal"/>.
            </summary>
            <remarks> 
            A value less than 1 will make the map stretch upwards 
            (the view will cover less world distance vertically), 
            and greater than 1 will make it more squat (the view will 
            cover more world distance vertically).
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws an exception when value is 0 or less.
            </exception>
        </member>
        <member name="P:SharpMap.Presentation.Presenters.MapPresenter2D.WorldHeightInternal">
            <summary>
            Gets the height of view in world units.
            </summary>
            <returns>
            The height of the view in world units, taking into account 
            <see cref="P:SharpMap.Presentation.Presenters.MapPresenter2D.WorldAspectRatioInternal"/>  
            (<see cref="P:SharpMap.Presentation.Presenters.MapPresenter2D.WorldWidthInternal"/> * <see cref="P:SharpMap.Presentation.Presenters.MapPresenter2D.WorldAspectRatioInternal"/> * 
            <see cref="P:SharpMap.Presentation.Presenters.BasePresenter`1.View"/> ViewSize height 
            / <see cref="P:SharpMap.Presentation.Presenters.BasePresenter`1.View"/> ViewSize width).
            </returns>
        </member>
        <member name="P:SharpMap.Presentation.Presenters.MapPresenter2D.WorldUnitsPerPixelInternal">
            <summary>
            Gets the width of a pixel in world coordinate units.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Presenters.MapPresenter2D.WorldWidthInternal">
            <summary>
            Gets the width of view in world units.
            </summary>
            <returns>
            The width of the view in world units 
            (<see cref="P:SharpMap.Presentation.Presenters.BasePresenter`1.View"/> 
            height * <see cref="P:SharpMap.Presentation.Presenters.MapPresenter2D.WorldUnitsPerPixelInternal"/>).
            </returns>
        </member>
        <member name="P:SharpMap.Presentation.Presenters.MapPresenter2D.IsViewMatrixInitialized">
            <summary>
            Gets a value indicating if all the parameters needed to compute a view
            have been set and the world-to-view matrix has been initilized.
            </summary>
        </member>
        <member name="T:SharpMap.Presentation.Views.IToolsView">
            <summary>
            Provides the interface for a view to display the 
            <see cref="T:SharpMap.Tools.IMapTool"/> instances available to act on the <see cref="T:SharpMap.Map"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Views.IToolsView.SelectedTool">
            <summary>
            Gets or sets the currently selected tool.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Views.IToolsView.Tools">
            <summary>
            Gets or sets a <see cref="T:SharpMap.Tools.IMapToolSet"/> to display.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Figure`2">
            <summary>
            Represents a graphical figure, which is a portion of a 
            <see cref="T:SharpMap.Rendering.Path`2"/>.
            </summary>
            <typeparam name="TPoint">Type of point to use in the figure.</typeparam>
            <typeparam name="TBounds">Type of rectilinear shape to bound this figure.</typeparam>
        </member>
        <member name="M:SharpMap.Rendering.Figure`2.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new open <see cref="T:SharpMap.Rendering.Figure`2"/> 
            from the given points.
            </summary>
            <param name="points">The points from which to create the figure.</param>
        </member>
        <member name="M:SharpMap.Rendering.Figure`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Creates a new <see cref="T:SharpMap.Rendering.Figure`2"/> 
            from the given points.
            </summary>
            <param name="points">The points from which to create the figure.</param>
            <param name="isClosed">True to close the path, false to keep it open.</param>
        </member>
        <member name="M:SharpMap.Rendering.Figure`2.ToString">
            <summary>
            Returns a String representation of this <see cref="!:Figure"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Figure`2.GetHashCode">
            <summary>
            Returns a value to use in hash sets.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Figure`2.Clone">
            <summary>
            Creates an exact copy of this figure.
            </summary>
            <returns>A point-by-point copy of this figure.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Figure`2.Close">
            <summary>
            Marks the figure as closed.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Figure`2.ComputeBounds">
            <summary>
            Computes the minimum bounding rectilinear shape that contains this figure.
            </summary>
            <returns>
            A <typeparamref name="TBounds"/> instance describing a minimally bounding 
            rectilinear space which contains the figure.
            </returns>
        </member>
        <member name="M:SharpMap.Rendering.Figure`2.CreateFigure(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Creates a new figure with the given points, either open or closed.
            </summary>
            <param name="points">Points to use in sequence to create the figure.</param>
            <param name="isClosed">True if the figure is closed, false otherwise.</param>
            <returns>A new Figure instance.</returns>
        </member>
        <member name="P:SharpMap.Rendering.Figure`2.Bounds">
            <summary>
            Gets the bounds of this figure.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Figure`2.EmptyBounds">
            <summary>
            Gets a value indicating an empty bounds shape.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Figure`2.IsClosed">
            <summary>
            Gets true if the figure is closed, false if open.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Figure`2.Points">
            <summary>
            A list of the points in this figure.
            </summary>
        </member>
        <member name="T:SharpMap.Presentation.StyleTypeDescriptor">
            <summary>
            Provides a description of a layer style.
            </summary>
        </member>
        <member name="T:SharpMap.Layers.LabelLayer">
            <summary>
            A map layer of feature labels.
            </summary>
            <example>
            Creates a new label layer and sets the label text to the 
            "Name" column in the FeatureDataTable of the datasource
            <code lang="C#">
            // TODO: redo example
            </code>
            </example>
        </member>
        <member name="T:SharpMap.Layers.FeatureLayer">
            <summary>
            Represents a map layer of features.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.FeatureLayer.#ctor(System.String,SharpMap.Styles.FeatureStyle,SharpMap.Data.IFeatureProvider)">
            <summary>
            Initializes a new features layer with the given name, style and datasource
            and which handles <see cref="E:SharpMap.Data.FeatureDataTable.SelectRequested"/> 
            events from <see cref="P:SharpMap.Layers.FeatureLayer.Features"/>.
            </summary>
            <param name="layername">Name of the layer.</param>
            <param name="style">Style to apply to the layer.</param>
            <param name="dataSource">Data source.</param>
        </member>
        <member name="P:SharpMap.Layers.FeatureLayer.DataSource">
            <summary>
            Gets the data source for this layer as a more 
            strongly-typed IFeatureProvider.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.FeatureLayer.Features">
            <summary>
            Gets a <see cref="T:SharpMap.Data.FeatureDataTable"/> of cached features for the layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.FeatureLayer.HighlightedFeatures">
            <summary>
            Gets a <see cref="T:SharpMap.Data.FeatureDataView"/> of features which have been 
            highlighted.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.FeatureLayer.Locale">
            <summary>
            Gets the <see cref="T:System.Globalization.CultureInfo"/> used to encode text
            and format numbers for this layer.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.FeatureLayer.SelectedFeatures">
            <summary>
            Gets a <see cref="T:SharpMap.Data.FeatureDataView"/> of features which have been 
            selected.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.FeatureLayer.Style">
            <summary>
            Gets or sets the layer style as a <see cref="T:SharpMap.Styles.FeatureStyle"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Layers.FeatureLayer.AreFeaturesSelectable">
            <summary>
            Gets or sets a value which allows features in the layer to be selected
            or not.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.LabelLayer.#ctor(System.String,SharpMap.Data.IFeatureProvider)">
            <summary>
            Creates a new instance of a LabelLayer with the given name.
            </summary>
            <param name="layerName">Name of the layer.</param>
            <param name="dataSource">Data source provider for the layer.</param>
        </member>
        <member name="M:SharpMap.Layers.LabelLayer.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.LabelLayer.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>
            A new <see cref="T:SharpMap.Layers.LabelLayer"/> with the same <see cref="!:LabelLayer.LayerName"/>
            and <see cref="P:SharpMap.Layers.FeatureLayer.DataSource"/>.
            </returns>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.MultipartGeometryLabelingBehaviour">
            <summary>
            Gets or sets labeling behavior on multipart geometries.
            </summary>
            <remarks>
            Default value is <see cref="F:SharpMap.Layers.MultipartGeometryLabelingBehavior.All"/>.
            </remarks>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.RotationColumn">
            <summary>
            Gets or sets the name of the data column from where the label rotation is derived.
            If this is empty, rotation will be zero, or aligned to a linestring.
            Rotation are in degrees (positive = clockwise).
            </summary>
        </member>
        <member name="P:SharpMap.Layers.LabelLayer.Priority">
            <summary>
            Gets or sets a value indication the priority of the 
            label in cases of label-collision detection.
            </summary>
        </member>
        <member name="T:SharpMap.Layers.LabelLayer.GenerateLabelTextDelegate">
            <summary>
            Delegate method for creating advanced label text.
            </summary>
            <param name="feature">The feature to label.</param>
            <returns>A String to display as the label for the feature.</returns>
        </member>
        <member name="T:SharpMap.Data.FeatureDataTable">
            <summary>
            Represents an in-memory table of feature data. 
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.#ctor(GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a <see cref="T:SharpMap.Data.FeatureDataTable"/> with an name of <see cref="F:System.String.Empty"/> and 
            the given <see cref="T:GeoAPI.Geometries.IGeometryFactory"/>
            instance used to create <see cref="T:GeoAPI.Geometries.IGeometry"/> instances.
            </summary>
            <param name="geometryFactory">
            The <see cref="T:GeoAPI.Geometries.IGeometryFactory"/> to use to create 
            <see cref="T:GeoAPI.Geometries.IGeometry"/> instances.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SharpMap.Data.FeatureDataTable.#ctor(System.String,GeoAPI.Geometries.IGeometryFactory)" -->
        <member name="M:SharpMap.Data.FeatureDataTable.#ctor(System.Data.DataTable,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Intitalizes a new instance of the FeatureDataTable class and
            copies the name and structure of the given <paramref name="table"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.AddRow(SharpMap.Data.FeatureDataRow)">
            <summary>
            Adds a feature row to the <see cref="T:SharpMap.Data.FeatureDataTable"/>.
            </summary>
            <param name="row">The <see cref="T:SharpMap.Data.FeatureDataRow"/> to add.</param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.Clone">
            <summary>
            Clones the structure of the <see cref="T:SharpMap.Data.FeatureDataTable"/>, 
            including all <see cref="T:SharpMap.Data.FeatureDataTable"/> schemas and constraints. 
            </summary>
            <returns>
            A <see cref="T:SharpMap.Data.FeatureDataTable"/> with the same
            schema and constraints.
            </returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.CloneTo(SharpMap.Data.FeatureDataTable)">
            <summary>
            Clones the schema of the <see cref="T:SharpMap.Data.FeatureDataTable"/>
            to another <see cref="T:SharpMap.Data.FeatureDataTable"/> instance.
            </summary>
            <param name="table">
            <see cref="T:SharpMap.Data.FeatureDataTable"/> to copy the schema to.
            </param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.Find(System.Object)">
            <summary>
            Finds a feature given its id.
            </summary>
            <param name="key">The feature object id.</param>
            <returns>
            The feature row identified by <paramref name="key"/>, or <see langword="null"/>
            if the feature row is not found.
            </returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.GetChanges">
            <summary>
            Gets a copy of the <see cref="T:SharpMap.Data.FeatureDataTable"/> that contains all 
            changes made to it since it was loaded or <see cref="M:System.Data.DataTable.AcceptChanges"/> 
            was last called.
            </summary>
            <returns>
            A copy of the changes from this <see cref="T:SharpMap.Data.FeatureDataTable"/>, 
            or <see langword="null"/> if no changes are found.
            </returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.GetEnumerator">
            <summary>
            Returns an enumerator for enumering the rows of the 
            <see cref="T:SharpMap.Data.FeatureDataTable"/>.
            </summary>
            <returns>An enumeration of all <see cref="T:SharpMap.Data.FeatureDataRow"/>s in the table.</returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.ImportRow(SharpMap.Data.FeatureDataRow)">
            <summary>
            Imports a <see cref="T:SharpMap.Data.FeatureDataRow"/> into the FeatureDataTable.
            </summary>
            <param name="featureRow">The feature row to import.</param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
            <summary>
            Fills a <see cref="T:SharpMap.Data.FeatureDataTable"/> with values from a data source 
            using the supplied <see cref="T:System.Data.IDataReader"/>. If the DataTable already 
            contains rows, the incoming data from the data source is merged with the 
            existing rows.
            </summary>
            <param name="reader">
            <see cref="T:System.Data.IDataReader"/> used as source of row data.
            </param>
            <param name="loadOption">
            A <see cref="T:System.Data.LoadOption"/> value to control how rows are imported.
            </param>
            <param name="errorHandler">
            A callback method to get notification of errors in the load.
            </param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.Load(SharpMap.Data.IFeatureDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
            <summary>
            Fills a <see cref="T:SharpMap.Data.FeatureDataTable"/> with values from a data source 
            using the supplied <see cref="T:SharpMap.Data.IFeatureDataReader"/>. If the DataTable already 
            contains rows, the incoming data from the data source is merged with the 
            existing rows.
            </summary>
            <param name="reader">
            <see cref="T:SharpMap.Data.IFeatureDataReader"/> used as source of feature row data.
            </param>
            <param name="loadOption">
            A <see cref="T:System.Data.LoadOption"/> value to control how rows are imported.
            </param>
            <param name="errorHandler">
            A callback method to get notification of errors in the load.
            </param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.Merge(SharpMap.Data.FeatureDataTable)">
            <summary>
            Merges the features of <paramref name="features"/> into the 
            <see cref="T:SharpMap.Data.FeatureDataTable"/>, overwriting any changes.
            </summary>
            <param name="features">
            The <see cref="T:SharpMap.Data.FeatureDataTable"/> source from which features are merged.
            </param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.Merge(SharpMap.Data.FeatureDataTable,System.Boolean)">
            <summary>
            Merges the features of <paramref name="features"/> into the 
            <see cref="T:SharpMap.Data.FeatureDataTable"/>, indicating whether current feature changes
            should be preserved or not.
            </summary>
            <param name="features">
            The <see cref="T:SharpMap.Data.FeatureDataTable"/> source from which features are merged.
            </param>
            <param name="preserveChanges">
            Determines whether changes in the current <see cref="T:SharpMap.Data.FeatureDataTable"/> are preserved:
            <see langword="true"/> preserves them, <see langword="false"/> overwrites them.</param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.Merge(SharpMap.Data.FeatureDataTable,System.Boolean,SharpMap.Data.SchemaMergeAction)">
            <summary>
            Merges the features of <paramref name="features"/> into the 
            <see cref="T:SharpMap.Data.FeatureDataTable"/>, indicating whether current feature changes
            should be preserved or not.
            </summary>
            <param name="features">
            The <see cref="T:SharpMap.Data.FeatureDataTable"/> source from which features are merged.
            </param>
            <param name="preserveChanges">
            Determines whether changes in the current <see cref="T:SharpMap.Data.FeatureDataTable"/> are preserved:
            <see langword="true"/> preserves them, <see langword="false"/> overwrites them.</param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.MergeSchemaTo(SharpMap.Data.FeatureDataTable)">
            <summary>
            Merges schema from the FeatureDataTable to a target FeatureDataTable,
            adding columns and key information to the target.
            </summary>
            <param name="target">The target of the schema merge.</param>
            <remarks>
            Calls <see cref="M:SharpMap.Data.FeatureDataTable.MergeSchemaTo(SharpMap.Data.FeatureDataTable,SharpMap.Data.SchemaMergeAction)"/>
            with SchemaMergeAction.Add | SchemaMergeAction.Key.
            </remarks>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.MergeSchemaTo(SharpMap.Data.FeatureDataTable,SharpMap.Data.SchemaMergeAction)">
            <summary>
            Merges schema from the FeatureDataTable to a target FeatureDataTable.
            </summary>
            <param name="target">The target of the schema merge.</param>
            <param name="schemaMergeAction">
            Option to specify how to merge the schemas.
            </param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.MergeSchemaFrom(System.Data.DataTable)">
            <summary>
            Merges schema from a source <see cref="T:System.Data.DataTable"/> 
            to the <see cref="T:SharpMap.Data.FeatureDataTable"/>,
            adding columns and key information.
            </summary>
            <param name="source">The source of the schema merge.</param>
            <remarks>
            Calls <see cref="!:MergeSchemaFrom(FeatureDataTable, SchemaMergeAction)"/>
            with SchemaMergeAction.Add | SchemaMergeAction.Key.
            </remarks>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.MergeSchemaFrom(System.Data.DataTable,SharpMap.Data.SchemaMergeAction)">
            <summary>
            Merges schema to the <see cref="T:SharpMap.Data.FeatureDataTable"/> from a source 
            <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="source">The source of the schema merge.</param>
            <param name="schemaMergeAction">
            Option to specify how to merge the schemas.
            </param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.NewRow">
            <summary>
            Creates a new FeatureDataRow with the same schema as the table.
            </summary>
            <returns>
            A new <see cref="T:SharpMap.Data.FeatureDataRow"/> with the same schema as the table.
            </returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.NewRow(System.Boolean)">
            <summary>
            Creates a new FeatureDataRow with the same schema as the table,
            and a value indicating whether it is fully loaded.
            </summary>
            <param name="isFullyLoaded">
            A value indicating whether the row is fully loaded from the data source
            or not (lazy-loaded).
            </param>
            <returns>
            A new <see cref="T:SharpMap.Data.FeatureDataRow"/> with the same schema as the table.
            </returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.RemoveRow(SharpMap.Data.FeatureDataRow)">
            <summary>
            Removes the row from the table
            </summary>
            <param name="row">Row to remove</param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.Select(GeoAPI.Geometries.IExtents)">
            <summary>
            Selects a set of <see cref="T:SharpMap.Data.FeatureDataRow"/> instances 
            which intersect with the given <paramref name="bounds"/>.
            </summary>
            <param name="bounds">
            The <see cref="T:GeoAPI.Geometries.IExtents"/> to perform intersection testing with.
            </param>
            <returns>
            The set of <see cref="T:SharpMap.Data.FeatureDataRow"/>s which intersect 
            <paramref name="bounds"/>.
            </returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.Select(GeoAPI.Geometries.IGeometry)">
            <summary>
            Selects a set of <see cref="T:SharpMap.Data.FeatureDataRow"/> instances 
            which intersect with the given <paramref name="geometry"/>.
            </summary>
            <param name="geometry">
            The <see cref="T:GeoAPI.Geometries.IGeometry"/> to perform intersection testing with.
            </param>
            <returns>
            The set of <see cref="T:SharpMap.Data.FeatureDataRow"/>s which intersect 
            <paramref name="geometry"/>.
            </returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.CreateInstance">
            <summary>
            Creates and returns a new instance of a FeatureDataTable.
            </summary>
            <returns>An empty FeatureDataTable.</returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.GetRowType">
            <summary>
            Returns the FeatureDataRow type.
            </summary>
            <returns>The <see cref="T:System.Type"/> <see cref="T:SharpMap.Data.FeatureDataRow"/>.</returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.OnTableCleared(System.Data.DataTableClearEventArgs)">
            <summary>
            Clears the spatial index (if one exists) and calls 
            <see cref="M:System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)"/> to have the 
            <see cref="E:System.Data.DataTable.TableCleared"/> event raised.
            </summary>
            <param name="e">Event args identifying table being cleared.</param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.NewRowFromBuilder(System.Data.DataRowBuilder)">
            <summary>
            Creates a new FeatureDataRow with the same schema as the table, 
            based on a datarow builder.
            </summary>
            <param name="builder">
            The DataRowBuilder instance to use to construct
            a new row.
            </param>
            <returns>A new DataRow using the schema in the DataRowBuilder.</returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)">
            <summary>
            Raises the FeatureDataRowChanged event. 
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)">
            <summary>
            Raises the FeatureDataRowChanging event. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)">
            <summary>
            Raises the FeatureDataRowDeleted event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)">
            <summary>
            Raises the FeatureDataRowDeleting event. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:SharpMap.Data.FeatureDataTable.SelectRequested">
            <summary>
            Event which occurs when a <see cref="M:SharpMap.Data.FeatureDataTable.Select(GeoAPI.Geometries.IExtents)"/> method is called
            on the <see cref="T:SharpMap.Data.FeatureDataTable"/>.
            </summary>
        </member>
        <member name="E:SharpMap.Data.FeatureDataTable.FeatureDataRowChanged">
            <summary>
            Occurs after a FeatureDataRow has been changed successfully. 
            </summary>
        </member>
        <member name="E:SharpMap.Data.FeatureDataTable.FeatureDataRowChanging">
            <summary>
            Occurs when a FeatureDataRow is changing. 
            </summary>
        </member>
        <member name="E:SharpMap.Data.FeatureDataTable.FeatureDataRowDeleted">
            <summary>
            Occurs after a row in the table has been deleted.
            </summary>
        </member>
        <member name="E:SharpMap.Data.FeatureDataTable.FeatureDataRowDeleting">
            <summary>
            Occurs before a row in the table is about to be deleted.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataTable.Extents">
            <summary>
            Gets the full extents of all features in the feature table.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataTable.FeatureCount">
            <summary>
            Gets the number of feature rows in the feature table.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataTable.Item(System.Int32)">
            <summary>
            Gets the feature data row at the specified index.
            </summary>
            <param name="index">Index of the row to retrieve.</param>
            <returns>
            The <see cref="T:SharpMap.Data.FeatureDataRow"/> at the given <paramref name="index"/>.
            </returns>
        </member>
        <member name="P:SharpMap.Data.FeatureDataTable.IsSpatiallyIndexed">
            <summary>
            Gets or sets a value indicating if the table is spatially indexed.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataTable.GeometryFactory">
            <summary>
            Gets the <see cref="T:GeoAPI.Geometries.IGeometryFactory"/> assigned to the 
            <see cref="T:SharpMap.Data.FeatureDataTable"/> when it was 
            <see cref="M:SharpMap.Data.FeatureDataTable.#ctor(GeoAPI.Geometries.IGeometryFactory)">created</see>.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataTable.DataSet">
            <summary>
            Gets the containing FeatureDataSet.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataTable.DefaultView">
            <summary>
            Gets the default FeatureDataView for the table.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataTable.Rows">
            <summary>
            Gets the collection of rows that belong to this table.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Thrown if this property is set.
            </exception>
        </member>
        <member name="T:SharpMap.Data.FeatureDataRow`1">
            <summary>
            Represents a row of data in a <see cref="T:SharpMap.Data.FeatureDataTable`1"/>.
            </summary>
            <typeparam name="TOid">Type of the object id (OID).</typeparam>
        </member>
        <member name="P:SharpMap.Data.FeatureDataRow`1.Id">
            <summary>
            The feature's unique object id.
            </summary>
            <remarks>
            The OID is usually generated by the system which created the feature.
            </remarks>
        </member>
        <member name="P:SharpMap.Data.FeatureDataRow`1.Table">
            <summary>
            The table to which this row belongs.
            </summary>
        </member>
        <member name="T:SharpMap.Expressions.SpatialAnalysisGeometricExpression">
            <summary>
            An Expression which takes twho GeometryExpressions and computes a third GeometryExpression
            defined for : Difference, Intersection, SymDifference and Union
            </summary>
        </member>
        <member name="T:SharpMap.Data.IFeatureAdapter">
            <summary>
            Represents a set of methods and properties used to fill and refresh a FeatureDataTable
            </summary>
            <remarks>
            Currently a place to dump all the extraneous FeatureDataTable and FeatureDataSet related 
            methods from IFeatureProvider, but we have better uses planned for it.
            </remarks>
        </member>
        <member name="M:SharpMap.Data.IFeatureAdapter.BeginExecuteFeatureQuery(SharpMap.Expressions.FeatureQueryExpression,SharpMap.Data.FeatureDataSet,System.AsyncCallback,System.Object)">
            <summary>
            Begins to retrieve the features which match the specified 
            <paramref name="query"/>.
            </summary>
            <param name="query">Feature spatial query to execute.</param>
            <param name="dataSet"><see cref="T:SharpMap.Data.FeatureDataSet"/> to fill data into.</param>
            <param name="callback">
            <see cref="T:System.AsyncCallback"/> delegate to invoke when the operation completes.
            </param>
            <param name="asyncState">
            Custom state to pass to the <paramref name="callback"/>.
            </param>
        </member>
        <member name="M:SharpMap.Data.IFeatureAdapter.BeginExecuteFeatureQuery(SharpMap.Expressions.FeatureQueryExpression,SharpMap.Data.FeatureDataTable,System.AsyncCallback,System.Object)">
            <summary>
            Begins to retrieve the features which match the specified 
            <paramref name="query"/>.
            </summary>
            <param name="query">Feature spatial query to execute.</param>
            <param name="table"><see cref="T:SharpMap.Data.FeatureDataTable"/> to fill data into.</param>
            <param name="callback">
            <see cref="T:System.AsyncCallback"/> delegate to invoke when the operation completes.
            </param>
            <param name="asyncState">
            Custom state to pass to the <paramref name="callback"/>.
            </param>
        </member>
        <member name="M:SharpMap.Data.IFeatureAdapter.BeginExecuteIntersectionQuery(GeoAPI.Geometries.IExtents,SharpMap.Data.FeatureDataSet,System.AsyncCallback,System.Object)">
            <summary>
            Begins to retrieve the data associated with all the features that 
            are intersected by <paramref name="bounds"/>.
            </summary>
            <param name="bounds"><see cref="T:GeoAPI.Geometries.IExtents"/> to intersect with.</param>
            <param name="dataSet"><see cref="T:SharpMap.Data.FeatureDataSet"/> to fill data into.</param>
            <param name="callback">
            <see cref="T:System.AsyncCallback"/> delegate to invoke when the operation completes.
            </param>
            <param name="asyncState">
            Custom state to pass to the <paramref name="callback"/>.
            </param>
        </member>
        <member name="M:SharpMap.Data.IFeatureAdapter.BeginExecuteIntersectionQuery(GeoAPI.Geometries.IExtents,SharpMap.Data.FeatureDataSet,SharpMap.Data.FeatureQueryExecutionOptions,System.AsyncCallback,System.Object)">
            <summary>
            Begins to retrieve the data associated with all the features that 
            are intersected by <paramref name="bounds"/>.
            </summary>
            <param name="bounds"><see cref="T:GeoAPI.Geometries.IExtents"/> to intersect with.</param>
            <param name="dataSet"><see cref="T:SharpMap.Data.FeatureDataSet"/> to fill data into.</param>
            <param name="options">Options indicating which data to retrieve.</param>
            <param name="callback">
            <see cref="T:System.AsyncCallback"/> delegate to invoke when the operation completes.
            </param>
            <param name="asyncState">
            Custom state to pass to the <paramref name="callback"/>.
            </param>
        </member>
        <member name="M:SharpMap.Data.IFeatureAdapter.BeginExecuteIntersectionQuery(GeoAPI.Geometries.IExtents,SharpMap.Data.FeatureDataTable,System.AsyncCallback,System.Object)">
            <summary>
            Begins to retrieve the data associated with all the features that 
            are intersected by <paramref name="bounds"/>.
            </summary>
            <param name="bounds"><see cref="T:GeoAPI.Geometries.IExtents"/> to intersect with.</param>
            <param name="table"><see cref="T:SharpMap.Data.FeatureDataTable"/> to fill data into.</param>
            <param name="callback">
            <see cref="T:System.AsyncCallback"/> delegate to invoke when the operation completes.
            </param>
            <param name="asyncState">
            Custom state to pass to the <paramref name="callback"/>.
            </param>
        </member>
        <member name="M:SharpMap.Data.IFeatureAdapter.BeginExecuteIntersectionQuery(GeoAPI.Geometries.IExtents,SharpMap.Data.FeatureDataTable,SharpMap.Data.FeatureQueryExecutionOptions,System.AsyncCallback,System.Object)">
            <summary>
            Begins to retrieve the data associated with all the features that 
            are intersected by <paramref name="bounds"/>.
            </summary>
            <param name="bounds"><see cref="T:GeoAPI.Geometries.IExtents"/> to intersect with.</param>
            <param name="table"><see cref="T:SharpMap.Data.FeatureDataTable"/> to fill data into.</param>
            <param name="options">Options indicating which data to retrieve.</param>
            <param name="callback">
            <see cref="T:System.AsyncCallback"/> delegate to invoke when the operation completes.
            </param>
            <param name="asyncState">
            Custom state to pass to the <paramref name="callback"/>.
            </param>
        </member>
        <member name="M:SharpMap.Data.IFeatureAdapter.EndExecuteFeatureQuery(System.IAsyncResult)">
            <summary>
            Ends a retrieval of the features, waiting on the 
            <see cref="P:System.IAsyncResult.AsyncWaitHandle"/> if the operation is not complete.
            </summary>
        </member>
        <member name="M:SharpMap.Data.IFeatureAdapter.ExecuteFeatureQuery(SharpMap.Expressions.FeatureQueryExpression,SharpMap.Data.FeatureDataSet)">
            <summary>
            Retrieves features into a <see cref="T:SharpMap.Data.FeatureDataSet"/> that 
            match the given <paramref name="query"/>.
            </summary>
            <param name="query">Spatial query to execute.</param>
            <param name="dataSet">FeatureDataSet to fill data into.</param>
        </member>
        <member name="M:SharpMap.Data.IFeatureAdapter.ExecuteFeatureQuery(SharpMap.Expressions.FeatureQueryExpression,SharpMap.Data.FeatureDataTable)">
            <summary>
            Retrieves features into a <see cref="T:SharpMap.Data.FeatureDataTable"/> that 
            match the given <paramref name="query"/>.
            </summary>
            <param name="query">Spatial query to execute.</param>
            <param name="table">FeatureDataTable to fill data into.</param>
        </member>
        <member name="M:SharpMap.Data.IFeatureAdapter.ExecuteGeometryIntersectionQuery(GeoAPI.Geometries.IExtents)">
            <summary>
            Gets the geometries within the specified 
            <see cref="T:GeoAPI.Geometries.IExtents"/>.
            </summary>
            <param name="bounds"><see cref="T:GeoAPI.Geometries.IExtents"/> to intersect with.</param>
            <returns>
            An enumeration of features within the specified 
            <see cref="T:GeoAPI.Geometries.IExtents"/>.
            </returns>
        </member>
        <member name="M:SharpMap.Data.IFeatureAdapter.ExecuteGeometryIntersectionQuery(GeoAPI.Geometries.IGeometry)">
            <summary>
            Gets the geometries within the specified 
            <see cref="T:GeoAPI.Geometries.IGeometry"/>.
            </summary>
            <param name="geometry">
            <see cref="T:GeoAPI.Geometries.IGeometry"/> to intersect with.
            </param>
            <returns>
            An enumeration of features within the specified 
            <see cref="T:GeoAPI.Geometries.IExtents"/>.
            </returns>
        </member>
        <member name="M:SharpMap.Data.IFeatureAdapter.ExecuteIntersectionQuery(GeoAPI.Geometries.IExtents,SharpMap.Data.FeatureDataSet)">
            <summary>
            Retrieves the data associated with all the features that 
            are intersected by <paramref name="bounds"/>.
            </summary>
            <param name="bounds"><see cref="T:GeoAPI.Geometries.IExtents"/> to intersect with.</param>
            <param name="dataSet">FeatureDataSet to fill data into.</param>
        </member>
        <member name="M:SharpMap.Data.IFeatureAdapter.ExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry,SharpMap.Data.FeatureDataSet)">
            <summary>
            Retrieves the data associated with all the features that 
            are intersected by <paramref name="geometry"/>.
            </summary>
            <param name="geometry"><see cref="T:GeoAPI.Geometries.IGeometry"/> to intersect with.</param>
            <param name="dataSet"><see cref="T:SharpMap.Data.FeatureDataSet"/> to fill data into.</param>
        </member>
        <member name="M:SharpMap.Data.IFeatureAdapter.ExecuteIntersectionQuery(GeoAPI.Geometries.IExtents,SharpMap.Data.FeatureDataSet,SharpMap.Data.FeatureQueryExecutionOptions)">
            <summary>
            Retrieves the data associated with all the features that 
            are intersected by <paramref name="bounds"/>.
            </summary>
            <param name="bounds"><see cref="T:GeoAPI.Geometries.IExtents"/> to intersect with.</param>
            <param name="dataSet">FeatureDataSet to fill data into.</param>
            <param name="options">Options indicating which data to retrieve.</param>
        </member>
        <member name="M:SharpMap.Data.IFeatureAdapter.ExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry,SharpMap.Data.FeatureDataSet,SharpMap.Data.FeatureQueryExecutionOptions)">
            <summary>
            Retrieves the data associated with all the features that 
            are intersected by <paramref name="geometry"/>.
            </summary>
            <param name="geometry"><see cref="T:GeoAPI.Geometries.IGeometry"/> to intersect with.</param>
            <param name="dataSet"><see cref="T:SharpMap.Data.FeatureDataSet"/> to fill data into.</param>
            <param name="options">Options indicating which data to retrieve.</param>
        </member>
        <member name="M:SharpMap.Data.IFeatureAdapter.ExecuteIntersectionQuery(GeoAPI.Geometries.IExtents,SharpMap.Data.FeatureDataTable)">
            <summary>
            Retrieves the data associated with all the features that 
            are intersected by <paramref name="bounds"/>.
            </summary>
            <param name="bounds"><see cref="T:GeoAPI.Geometries.IExtents"/> to intersect with.</param>
            <param name="table">FeatureDataTable to fill data into.</param>
        </member>
        <member name="M:SharpMap.Data.IFeatureAdapter.ExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry,SharpMap.Data.FeatureDataTable)">
            <summary>
            Retrieves the data associated with all the features that 
            are intersected by <paramref name="geometry"/>.
            </summary>
            <param name="geometry"><see cref="T:GeoAPI.Geometries.IGeometry"/> to intersect with.</param>
            <param name="table"><see cref="T:SharpMap.Data.FeatureDataTable"/> to fill data into.</param>
        </member>
        <member name="M:SharpMap.Data.IFeatureAdapter.ExecuteIntersectionQuery(GeoAPI.Geometries.IExtents,SharpMap.Data.FeatureDataTable,SharpMap.Data.FeatureQueryExecutionOptions)">
            <summary>
            Retrieves the data associated with all the features that 
            are intersected by <paramref name="bounds"/>.
            </summary>
            <param name="bounds"><see cref="T:GeoAPI.Geometries.IExtents"/> to intersect with.</param>
            <param name="table">FeatureDataTable to fill data into.</param>
            <param name="options">Options indicating which data to retrieve.</param>
        </member>
        <member name="M:SharpMap.Data.IFeatureAdapter.ExecuteIntersectionQuery(GeoAPI.Geometries.IGeometry,SharpMap.Data.FeatureDataTable,SharpMap.Data.FeatureQueryExecutionOptions)">
            <summary>
            Retrieves the data associated with all the features that 
            are intersected by <paramref name="geometry"/>.
            </summary>
            <param name="geometry"><see cref="T:GeoAPI.Geometries.IGeometry"/> to intersect with.</param>
            <param name="table"><see cref="T:SharpMap.Data.FeatureDataTable"/> to fill data into.</param>
            <param name="options">Options indicating which data to retrieve.</param>
        </member>
        <member name="M:SharpMap.Data.IFeatureAdapter.GetFeatures(System.Collections.IEnumerable)">
            <summary>
            Returns a <see cref="T:SharpMap.Data.IFeatureDataReader"/> for obtaining features
            from a set of feature object identifiers (oids).
            </summary>
            <param name="oids">A set of object ids (OIDs) of the features.</param>
            <returns>
            A set of features corresponding one-to-one to the given <paramref name="oids"/>.
            </returns>
        </member>
        <member name="T:SharpMap.Styles.StylePen">
            <summary>
            Represents a style for drawing lines.
            </summary>
        </member>
        <member name="M:SharpMap.Styles.StylePen.#ctor">
            <summary>
            Creates a new <see cref="T:SharpMap.Styles.StylePen"/> 
            with a <see cref="P:SharpMap.Styles.StylePen.Width"/> of 1.0 and <see cref="P:SharpMap.Styles.StylePen.BackgroundBrush"/>
            a solid <see cref="P:SharpMap.Styles.StyleColor.Black"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Styles.StylePen.#ctor(SharpMap.Styles.StyleColor,System.Double)">
            <summary>
            Creates a new <see cref="T:SharpMap.Styles.StylePen"/> with the given solid
            <paramref name="color"/> and <paramref name="width"/>.
            </summary>
            <param name="color">Color of the pen.</param>
            <param name="width">Width of the pen.</param>
        </member>
        <member name="M:SharpMap.Styles.StylePen.#ctor(SharpMap.Styles.StyleBrush,System.Double)">
            <summary>
            Creates a new pen with the given <see cref="T:SharpMap.Styles.StyleBrush"/>
            and <paramref name="width"/>.
            </summary>
            <param name="backgroundBrush">
            The StyleBrush which describes the color of the line.
            </param>
            <param name="width">The width of the line.</param>
        </member>
        <member name="P:SharpMap.Styles.StylePen.Alignment">
            <summary>
            Gets or sets the alignment of the pen.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StylePen.CompoundArray">
            <summary>
            Gets or sets an array of widths used to create a compound line.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StylePen.MiterLimit">
            <summary>
            Gets or sets a value which limits the length of a miter at a line joint.
            </summary>
            <remarks>
            If the value is set to less than 1.0f, the value is clamped to 1.0f.
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StylePen.BackgroundBrush">
            <summary>
            Gets or sets a brush used to paint the line.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StylePen.DashOffset">
            <summary>
            Gets or sets the offset of the start of the dash pattern.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StylePen.DashPattern">
            <summary>
            Gets or sets an array of values used as widths in a dash pattern.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StylePen.DashBrushes">
            <summary>
            Gets or sets an array of brushes used to draw the dashes in a pen.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StylePen.DashStyle">
            <summary>
            Gets or sets a value used to compute the dash pattern.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StylePen.StartCap">
            <summary>
            Gets or sets the type of line terminator at the beginning
            of a line.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StylePen.EndCap">
            <summary>
            Gets or sets the type of line terminator at the end
            of a line.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StylePen.DashCap">
            <summary>
            Gets or sets the type of ending present at the start and end
            of a dash in the line.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StylePen.LineJoin">
            <summary>
            Gets or sets the type of joint drawn where a line contains a join.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.StylePen.Transform">
            <summary>
            Gets or sets a matrix transformation for drawing with the pen.
            </summary>
            <remarks>
            If set to null, a <see cref="P:SharpMap.Rendering.Rendering2D.Matrix2D.Identity"/> matrix will be used instead.
            </remarks>
        </member>
        <member name="P:SharpMap.Styles.StylePen.Width">
            <summary>
            Gets or sets the width of the line drawn by this pen.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.CustomTheme">
            <summary>
            The CustomTheme class is used for defining your own 
            thematic rendering by using a custom delegate for value-based
            style generation.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.CustomTheme.#ctor(SharpMap.Rendering.Thematics.CustomTheme.GetStyleMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Rendering.Thematics.CustomTheme"/> class
            </summary>
            <param name="getStyleMethod"></param>
        </member>
        <member name="M:SharpMap.Rendering.Thematics.CustomTheme.GetStyle(SharpMap.Data.FeatureDataRow)">
            <summary>
            Returns the <see cref="T:SharpMap.Styles.IStyle">style</see> 
            based on a value in the feature, as computed by the 
            <see cref="P:SharpMap.Rendering.Thematics.CustomTheme.StyleDelegate"/> method.
            </summary>
            <param name="row">Feature to compute style for.</param>
            <returns>Feature value dependent style.</returns>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.CustomTheme.DefaultStyle">
            <summary>
            Gets or sets the default style when the custom style doesn't apply.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Thematics.CustomTheme.StyleDelegate">
            <summary>
            Gets or sets the style delegate used for determining the style of a feature
            </summary>
            <remarks>
            The delegate must take a <see cref="T:SharpMap.Data.FeatureDataRow"/> and return an <see cref="T:SharpMap.Styles.IStyle"/>.
            If the method returns null, the default style will be used for rendering.
            <example>
            The example below creates a delegate that can be used for assigning the rendering of a road theme. If the road-class
            is larger than '3', it will be rendered using a thick red line.
            <code lang="C#">
            using SharpMap.Styles;
            // [...]
            private static VectorStyle GetRoadStyle(FeatureDataRow row)
            {
            	VectorStyle style = new VectorStyle();
            
                Int32 roadClass = (Int32)row["RoadClass"];
            
            	if(roadClass &gt; 3)
                {
            		style.Line = new Pen(Color.Red,5f);
                }
            	else
            	{
                	style.Line = new Pen(Color.Black,1f);
                }
            
            	return style;
            }
            </code>
            </example>
            </remarks>
            <seealso cref="T:SharpMap.Rendering.Thematics.CustomTheme.GetStyleMethod"/>
        </member>
        <member name="T:SharpMap.Rendering.Thematics.CustomTheme.GetStyleMethod">
            <summary>
            Custom Style Delegate method
            </summary>
            <remarks>
            The GetStyle delegate is used for determining the style of 
            a feature using the <see cref="P:SharpMap.Rendering.Thematics.CustomTheme.StyleDelegate"/> property.
            The method must take a <see cref="T:SharpMap.Data.FeatureDataRow"/> and 
            return an <see cref="T:SharpMap.Styles.IStyle"/>.
            If the method returns null, the default style will be 
            used for rendering.
            <para>
            <example>
            The following example can used for highlighting all 
            features where the attribute "NAME" starts with "S".
            <code lang="C#">
            using SharpMap.Rendering.Thematics;
            using SharpMap.Styles;
            // [...]
            CustomTheme theme = new CustomTheme(generateCustomStyle);
            VectorStyle defaultStyle = new VectorStyle(); // Create default render style
            defaultStyle.Fill = Brushes.Gray;
            theme.DefaultStyle = defaultStyle;
            
            // [...]
            
            // Set up delegate for determining fill-color.
            // Delegate will fill all objects with a yellow color where the attribute "NAME" starts with "S".
            private static VectorStyle generateCustomStyle(FeatureDataRow row)
            {
            	if (row["NAME"].ToString().StartsWith("S"))
            	{
            		VectorStyle style = new VectorStyle();
            		style.Fill = Brushes.Yellow;
            		return style;
            	}
            	else
            	{	
                    return null; // Return null which will render the default style
                }
            }
            </code>
            </example>
            </para>
            </remarks>
            <param name="dr">Feature</param>
            <returns>Style to be applied to feature.</returns>
        </member>
        <member name="T:SharpMap.Rendering.Rendering2D.Figure2D">
            <summary>
            A path-based figure in 2 dimensions.
            </summary>
        </member>
        <member name="T:SharpMap.Styles.RasterStyle">
            <summary>
            Represents a style for a <see cref="T:SharpMap.Layers.RasterLayer"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.RasterStyle.ColorTransform">
            <summary>
            Gets or sets a color transform matrix used to recolor the 
            raster data.
            </summary>
        </member>
        <member name="T:SharpMap.Presentation.ToolChangeRequestedEventArgs">
            <summary>
            Encapsulates arguments for the <see cref="!:IToolsView.ToolChangeRequested"/>
            event.
            </summary>
        </member>
        <member name="M:SharpMap.Presentation.ToolChangeRequestedEventArgs.#ctor(SharpMap.Tools.IMapTool)">
            <summary>
            Creates a new instance of a <see cref="T:SharpMap.Presentation.ToolChangeRequestedEventArgs"/>
            with the given <see cref="T:SharpMap.Tools.IMapTool"/>.
            </summary>
            <param name="requestedTool">
            The <see cref="T:SharpMap.Tools.IMapTool"/> to request change to.
            </param>
        </member>
        <member name="P:SharpMap.Presentation.ToolChangeRequestedEventArgs.RequestedTool">
            <summary>
            Gets the <see cref="T:SharpMap.Tools.IMapTool"/> which the request is to change
            to.
            </summary>
        </member>
        <member name="T:SharpMap.Data.FeatureQueryExecutionOptions">
            <summary>
            Specifies which data is retrieved from the <see cref="T:SharpMap.Data.IFeatureProvider"/>.
            </summary>
        </member>
        <member name="F:SharpMap.Data.FeatureQueryExecutionOptions.None">
            <summary>
            Specifies that nothing should be retrieved. Used as a flag for unspecified options.
            </summary>
        </member>
        <member name="F:SharpMap.Data.FeatureQueryExecutionOptions.Keys">
            <summary>
            Specifies that the keys should be retrieved.
            </summary>
        </member>
        <member name="F:SharpMap.Data.FeatureQueryExecutionOptions.BoundingBoxes">
            <summary>
            Specifies that the bounding boxes of feature geometries should be retrieved.
            </summary>
        </member>
        <member name="F:SharpMap.Data.FeatureQueryExecutionOptions.KeysAndBoundingBoxes">
            <summary>
            Specifies that both the keys and the bounding boxes of 
            feature geometries should be retrieved.
            </summary>
        </member>
        <member name="F:SharpMap.Data.FeatureQueryExecutionOptions.Geometries">
            <summary>
            Specifies that the feature geometries should be retrieved.
            </summary>
        </member>
        <member name="F:SharpMap.Data.FeatureQueryExecutionOptions.Attributes">
            <summary>
            Specifies that the feature attributes should be retrieved.
            </summary>
        </member>
        <member name="F:SharpMap.Data.FeatureQueryExecutionOptions.FullFeature">
            <summary>
            Specifies that all feature data should be retrieved.
            </summary>
        </member>
        <member name="T:SharpMap.Presentation.Presenters.ToolsPresenter">
            <summary>
            The presenter for managing a <see cref="T:SharpMap.Tools.MapTool">view</see> of 
            <see cref="T:SharpMap.Presentation.Views.IToolsView"/> instances.
            </summary>
        </member>
        <member name="M:SharpMap.Presentation.Presenters.ToolsPresenter.#ctor(SharpMap.Map,SharpMap.Presentation.Views.IToolsView)">
            <summary>
            Creates a new instance of a <see cref="T:SharpMap.Presentation.Presenters.ToolsPresenter"/> with the given model and view.
            </summary>
            <param name="map">The map model to present.</param>
            <param name="toolsView">
            The view to accept input from and keep synchronized with the model.
            </param>
        </member>
        <member name="T:SharpMap.Styles.CollisionDetectionType">
            <summary>
            Specifies the type of collision detection to perform on labels.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.CollisionDetectionType.None">
            <summary>
            No collision detection.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.CollisionDetectionType.Simple">
            <summary>
            Simple, computationally-inexpensive collision detection.
            </summary>
        </member>
        <member name="F:SharpMap.Styles.CollisionDetectionType.Advanced">
            <summary>
            Full collision detection and rule-based label rearrangement.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.AsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Create result object for task instance
            </summary>
            <param name="asyncCallback">notification method when task complete</param>
            <param name="state">task specific state object</param>
        </member>
        <member name="M:SharpMap.Data.Providers.AsyncResult.SetComplete">
            <summary>
            Task marks self as completed successfully asynchronously
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.AsyncResult.SetComplete(System.Boolean,System.Exception)">
            <summary>
            Task marks self as completed, any outcome
            </summary>
            <param name="completedSynchronously">true if task completed synchronously</param>
            <param name="terminatingException">exception terminating task if any</param>
        </member>
        <member name="M:SharpMap.Data.Providers.AsyncResult.EndInvoke">
            <summary>
            Task EndXXX method called
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.Rendering2D.VectorRenderer2D`1">
            <summary>
            Provides a base class for generating rendered objects from vector shapes.
            </summary>
            <remarks>
            This class is used to create a new IVectorRender2D for various graphics systems.
            </remarks>
            <typeparam name="TRenderObject">The type of rendered object to produce.</typeparam>
        </member>
        <member name="T:SharpMap.Layers.GeometryLayer">
            <summary>
            A map layer of feature geometries.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.GeometryLayer.#ctor(SharpMap.Data.IFeatureProvider)">
            <summary>
            Initializes a new, empty vector layer.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.GeometryLayer.#ctor(System.String,SharpMap.Data.IFeatureProvider)">
            <summary>
            Initializes a new layer with the given name and datasource.
            </summary>
            <param name="layername">Name of the layer.</param>
            <param name="dataSource">Data source.</param>
        </member>
        <member name="M:SharpMap.Layers.GeometryLayer.#ctor(System.String,SharpMap.Styles.GeometryStyle,SharpMap.Data.IFeatureProvider)">
            <summary>
            Initializes a new layer with the given name, style and datasource.
            </summary>
            <param name="layername">Name of the layer.</param>
            <param name="style">Style to apply to the layer.</param>
            <param name="dataSource">Data source.</param>
        </member>
        <member name="M:SharpMap.Layers.GeometryLayer.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.GeometryLayer.Clone">
            <summary>
            Clones the layer.
            </summary>
            <returns>A copy of the layer.</returns>
        </member>
        <member name="P:SharpMap.Layers.GeometryLayer.Style">
            <summary>
            Gets or sets the layer style as a VectorStyle.
            </summary>
        </member>
        <member name="T:SharpMap.Data.FeatureDataTable`1">
            <summary>
            Represents one feature table of in-memory spatial data, 
            with an object identifier (OID) type of <typeparamref name="TOid"/>.
            </summary>
            <typeparam name="TOid">Type of the object id.</typeparam>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable`1.CreateEmpty(System.String,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a new, empty <see cref="T:SharpMap.Data.FeatureDataTable`1"/>.
            </summary>
            <param name="idColumnName">The name of the id column in the feature table.</param>
            <returns>A new, empty FeatureDataTable{TOid} with a single column for the id.</returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable`1.CreateTableWithId(SharpMap.Data.FeatureDataTable,System.String,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a new <see cref="T:SharpMap.Data.FeatureDataTable`1"/> for the given <paramref name="table"/>,
            copying both schema and data.
            </summary>
            <param name="table">The table to copy.</param>
            <param name="columnName">The name of the id column.</param>
            <returns>A FeatureDataTable{TOid} instance which is a copy of <paramref name="table"/> 
            and with id column <paramref name="columnName"/>.</returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable`1.CreateTableWithId(SharpMap.Data.FeatureDataTable,System.Data.DataColumn,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a new <see cref="T:SharpMap.Data.FeatureDataTable`1"/> for the given <paramref name="table"/>,
            copying both schema and data.
            </summary>
            <param name="table">The table to copy.</param>
            <param name="column">The id column.</param>
            <returns>A FeatureDataTable{TOid} instance which is a copy of <paramref name="table"/> 
            and with id column <paramref name="column"/>.</returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable`1.#ctor(System.Data.DataTable,System.String,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Creates a new <see cref="T:SharpMap.Data.FeatureDataTable`1"/> from the given
            DataTable and with the <see cref="P:SharpMap.Data.FeatureDataTable`1.IdColumn"/> chosen the name
            given with <paramref name="idColumnName"/>.
            </summary>
            <param name="table">The table to copy.</param>
            <param name="idColumnName">The name of the OID column.</param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable`1.AddRow(SharpMap.Data.FeatureDataRow{`0})">
            <summary>
            Adds a feature row to the table.
            </summary>
            <param name="row">The feature row to add.</param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable`1.Clone">
            <summary>
            Clones the structure of the FeatureDataTable, including all 
            <see cref="T:SharpMap.Data.FeatureDataTable"/> schemas and constraints. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable`1.Find(`0)">
            <summary>
            Finds a feature given the feature's <abbr title="Object identifier">OID</abbr>.
            </summary>
            <param name="key">
            The unique key value (the OID) to use to find the feature.
            </param>
            <returns>
            The feature row with the given <paramref name="key"/>, or <see langword="null"/>
            if a feature with the key wasn't found.
            </returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable`1.GetEnumerator">
            <summary>
            Returns an enumerator for enumering the rows of the 
            <see cref="T:SharpMap.Data.FeatureDataTable`1">table</see> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable`1.NewRow(`0)">
            <summary>
            Creates a new FeatureDataRow with the same schema as the table.
            </summary>
            <param name="id">The feature id for the feature row.</param>
            <returns>
            A new <see cref="T:SharpMap.Data.FeatureDataRow"/> with the same schema as the table,
            with the given <paramref name="id"/>.
            </returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable`1.NewRow(`0,System.Boolean)">
            <summary>
            Creates a new FeatureDataRow with the same schema as the table.
            </summary>
            <param name="id">The feature id for the feature row.</param>
            <param name="isFullyLoaded">
            A value indicating whether the row is fully loaded from the data source
            or not (lazy-loaded).
            </param>
            <returns>
            A new <see cref="T:SharpMap.Data.FeatureDataRow"/> with the same schema as the table,
            with the given <paramref name="id"/>.
            </returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable`1.RemoveRow(SharpMap.Data.FeatureDataRow{`0})">
            <summary>
            Removes the feature row from the table.
            </summary>
            <param name="row">Row to remove.</param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable`1.CreateInstance">
            <summary>
            Factory method to create a new instance of <see cref="T:SharpMap.Data.FeatureDataTable`1"/>
            for parent class use.
            </summary>
            <returns>A new instance of a <see cref="T:SharpMap.Data.FeatureDataTable`1"/>.</returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable`1.NewRowFromBuilder(System.Data.DataRowBuilder)">
            <summary>
            Creates a new FeatureDataRow with the same schema as the table, 
            based on a datarow builder.
            </summary>
            <param name="builder">A DataRowBuilder instance to create the record with.</param>
            <returns>A new DataRow with the same schema as the table.</returns>
        </member>
        <member name="M:SharpMap.Data.FeatureDataTable`1.GetRowType">
            <summary>
            Gets the type of <see cref="T:System.Data.DataRow"/> used by the 
            <see cref="T:SharpMap.Data.FeatureDataTable`1"/>.
            </summary>
            <returns>
            Returns a <see cref="T:System.Type"/> object identifying <see cref="T:SharpMap.Data.FeatureDataRow`1"/>.
            </returns>
        </member>
        <member name="P:SharpMap.Data.FeatureDataTable`1.IdColumn">
            <summary>
            Gets the <see cref="T:System.Data.DataColumn"/> which represents the id column 
            for the feature table.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataTable`1.PrimaryKey">
            <summary>
            Gets or set an array of columns that serve as primary keys 
            for the feature data table.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Thrown when key array length is greater than 1.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the key array length is zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the column in the key array is not 
            equal to <see cref="P:SharpMap.Data.FeatureDataTable`1.IdColumn"/>.
            </exception>
        </member>
        <member name="P:SharpMap.Data.FeatureDataTable`1.Item(System.Int32)">
            <summary>
            Gets the feature data row at the specified index
            </summary>
            <param name="index">row index</param>
            <returns>FeatureDataRow</returns>
        </member>
        <member name="T:SharpMap.Data.FeatureDataRowChangeEventHandler">
            <summary>
            Represents the method that will handle the RowChanging, RowChanged, RowDeleting, 
            and RowDeleted events of a FeatureDataTable. 
            </summary>
        </member>
        <member name="T:SharpMap.Layers.DuplicateLayerException">
            <summary>
            Exception thrown when a layer with a name which is the same
            as an existing layer is added to a <see cref="!:Map.LayerCollection"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Layers.DuplicateLayerException.#ctor(System.String)">
            <summary>
            Creates a new instance of DuplicateLayerException, indicating
            the duplicate layer name by <paramref name="duplicateLayerName"/>.
            </summary>
            <param name="duplicateLayerName">
            The existing layer name which was duplicated.
            </param>
        </member>
        <member name="M:SharpMap.Layers.DuplicateLayerException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of DuplicateLayerException, indicating
            the duplicate layer name by <paramref name="duplicateLayerName"/>
            and including a message.
            </summary>
            <param name="duplicateLayerName">
            The existing layer name which was duplicated.
            </param>
            <param name="message">Additional information about the exception.</param>
        </member>
        <member name="M:SharpMap.Layers.DuplicateLayerException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of DuplicateLayerException, indicating
            the duplicate layer name by <paramref name="duplicateLayerName"/>
            and including a message.
            </summary>
            <param name="duplicateLayerName">
            The existing layer name which was duplicated.
            </param>
            <param name="message">
            Additional information about the exception.
            </param>
            <param name="inner">
            An exception which caused this exception, if any.
            </param>
        </member>
        <member name="M:SharpMap.Layers.DuplicateLayerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of DuplicateLayerException from serialized data,
            <paramref name="info"/>.
            </summary>
            <param name="info">The serialization data.</param>
            <param name="context">Serialzation context.</param>
        </member>
        <member name="P:SharpMap.Layers.DuplicateLayerException.DuplicateLayerName">
            <summary>
            Gets the existing layer name which was duplicated.
            </summary>
        </member>
        <member name="T:SharpMap.Indexing.RTree.GuttmanQuadraticInsert`1">
            <summary>
            Implements a common, well known R-Tree insertion strategy.
            </summary>
            <typeparam name="TItem">The type of items indexed.</typeparam>
            <remarks>
            This strategy follows Antonin Guttman's findings in his paper 
            entitled "R-Trees: A Dynamic Index Structure for Spatial Searching", 
            Proc. 1984 ACM SIGMOD International Conference on Management of Data, pp. 47-57.
            </remarks>
        </member>
        <member name="T:SharpMap.Rendering.Rendering2D.Size2D">
            <summary>
            A 2 dimensional measure of size.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Size2D.System#IEquatable{NPack#Interfaces#IMatrix{NPack#DoubleComponent}}#Equals(NPack.Interfaces.IMatrix{NPack.DoubleComponent})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
            
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Size2D.NPack#Interfaces#IAddable{NPack#Interfaces#IMatrix{NPack#DoubleComponent}}#Add(NPack.Interfaces.IMatrix{NPack.DoubleComponent})">
            <summary>
            Returns the sum of the object and <paramref name="b"/>.
            It must not modify the value of the object.
            </summary>
            <param name="b">The second operand.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Size2D.NPack#Interfaces#ISubtractable{NPack#Interfaces#IMatrix{NPack#DoubleComponent}}#Subtract(NPack.Interfaces.IMatrix{NPack.DoubleComponent})">
            <summary>
            Returns the difference of the object and <paramref name="b"/>.
            It must not modify the value of the object.
            </summary>
            <param name="b">The second operand.</param>
            <returns>The difference.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Size2D.NPack#Interfaces#INegatable{NPack#Interfaces#IMatrix{NPack#DoubleComponent}}#Negative">
            <summary>
            Returns the negative of the object. Must not modify the object itself.
            </summary>
            <returns>The negative.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Size2D.NPack#Interfaces#IMultipliable{NPack#Interfaces#IMatrix{NPack#DoubleComponent}}#Multiply(NPack.Interfaces.IMatrix{NPack.DoubleComponent})">
            <summary>
            Returns the product of the object and <paramref name="b"/>.
            It must not modify the value of the object.
            </summary>
            <param name="b">The second operand.</param>
            <returns>The product.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Size2D.NPack#Interfaces#IDivisible{NPack#Interfaces#IMatrix{NPack#DoubleComponent}}#Divide(NPack.Interfaces.IMatrix{NPack.DoubleComponent})">
            <summary>
            Returns the quotient of the object and <paramref name="b"/>.
            It must not modify the value of the object.
            </summary>
            <param name="b">The second operand.</param>
            <returns>The quotient.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Size2D.System#Collections#Generic#IEnumerable{NPack#DoubleComponent}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Size2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#Clone">
            <summary>
            Makes an element-by-element copy of the matrix.
            </summary>
            <returns>An exact copy of the matrix.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Size2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#GetMatrix(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Gets a submatrix.
            </summary>
            <param name="rowIndexes">The indexes of the rows to include.</param>
            <param name="j0">The starting column to include.</param>
            <param name="j1">The ending column to include.</param>
            <returns></returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Size2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#Transpose">
            <summary>
            Returns the transpose of the matrix.
            </summary>
            <returns>The matrix with the rows as columns and columns as rows.</returns>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Size2D.NPack#Interfaces#IHasZero{NPack#Interfaces#IMatrix{NPack#DoubleComponent}}#Zero">
            <summary>
            Returns the additive identity.
            </summary>
            <value>e</value>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Size2D.NPack#Interfaces#IHasOne{NPack#Interfaces#IMatrix{NPack#DoubleComponent}}#One">
            <summary>
            Returns the multiplicative identity.
            </summary>
            <value>e</value>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Size2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#Determinant">
            <summary>
            Gets the determinant for the matrix, if it exists.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Size2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#ColumnCount">
            <summary>
            Gets the number of columns in the matrix.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Size2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#IsSingular">
            <summary>
            Gets true if the matrix is singular (non-invertable).
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Size2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#IsInvertible">
            <summary>
            Gets true if the matrix is invertable (non-singular).
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Size2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#Inverse">
            <summary>
            Gets the inverse of the matrix, if one exists.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Size2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#IsSquare">
            <summary>
            Gets true if the matrix is square (<c>RowCount == ColumnCount != 0</c>).
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Size2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#IsSymmetrical">
            <summary>
            Gets true if the matrix is symmetrical.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Size2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#RowCount">
            <summary>
            Gets the number of rows in the matrix.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Size2D.NPack#Interfaces#IMatrix{NPack#DoubleComponent}#Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets an element in the matrix.
            </summary>
            <param name="row">The index of the row of the element.</param>
            <param name="column">The index of the column of the element.</param>
            <returns>The value of the element at the given index.</returns>
        </member>
        <member name="T:SharpMap.Rendering.Rendering2D.Matrix2D">
            <summary>
            Represents a 2 dimensional affine transform matrix (a 3x3 matrix).
            </summary>
            <remarks>
            Matrix2D is arranged in row-major format, like GDI+, WPF and DirectX matrixes, where
            the translate components are in the 3rd row.
            </remarks>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Matrix2D.#ctor">
            <summary>
            Creates a new identity Matrix2D.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Matrix2D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new Matrix2D with the given values.
            </summary>
            <param name="m11">The first row, first column component.</param>
            <param name="m21">The second row, first column component.</param>
            <param name="m12">The second row, first column component.</param>
            <param name="m22">The second row, second column component.</param>
            <param name="offsetX">The third row, first column component.</param>
            <param name="offsetY">The second row, third column component.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Matrix2D.#ctor(NPack.Interfaces.IMatrix{NPack.DoubleComponent})">
            <summary>
            Creates a new matrix, copying the elements in <paramref name="matrixToCopy"/>.
            </summary>
            <param name="matrixToCopy">The matrix to copy the elements from.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Matrix2D.Clone">
            <summary>
            Creates an element-for-element copy of the 2D matrix.
            </summary>
            <returns>An identical 2D matrix.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Matrix2D.Scale(System.Double,System.Double)">
            <summary>
            Appends a scale factor to this matrix.
            </summary>
            <param name="x">Scale to apply to the X dimension.</param>
            <param name="y">Scale to apply to the Y dimension.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Matrix2D.Scale(SharpMap.Rendering.Rendering2D.Size2D)">
            <summary>
            Scales the values of this matrix by the given <see cref="T:SharpMap.Rendering.Rendering2D.Size2D"/>,
            appending the scale factor.
            </summary>
            <param name="size">The size to scale the <see cref="T:SharpMap.Rendering.Rendering2D.Matrix2D"/> by.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Matrix2D.ScalePrepend(System.Double,System.Double)">
            <summary>
            Prepends a scale factor to this matrix.
            </summary>
            <param name="x">Scale to apply to the X dimension.</param>
            <param name="y">Scale to apply to the Y dimension.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Matrix2D.Translate(System.Double,System.Double)">
            <summary>
            Appends a translation vector to this matrix.
            </summary>
            <param name="x">X component of the translation vector.</param>
            <param name="y">Y component of the translation vector.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Matrix2D.TranslatePrepend(System.Double,System.Double)">
            <summary>
            Prepends a translation vector to this matrix.
            </summary>
            <param name="x">X component of the translation vector.</param>
            <param name="y">Y component of the translation vector.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Matrix2D.Rotate(System.Double)">
            <summary>
            Appends a rotation in radians onto this matrix.
            </summary>
            <param name="theta">Amount to rotate, in radians.</param>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Matrix2D.TransformVector(System.Double,System.Double)">
            <summary>
            Transforms a point by multiplying it with this matrix.
            </summary>
            <param name="x">X component of the point.</param>
            <param name="y">Y component of the point.</param>
            <returns>A Point2D describing the transformed input.</returns>
        </member>
        <member name="M:SharpMap.Rendering.Rendering2D.Matrix2D.Equals(SharpMap.Rendering.Rendering2D.Matrix2D)">
            <summary>
            Computes whether the <see cref="T:SharpMap.Rendering.Rendering2D.Matrix2D"/> instance
            is equal to some <paramref name="other"/>.
            </summary>
            <param name="other">
            The other <see cref="T:SharpMap.Rendering.Rendering2D.Matrix2D"/> to test for equality.
            </param>
            <returns>
            <see langword="true"/> if they are equal; <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Matrix2D.Identity">
            <summary>
            Gets an identity 2D matrix.
            </summary>
            <remarks>
            A 3x3 affine transform matrix, with 1s in the diagonal, and 0s everywhere else:
            
                | 1  0  0 |
                | 0  1  0 |
                | 0  0  1 |
            </remarks>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Matrix2D.Inverse">
            <summary>
            Gets the inverse of the 2D matrix.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Matrix2D.M11">
            <summary>
            The first row, first column component.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Matrix2D.M21">
            <summary>
            The second row, first column component.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Matrix2D.OffsetX">
            <summary>
            The third row, first column component.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Matrix2D.M12">
            <summary>
            The second row, first column component.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Matrix2D.M22">
            <summary>
            The second row, second column component.
            </summary>
        </member>
        <member name="P:SharpMap.Rendering.Rendering2D.Matrix2D.OffsetY">
            <summary>
            The second row, third column component.
            </summary>
        </member>
        <member name="T:SharpMap.Data.FeatureDataView">
            <summary>
            Provides a data-bindable view of feature data stored in a 
            <see cref="T:SharpMap.Data.FeatureDataTable"/>
            and can provide sorted, filtered, searchable and editable access to that data.
            </summary>
        </member>
        <member name="M:SharpMap.Data.FeatureDataView.#ctor(SharpMap.Data.FeatureDataTable)">
            <summary>
            Creates a new <see cref="T:SharpMap.Data.FeatureDataView"/> on the given
            <see cref="T:SharpMap.Data.FeatureDataTable"/>.
            </summary>
            <param name="table">Table to create view on.</param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataView.#ctor(SharpMap.Data.FeatureDataTable,GeoAPI.Geometries.IGeometry,System.String,System.Data.DataViewRowState)">
            <summary>
            Creates a new <see cref="T:SharpMap.Data.FeatureDataView"/> on the given
            <see cref="T:SharpMap.Data.FeatureDataTable"/> having the specified geometry filter, 
            sort order and row state filter.
            </summary>
            <param name="table">Table to create view on.</param>
            <param name="intersectionFilter">
            Geometry used in intersection test to filter feature table rows.
            </param>
            <param name="sort">Sort expression to order view by.</param>
            <param name="rowState">Filter on the state of the rows to view.</param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataView.#ctor(SharpMap.Data.FeatureDataTable,GeoAPI.Geometries.IGeometry,SharpMap.Expressions.SpatialOperation,System.String,System.Data.DataViewRowState)">
            <summary>
            Creates a new <see cref="T:SharpMap.Data.FeatureDataView"/> on the given
            <see cref="T:SharpMap.Data.FeatureDataTable"/> having the specified geometry filter, 
            sort order and row state filter.
            </summary>
            <param name="table">Table to create view on.</param>
            <param name="query">
            Geometry used in building view to filter feature table rows.
            </param>
            <param name="op">
            Type of spatial relation which <paramref name="query"/> has to features.
            </param>
            <param name="sort">Sort expression to order view by.</param>
            <param name="rowState">Filter on the state of the rows to view.</param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataView.#ctor(SharpMap.Data.FeatureDataTable,SharpMap.Expressions.FeatureQueryExpression,System.String,System.Data.DataViewRowState)">
            <summary>
            Creates a new <see cref="T:SharpMap.Data.FeatureDataView"/> on the given
            <see cref="T:SharpMap.Data.FeatureDataTable"/> having the specified geometry filter, 
            sort order and row state filter.
            </summary>
            <param name="table">Table to create view on.</param>
            <param name="definition">
            Spatial expression used in building view to filter feature table rows.
            </param>
            <param name="sort">Sort expression to order view by.</param>
            <param name="rowState">Filter on the state of the rows to view.</param>
        </member>
        <member name="M:SharpMap.Data.FeatureDataView.ForceIndexRebuild">
            <summary>
            Causes the internal index to be rebuilt, and the current columnset and rowset
            to be updated, even if <see cref="P:SharpMap.Data.FeatureDataView.AutoIndexingEnabled"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataView.IsViewDefinitionExclusive">
            <summary>
            Gets or sets a value indicating that the <see cref="P:SharpMap.Data.FeatureDataView.ViewDefinition"/>
            filter is inclusive of the <see cref="P:SharpMap.Data.FeatureDataView.Table"/>'s rows (<see langword="true"/>),
            or exclusive (<see langword="false"/>).
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataView.SpatialFilter">
            <summary>
            Gets or sets the <see cref="T:SharpMap.Expressions.SpatialBinaryExpression"/> instance used
            to filter the table data based on a spatial relation.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataView.OidFilter">
            <summary>
            Gets or sets a set of feature identifiers (oids) used
            to include or exclude features from the view. 
            </summary>
            <remarks>
            A value of <see langword="null"/> clears the filter, and allows
            all features regardless of oid value.
            </remarks>
        </member>
        <member name="P:SharpMap.Data.FeatureDataView.AttributeFilter">
            <summary>
            Gets or sets a set of feature identifiers (oids) used
            to include or exclude features from the view. 
            </summary>
            <remarks>
            A value of <see langword="null"/> clears the filter, and allows
            all features regardless of oid value.
            </remarks>
        </member>
        <member name="P:SharpMap.Data.FeatureDataView.Extents">
            <summary>
            Gets the bounds which this view covers as an <see cref="T:GeoAPI.Geometries.IExtents"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataView.ViewDefinition">
            <summary>
            Gets or sets a <see cref="T:SharpMap.Expressions.FeatureQueryExpression"/> which defines the 
            set of columns as well as which rows are included in the view based on the 
            underlying <see cref="P:SharpMap.Data.FeatureDataView.Table"/>.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataView.DataViewManager">
            <summary>
            Gets the DataViewManager which is managing this view's settings.
            </summary>
        </member>
        <member name="P:SharpMap.Data.FeatureDataView.AutoIndexingEnabled">
            <summary>
            Gets or sets a value which enables (<see langword="true"/>)
            or disables (<see langword="false"/>) the automatic indexing of the view
            based on the <see cref="P:SharpMap.Data.FeatureDataView.ViewDefinition"/> used.
            </summary>
            <remarks>
            If <see cref="P:SharpMap.Data.FeatureDataView.AutoIndexingEnabled"/> is set to <see langword="false"/>
            and a new <see cref="P:SharpMap.Data.FeatureDataView.ViewDefinition"/> is set, the new columnset and/or 
            rowset will not be computed until 
            </remarks>
        </member>
        <member name="P:SharpMap.Data.FeatureDataView.RowFilter">
            <summary>
            RowFilter expressions not supported at this time. 
            Use the ViewDefinition property instead.
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:SharpMap.Data.FeatureDataView.Table">
            <summary>
            Gets or sets the table for which this view filters and / or sorts rows.
            </summary>
        </member>
        <member name="T:SharpMap.Data.Providers.GeometryProvider">
            <summary>
            Data source for storing a set of geometries in memory.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(GeoAPI.Geometries.IGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>.
            </summary>
            <param name="geometry">
            Geometry to be added to this data source.
            </param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(System.Collections.Generic.IEnumerable{GeoAPI.Geometries.IGeometry})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>.
            </summary>
            <param name="geometries">
            Set of geometries to add to this data source.
            </param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(SharpMap.Data.FeatureDataRow)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>.
            </summary>
            <param name="feature">
            Feature which has geometry to be used in this data source.
            </param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(System.Collections.Generic.IEnumerable{SharpMap.Data.FeatureDataRow})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>.
            </summary>
            <param name="features">
            Features which have geometry to be used in this data source.
            </param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(System.Byte[],GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>.
            </summary>
            <param name="wellKnownBinaryGeometry">
            An <see cref="T:GeoAPI.Geometries.IGeometry"/> instance as Well-Known Binary 
            to add to this data source.
            </param>
            <param name="factory">
            An <see cref="T:GeoAPI.Geometries.IGeometryFactory"/> instance to generate <see cref="T:GeoAPI.Geometries.IGeometry"/> instances.
            </param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.#ctor(System.String,GeoAPI.Geometries.IGeometryFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>
            </summary>
            <param name="wellKnownTextGeometry">
            An <see cref="T:GeoAPI.Geometries.IGeometry"/> instance as Well-Known Text 
            to add to this data source.
            </param>
            <param name="factory">
            An <see cref="T:GeoAPI.Geometries.IGeometryFactory"/> instance to generate <see cref="T:GeoAPI.Geometries.IGeometry"/> instances.
            </param>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.Close">
            <summary>
            Closes the data source
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.ExecuteQuery(SharpMap.Expressions.Expression)">
            <summary>
            Throws a <see cref="T:System.NotImplementedException"/>. 
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.GetExtents">
            <summary>
            The extents of the data source.
            </summary>
            <returns>
            An <see cref="T:GeoAPI.Geometries.IExtents"/> instance describing the extents of the 
            data available in the data source.
            </returns>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.Open">
            <summary>
            Opens the data source.
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.ExecuteFeatureQuery(SharpMap.Expressions.FeatureQueryExpression)">
            <summary>
            jd:implementing because it is called via view presenters 
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.ExecuteFeatureQuery(SharpMap.Expressions.FeatureQueryExpression,SharpMap.Data.FeatureQueryExecutionOptions)">
            <summary>
            jd:implementing because it is called via view presenters 
            </summary>
        </member>
        <member name="M:SharpMap.Data.Providers.GeometryProvider.GetFeatureCount">
            <summary>
            Retrieves the number of features accessible with this provider.
            </summary>
            <returns>The number of features this provider can access.</returns>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryProvider.GeometriesProperty">
            <summary>
            Gets a <see cref="T:System.ComponentModel.PropertyDescriptor"/> for 
            <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>'s <see cref="P:SharpMap.Data.Providers.GeometryProvider.Geometries"/> property.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryProvider.GeometryFactoryProperty">
            <summary>
            Gets a <see cref="T:System.ComponentModel.PropertyDescriptor"/> for 
            <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>'s <see cref="P:SharpMap.Data.Providers.GeometryProvider.GeometryFactory"/> property.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryProvider.LocaleProperty">
            <summary>
            Gets a <see cref="T:System.ComponentModel.PropertyDescriptor"/> for 
            <see cref="T:SharpMap.Data.Providers.GeometryProvider"/>'s <see cref="P:SharpMap.Data.Providers.GeometryProvider.Locale"/> property.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryProvider.Geometries">
            <summary>
            Gets or sets the geometries this data source contains.
            </summary>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryProvider.ConnectionId">
            <summary>
            Gets the connection ID of the data source
            </summary>
            <remarks>
            The connection ID is meant for connection pooling which doesn't apply to this data source. Instead
            <see cref="F:System.String.Empty"/> is returned.
            </remarks>
        </member>
        <member name="P:SharpMap.Data.Providers.GeometryProvider.IsOpen">
            <summary>
            Returns <see langword="true"/> if the data source is currently open.
            </summary>
        </member>
        <member name="T:SharpMap.Expressions.SpatialAnalysisBufferExpression">
            <summary>
            A SpatialAnalysisExpression which returns a GeometryExpression corresponding to buffering the input GeometryExpression by a distance
            </summary>
        </member>
        <member name="T:SharpMap.Utilities.SridUtility.SridMap">
            <summary>
            Utility class which attempts to map between integer and string srids and associated coordinate systems
            </summary>
        </member>
        <member name="T:SharpMap.Indexing.BinaryTree.BinaryTree`2">
            <summary>
            The BinaryTree class are used for indexing values to enhance the speed of queries
            </summary>
            <typeparam name="TKey">Value ID type</typeparam>
            <typeparam name="TValue">Value type to be indexed</typeparam>
        </member>
        <member name="M:SharpMap.Indexing.BinaryTree.BinaryTree`2.#ctor">
            <summary>
            Initializes a new instance of the generic binary tree.
            </summary>
        </member>
        <member name="M:SharpMap.Indexing.BinaryTree.BinaryTree`2.Add(SharpMap.Indexing.BinaryTree.BinaryTree{`0,`1}.ItemValue[])">
            <summary>
            Inserts a value into the tree
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:SharpMap.Indexing.BinaryTree.BinaryTree`2.Add(SharpMap.Indexing.BinaryTree.BinaryTree{`0,`1}.ItemValue)">
            <summary>
            Inserts a value into the tree
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:SharpMap.Indexing.BinaryTree.BinaryTree`2.Add(SharpMap.Indexing.BinaryTree.BinaryTreeNode{`0,`1},SharpMap.Indexing.BinaryTree.BinaryTreeNode{`0,`1})">
            <summary>
            Inserts a node into the tree
            </summary>
            <param name="newNode"></param>
            <param name="root"></param>
        </member>
        <member name="M:SharpMap.Indexing.BinaryTree.BinaryTree`2.Between(`1,`1)">
            <summary>
            Gets and enumerator for the values between min and max in ascending order
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns>Values between <paramref name="min"/> and <paramref name="max"/>.</returns>
        </member>
        <member name="M:SharpMap.Indexing.BinaryTree.BinaryTree`2.StartsWith(System.String)">
            <summary>
            Enumerates the objects whose String-representation starts with 'str'
            </summary>
            <param name="str"></param>
            <returns>Enumerator</returns>
        </member>
        <member name="M:SharpMap.Indexing.BinaryTree.BinaryTree`2.Find(`1)">
            <summary>
            Enumerates all objects with the specified value
            </summary>
            <param name="value">Value to search for</param>
            <returns>Enumerator</returns>
        </member>
        <member name="M:SharpMap.Indexing.BinaryTree.BinaryTree`2.TraceTree">
            <summary>
            This is the classic computer science binary tree iteration 
            </summary>
        </member>
        <member name="P:SharpMap.Indexing.BinaryTree.BinaryTree`2.InOrder">
            <summary>
            Gets an enumerator for all the values in the tree in ascending order
            </summary>
        </member>
        <member name="T:SharpMap.Indexing.BinaryTree.BinaryTree`2.ItemValue">
            <summary>
            A value in a <see cref="T:SharpMap.Indexing.BinaryTree.BinaryTree`2"/>.
            </summary>
        </member>
        <member name="F:SharpMap.Indexing.BinaryTree.BinaryTree`2.ItemValue.Id">
            <summary>
            Identifier for the value
            </summary>
        </member>
        <member name="F:SharpMap.Indexing.BinaryTree.BinaryTree`2.ItemValue.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:SharpMap.Indexing.BinaryTree.BinaryTree`2.ItemValue.#ctor(`0,`1)">
            <summary>
            Creates an instance of an item in a <see cref="T:SharpMap.Indexing.BinaryTree.BinaryTree`2"/>.
            </summary>
            <param name="value">Value</param>
            <param name="id">Identifier for the value</param>
        </member>
        <member name="T:SharpMap.Styles.LinearGradientStyleBrush">
            <summary>
            A brush which fills with a linearly interpolated gradient between
            two or more colors.
            </summary>
        </member>
        <member name="M:SharpMap.Styles.LinearGradientStyleBrush.ToString">
            <summary>
            Returns a String description of the <see cref="T:SharpMap.Styles.LinearGradientStyleBrush"/>.
            </summary>
            <returns>A String which describes the brush.</returns>
        </member>
        <member name="P:SharpMap.Styles.LinearGradientStyleBrush.ColorBlend">
            <summary>
            Gets or sets a <see cref="T:SharpMap.Styles.StyleColorBlend"/> used to balance 
            how the colors are interpolated across the gradient.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LinearGradientStyleBrush.StartColor">
            <summary>
            Gets or sets the starting color of the gradient.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LinearGradientStyleBrush.EndColor">
            <summary>
            Gets or sets the ending color of the gradient.
            </summary>
        </member>
        <member name="P:SharpMap.Styles.LinearGradientStyleBrush.Transform">
            <summary>
            Gets or sets the matrix used to transform the linear interpolation
            of the blend.
            </summary>
        </member>
        <member name="T:SharpMap.Rendering.RenderException">
            <summary>
            Exception thrown when rendering fails.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.RenderException.#ctor">
            <summary>
            Creates a new RenderException instance.
            </summary>
        </member>
        <member name="M:SharpMap.Rendering.RenderException.#ctor(System.String)">
            <summary>
            Creates a new RenderException instance with the given message.
            </summary>
            <param name="message">The message to include in the exception.</param>
        </member>
        <member name="M:SharpMap.Rendering.RenderException.#ctor(System.String,System.Exception)">
            <summary>
            Exception thrown when layer rendering has failed.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="inner">A related, usually causing, exception.</param>
        </member>
        <member name="T:SharpMap.Rendering.Rendering2D.BasicLabelRenderer2D`1">
            <summary>
            The base class for 2D feature renderers which produce labels.
            </summary>
            <typeparam name="TRenderObject">Type of render object to generate.</typeparam>
        </member>
        <member name="F:SharpMap.Rendering.Rendering2D.BasicLabelRenderer2D`1._textRenderer">
            <summary>
            
            </summary>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="T:SharpMap.Presentation.Views.ILayersView">
            <summary>
            Provides the interface for a view to display the 
            <see cref="T:SharpMap.Layers.LayerCollection"/> in a <see cref="T:SharpMap.Map"/>.
            </summary>
        </member>
        <member name="M:SharpMap.Presentation.Views.ILayersView.DisableLayer(System.String)">
            <summary>
            Disables the layer identified by <paramref name="layer"/>.
            </summary>
            <param name="layer">The name of the <see cref="T:SharpMap.Layers.Layer"/> to disable.</param>
        </member>
        <member name="M:SharpMap.Presentation.Views.ILayersView.EnableLayer(System.String)">
            <summary>
            Enables the layer identified by <paramref name="layer"/>.
            </summary>
            <param name="layer">The name of the <see cref="T:SharpMap.Layers.Layer"/> to enable.</param>
        </member>
        <member name="M:SharpMap.Presentation.Views.ILayersView.DisableChildLayers(System.String)">
            <summary>
            Disables the layer identified by <paramref name="layer"/>.
            </summary>
            <param name="layer">The name of the <see cref="T:SharpMap.Layers.Layer"/> to disable.</param>
        </member>
        <member name="M:SharpMap.Presentation.Views.ILayersView.EnableChildLayers(System.String)">
            <summary>
            Enables the layer identified by <paramref name="layer"/>.
            </summary>
            <param name="layer">The name of the <see cref="T:SharpMap.Layers.Layer"/> to enable.</param>
        </member>
        <member name="M:SharpMap.Presentation.Views.ILayersView.SetFeaturesSelectable(System.String,System.Boolean)">
            <summary>
            Make the layer identified by <paramref name="layer"/> (un)selectable.
            </summary>
            <param name="layer"></param>
            <param name="selectable"></param>
        </member>
        <member name="P:SharpMap.Presentation.Views.ILayersView.Layers">
            <summary>
            Sets the layers to display attributes for.
            </summary>
        </member>
        <member name="P:SharpMap.Presentation.Views.ILayersView.SelectedLayers">
            <summary>
            Gets or sets a list of layers to show as selected.
            </summary>
        </member>
        <member name="E:SharpMap.Presentation.Views.ILayersView.LayersSelectionChangeRequested">
            <summary>
            Event triggered when the layers selection is requested to be changed
            by the associated <see cref="T:SharpMap.Presentation.Presenters.LayersPresenter"/>.
            </summary>
        </member>
        <member name="E:SharpMap.Presentation.Views.ILayersView.LayersEnabledChangeRequested">
            <summary>
            Event triggered when a layer is requested to be enabled or disabled
            by the associated <see cref="T:SharpMap.Presentation.Presenters.LayersPresenter"/>.
            </summary>
        </member>
        <member name="E:SharpMap.Presentation.Views.ILayersView.LayerChildrenVisibilityChangeRequested">
            <summary>
            Event triggered when a layer is requested to have its children be
            enabled or disabled by the associated <see cref="T:SharpMap.Presentation.Presenters.LayersPresenter"/>.
            </summary>
        </member>
        <member name="E:SharpMap.Presentation.Views.ILayersView.LayerSelectabilityChangeRequested">
            <summary>
            Event triggered when a layer is requested to have its selectability be
            enabled or disabled by the associated <see cref="T:SharpMap.Presentation.Presenters.LayersPresenter"/>.
            </summary>
        </member>
        <member name="T:SharpMap.Styles.VerticalAlignment">
            <summary>
            Label text alignment
            </summary>
        </member>
        <member name="F:SharpMap.Styles.VerticalAlignment.Bottom">
            <summary>
            Left oriented
            </summary>
        </member>
        <member name="F:SharpMap.Styles.VerticalAlignment.Top">
            <summary>
            Right oriented
            </summary>
        </member>
        <member name="F:SharpMap.Styles.VerticalAlignment.Middle">
            <summary>
            Centered
            </summary>
        </member>
    </members>
</doc>
